/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.21
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};                                                    
#endif


#include "Python.h"

/*************************************************************** -*- c -*-
 * python/precommon.swg
 *
 * Rename all exported symbols from common.swg, to avoid symbol
 * clashes if multiple interpreters are included
 *
 ************************************************************************/

#define SWIG_TypeRegister    SWIG_Python_TypeRegister
#define SWIG_TypeCheck       SWIG_Python_TypeCheck
#define SWIG_TypeCast        SWIG_Python_TypeCast
#define SWIG_TypeDynamicCast SWIG_Python_TypeDynamicCast
#define SWIG_TypeName        SWIG_Python_TypeName
#define SWIG_TypeQuery       SWIG_Python_TypeQuery
#define SWIG_TypeClientData  SWIG_Python_TypeClientData
#define SWIG_PackData        SWIG_Python_PackData 
#define SWIG_UnpackData      SWIG_Python_UnpackData 


/***********************************************************************
 * common.swg
 *
 *     This file contains generic SWIG runtime support for pointer
 *     type checking as well as a few commonly used macros to control
 *     external linkage.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (c) 1999-2000, The University of Chicago
 * 
 * This file may be freely redistributed without license or fee provided
 * this copyright message remains intact.
 ************************************************************************/

#include <string.h>

#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  if defined(_MSC_VER) || defined(__GNUC__)
#    if defined(STATIC_LINKED)
#      define SWIGEXPORT(a) a
#      define SWIGIMPORT(a) extern a
#    else
#      define SWIGEXPORT(a) __declspec(dllexport) a
#      define SWIGIMPORT(a) extern a
#    endif
#  else
#    if defined(__BORLANDC__)
#      define SWIGEXPORT(a) a _export
#      define SWIGIMPORT(a) a _export
#    else
#      define SWIGEXPORT(a) a
#      define SWIGIMPORT(a) a
#    endif
#  endif
#else
#  define SWIGEXPORT(a) a
#  define SWIGIMPORT(a) a
#endif

#ifdef SWIG_GLOBAL
#  define SWIGRUNTIME(a) SWIGEXPORT(a)
#else
#  define SWIGRUNTIME(a) static a
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

typedef struct swig_type_info {
  const char             *name;
  swig_converter_func     converter;
  const char             *str;
  void                   *clientdata;
  swig_dycast_func        dcast;
  struct swig_type_info  *next;
  struct swig_type_info  *prev;
} swig_type_info;

#ifdef SWIG_NOINCLUDE

SWIGIMPORT(swig_type_info *) SWIG_TypeRegister(swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeCheck(char *c, swig_type_info *);
SWIGIMPORT(void *)           SWIG_TypeCast(swig_type_info *, void *);
SWIGIMPORT(swig_type_info *) SWIG_TypeDynamicCast(swig_type_info *, void **);
SWIGIMPORT(const char *)     SWIG_TypeName(const swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeQuery(const char *);
SWIGIMPORT(void)             SWIG_TypeClientData(swig_type_info *, void *);
SWIGIMPORT(char *)           SWIG_PackData(char *, void *, int);
SWIGIMPORT(char *)           SWIG_UnpackData(char *, void *, int);

#else

static swig_type_info *swig_type_list = 0;

/* Register a type mapping with the type-checking */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeRegister(swig_type_info *ti) {
  swig_type_info *tc, *head, *ret, *next;
  /* Check to see if this type has already been registered */
  tc = swig_type_list;
  while (tc) {
    if (strcmp(tc->name, ti->name) == 0) {
      /* Already exists in the table.  Just add additional types to the list */
      if (tc->clientdata) ti->clientdata = tc->clientdata;
      head = tc;
      next = tc->next;
      goto l1;
    }
    tc = tc->prev;
  }
  head = ti;
  next = 0;

  /* Place in list */
  ti->prev = swig_type_list;
  swig_type_list = ti;

  /* Build linked lists */
  l1:
  ret = head;
  tc = ti + 1;
  /* Patch up the rest of the links */
  while (tc->name) {
    head->next = tc;
    tc->prev = head;
    head = tc;
    tc++;
  }
  if (next) next->prev = head;
  head->next = next;
  return ret;
}

/* Check the typename */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeCheck(char *c, swig_type_info *ty) {
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  do {
    if (strcmp(s->name,c) == 0) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
        s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      s->prev = ty;
      return s;
    }
    s = s->next;
  } while (s && (s != ty->next));
  return 0;
}

/* Cast a pointer up an inheritance hierarchy */
SWIGRUNTIME(void *) 
SWIG_TypeCast(swig_type_info *ty, void *ptr) {
  if ((!ty) || (!ty->converter)) return ptr;
  return (*ty->converter)(ptr);
}

/* Dynamic pointer casting. Down an inheritance hierarchy */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/* Return the name associated with this type */
SWIGRUNTIME(const char *)
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/* Search for a swig_type_info structure */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeQuery(const char *name) {
  swig_type_info *ty = swig_type_list;
  while (ty) {
    if (ty->str && (strcmp(name,ty->str) == 0)) return ty;
    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
    ty = ty->prev;
  }
  return 0;
}

/* Set the clientdata field for a type */
SWIGRUNTIME(void)
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_type_info *tc, *equiv;
  if (ti->clientdata == clientdata) return;
  ti->clientdata = clientdata;
  equiv = ti->next;
  while (equiv) {
    if (!equiv->converter) {
      tc = swig_type_list;
      while (tc) {
        if ((strcmp(tc->name, equiv->name) == 0))
          SWIG_TypeClientData(tc,clientdata);
        tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}

/* Pack binary data into a string */
SWIGRUNTIME(char *)
SWIG_PackData(char *c, void *ptr, int sz) {
  static char hex[17] = "0123456789abcdef";
  int i;
  unsigned char *u = (unsigned char *) ptr;
  register unsigned char uu;
  for (i = 0; i < sz; i++,u++) {
    uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* Unpack binary data from a string */
SWIGRUNTIME(char *)
SWIG_UnpackData(char *c, void *ptr, int sz) {
  register unsigned char uu = 0;
  register int d;
  unsigned char *u = (unsigned char *) ptr;
  int i;
  for (i = 0; i < sz; i++, u++) {
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    *u = uu;
  }
  return c;
}

#endif

#ifdef __cplusplus
}
#endif

/***********************************************************************
 * python.swg
 *
 *     This file contains the runtime support for Python modules
 *     and includes code for managing global variables and pointer
 *     type checking.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 ************************************************************************/

#include "Python.h"

#ifdef __cplusplus
extern "C" {
#endif

#define SWIG_PY_INT     1
#define SWIG_PY_FLOAT   2
#define SWIG_PY_STRING  3
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Flags for pointer conversion */

#define SWIG_POINTER_EXCEPTION     0x1
#define SWIG_POINTER_DISOWN        0x2

/* Exception handling in wrappers */
#define SWIG_fail   goto fail

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;

/* Common SWIG API */
#define SWIG_ConvertPtr(obj, pp, type, flags) \
  SWIG_Python_ConvertPtr(obj, pp, type, flags)
#define SWIG_NewPointerObj(p, type, flags) \
  SWIG_Python_NewPointerObj(p, type, flags)
#define SWIG_MustGetPtr(p, type, argnum, flags) \
  SWIG_Python_MustGetPtr(p, type, argnum, flags)

/* Python-specific SWIG API */
#define SWIG_newvarlink() \
  SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr) \
  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_ConvertPacked(obj, ptr, sz, ty, flags) \
  SWIG_Python_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type) \
  SWIG_Python_NewPackedObj(ptr, sz, type)
#define SWIG_InstallConstants(d, constants) \
  SWIG_Python_InstallConstants(d, constants)

#ifdef SWIG_NOINCLUDE

SWIGIMPORT(int)               SWIG_Python_ConvertPtr(PyObject *, void **, swig_type_info *, int);
SWIGIMPORT(PyObject *)        SWIG_Python_NewPointerObj(void *, swig_type_info *,int own);
SWIGIMPORT(void *)            SWIG_Python_MustGetPtr(PyObject *, swig_type_info *, int, int);
SWIGIMPORT(PyObject *)        SWIG_Python_newvarlink(void);
SWIGIMPORT(void)              SWIG_Python_addvarlink(PyObject *, char *, PyObject *(*)(void), int (*)(PyObject *));
SWIGIMPORT(int)               SWIG_Python_ConvertPacked(PyObject *, void *, int sz, swig_type_info *, int);
SWIGIMPORT(PyObject *)        SWIG_Python_NewPackedObj(void *, int sz, swig_type_info *);
SWIGIMPORT(void)              SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]);

#else

/* -----------------------------------------------------------------------------
 * global variable support code.
 * ----------------------------------------------------------------------------- */

typedef struct swig_globalvar {   
  char       *name;                  /* Name of global variable */
  PyObject *(*get_attr)(void);       /* Return the current value */
  int       (*set_attr)(PyObject *); /* Set the value */
  struct swig_globalvar *next;
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar *vars;
} swig_varlinkobject;

static PyObject *
swig_varlink_repr(swig_varlinkobject *v) {
  v = v;
  return PyString_FromString("<Global variables>");
}

static int
swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags) {
  swig_globalvar  *var;
  flags = flags;
  fprintf(fp,"Global variables { ");
  for (var = v->vars; var; var=var->next) {
    fprintf(fp,"%s", var->name);
    if (var->next) fprintf(fp,", ");
  }
  fprintf(fp," }\n");
  return 0;
}

static PyObject *
swig_varlink_getattr(swig_varlinkobject *v, char *n) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->get_attr)();
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return NULL;
}

static int
swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->set_attr)(p);
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return 1;
}

statichere PyTypeObject varlinktype = {
  PyObject_HEAD_INIT(0)              
  0,
  (char *)"swigvarlink",              /* Type name    */
  sizeof(swig_varlinkobject),         /* Basic size   */
  0,                                  /* Itemsize     */
  0,                                  /* Deallocator  */ 
  (printfunc) swig_varlink_print,     /* Print        */
  (getattrfunc) swig_varlink_getattr, /* get attr     */
  (setattrfunc) swig_varlink_setattr, /* Set attr     */
  0,                                  /* tp_compare   */
  (reprfunc) swig_varlink_repr,       /* tp_repr      */    
  0,                                  /* tp_as_number */
  0,                                  /* tp_as_mapping*/
  0,                                  /* tp_hash      */
};

/* Create a variable linking object for use later */
SWIGRUNTIME(PyObject *)
SWIG_Python_newvarlink(void) {
  swig_varlinkobject *result = 0;
  result = PyMem_NEW(swig_varlinkobject,1);
  varlinktype.ob_type = &PyType_Type;    /* Patch varlinktype into a PyType */
  result->ob_type = &varlinktype;
  result->vars = 0;
  result->ob_refcnt = 0;
  Py_XINCREF((PyObject *) result);
  return ((PyObject*) result);
}

SWIGRUNTIME(void)
SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
  swig_varlinkobject *v;
  swig_globalvar *gv;
  v= (swig_varlinkobject *) p;
  gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  gv->name = (char *) malloc(strlen(name)+1);
  strcpy(gv->name,name);
  gv->get_attr = get_attr;
  gv->set_attr = set_attr;
  gv->next = v->vars;
  v->vars = gv;
}

/* Convert a pointer value */
SWIGRUNTIME(int)
SWIG_Python_ConvertPtr(PyObject *obj, void **ptr, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c = 0;
  static PyObject *SWIG_this = 0;
  int    newref = 0;
  PyObject  *pyobj = 0;

  if (!obj) return 0;
  if (obj == Py_None) {
    *ptr = 0;
    return 0;
  }
#ifdef SWIG_COBJECT_TYPES
  if (!(PyCObject_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyCObject_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  }  
  *ptr = PyCObject_AsVoidPtr(obj);
  c = (char *) PyCObject_GetDesc(obj);
  if (newref) Py_DECREF(obj);
  goto cobject;
#else
  if (!(PyString_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyString_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  } 
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') {
    *ptr = (void *) 0;
    if (strcmp(c,"NULL") == 0) {
      if (newref) { Py_DECREF(obj); }
      return 0;
    } else {
      if (newref) { Py_DECREF(obj); }
      goto type_error;
    }
  }
  c++;
  c = SWIG_UnpackData(c,ptr,sizeof(void *));
  if (newref) { Py_DECREF(obj); }
#endif

#ifdef SWIG_COBJECT_TYPES
cobject:
#endif

  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
    *ptr = SWIG_TypeCast(tc,(void*) *ptr);
  }

  if ((pyobj) && (flags & SWIG_POINTER_DISOWN)) {
    PyObject *zero = PyInt_FromLong(0);
    PyObject_SetAttrString(pyobj,(char*)"thisown",zero);
    Py_DECREF(zero);
  }
  return 0;

type_error:
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty && c) {
      char *temp = (char *) malloc(64+strlen(ty->name)+strlen(c));
      sprintf(temp,"Type error. Got %s, expected %s", c, ty->name);
      PyErr_SetString(PyExc_TypeError, temp);
      free((char *) temp);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME(void *)
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags) {
  void *result;
  SWIG_Python_ConvertPtr(obj, &result, ty, flags | SWIG_POINTER_EXCEPTION);
  return result;
}

/* Convert a packed value value */
SWIGRUNTIME(int)
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, int sz, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c = 0;

  if ((!obj) || (!PyString_Check(obj))) goto type_error;
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return 0;

type_error:

  if (flags) {
    if (ty && c) {
      char *temp = (char *) malloc(64+strlen(ty->name)+strlen(c));
      sprintf(temp,"Type error. Got %s, expected %s", c, ty->name);
      PyErr_SetString(PyExc_TypeError, temp);
      free((char *) temp);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Create a new pointer object */
SWIGRUNTIME(PyObject *)
SWIG_Python_NewPointerObj(void *ptr, swig_type_info *type, int own) {
  PyObject *robj;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#ifdef SWIG_COBJECT_TYPES
  robj = PyCObject_FromVoidPtrAndDesc((void *) ptr, (char *) type->name, NULL);
#else
  {
    char result[1024];
    char *r = result;
    *(r++) = '_';
    r = SWIG_PackData(r,&ptr,sizeof(void *));
    strcpy(r,type->name);
    robj = PyString_FromString(result);
  }
#endif
  if (!robj || (robj == Py_None)) return robj;
  if (type->clientdata) {
    PyObject *inst;
    PyObject *args = Py_BuildValue((char*)"(O)", robj);
    Py_DECREF(robj);
    inst = PyObject_CallObject((PyObject *) type->clientdata, args);
    Py_DECREF(args);
    if (inst) {
      if (own) {
        PyObject *n = PyInt_FromLong(1);
        PyObject_SetAttrString(inst,(char*)"thisown",n);
        Py_DECREF(n);
      }
      robj = inst;
    }
  }
  return robj;
}

SWIGRUNTIME(PyObject *)
SWIG_Python_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,type->name);
  return PyString_FromString(result);
}

/* Install Constants */
SWIGRUNTIME(void)
SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
  int i;
  PyObject *obj;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_PY_INT:
      obj = PyInt_FromLong(constants[i].lvalue);
      break;
    case SWIG_PY_FLOAT:
      obj = PyFloat_FromDouble(constants[i].dvalue);
      break;
    case SWIG_PY_STRING:
      obj = PyString_FromString((char *) constants[i].pvalue);
      break;
    case SWIG_PY_POINTER:
      obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
      break;
    case SWIG_PY_BINARY:
      obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
      break;
    default:
      obj = 0;
      break;
    }
    if (obj) {
      PyDict_SetItemString(d,constants[i].name,obj);
      Py_DECREF(obj);
    }
  }
}

#endif

/* Contract support */

#define SWIG_contract_assert(expr, msg) if (!(expr)) { PyErr_SetString(PyExc_RuntimeError, (char *) msg ); goto fail; } else

#ifdef __cplusplus
}
#endif


/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_hk_dslineedit swig_types[0] 
#define  SWIGTYPE_p_hk_column__enum_columntype swig_types[1] 
#define  SWIGTYPE_p_hk_url swig_types[2] 
#define  SWIGTYPE_p_hk_presentation swig_types[3] 
#define  SWIGTYPE_p_hk_database swig_types[4] 
#define  SWIGTYPE_p_reportsectionautomaticcreatedatatype swig_types[5] 
#define  SWIGTYPE_p_psimagedatatype swig_types[6] 
#define  SWIGTYPE_p_std__vectorThk_reportsectionpair_p_t swig_types[7] 
#define  SWIGTYPE_p_hk_dsgridcolumn swig_types[8] 
#define  SWIGTYPE_p_hk_subform swig_types[9] 
#define  SWIGTYPE_p_referentialclass swig_types[10] 
#define  SWIGTYPE_p_listThk_visible_p_t swig_types[11] 
#define  SWIGTYPE_p_file_dialogtype swig_types[12] 
#define  SWIGTYPE_p_stringvalue_dialogtype swig_types[13] 
#define  SWIGTYPE_p_progress_dialogtype swig_types[14] 
#define  SWIGTYPE_p_bool swig_types[15] 
#define  SWIGTYPE_p_listTreferentialt swig_types[16] 
#define  SWIGTYPE_p_hk_interpreter swig_types[17] 
#define  SWIGTYPE_p_std__vectorThk_reportdata_p_t swig_types[18] 
#define  SWIGTYPE_p_hk_tabvisible swig_types[19] 
#define  SWIGTYPE_p_hk_dsmodevisible swig_types[20] 
#define  SWIGTYPE_p_hk_dsdatavisible swig_types[21] 
#define  SWIGTYPE_p_hk_dsvisible swig_types[22] 
#define  SWIGTYPE_p_hk_visible swig_types[23] 
#define  SWIGTYPE_p_hk_key swig_types[24] 
#define  SWIGTYPE_p_section_replacefunctiontype swig_types[25] 
#define  SWIGTYPE_p_recodefunctiontype swig_types[26] 
#define  SWIGTYPE_p_data_configurefunctiontype swig_types[27] 
#define  SWIGTYPE_p_data_replacefunctiontype swig_types[28] 
#define  SWIGTYPE_p_hk_interpreter__enum_action swig_types[29] 
#define  SWIGTYPE_p_hk_reportxml swig_types[30] 
#define  SWIGTYPE_p_struct_countnumbers swig_types[31] 
#define  SWIGTYPE_p_hk_label swig_types[32] 
#define  SWIGTYPE_p_reportdatacounttype swig_types[33] 
#define  SWIGTYPE_p_reportsectioncounttype swig_types[34] 
#define  SWIGTYPE_p_listThk_datasource_p_t swig_types[35] 
#define  SWIGTYPE_p_xmlNodePtr swig_types[36] 
#define  SWIGTYPE_p_std__vectorThk_dsgridcolumn_t swig_types[37] 
#define  SWIGTYPE_p_hk_reportsectionpair swig_types[38] 
#define  SWIGTYPE_p_hk_dscombobox swig_types[39] 
#define  SWIGTYPE_p_hk_font swig_types[40] 
#define  SWIGTYPE_p_hk_column swig_types[41] 
#define  SWIGTYPE_p_ifstream swig_types[42] 
#define  SWIGTYPE_p_hk_report swig_types[43] 
#define  SWIGTYPE_p_hk_dsquery swig_types[44] 
#define  SWIGTYPE_p_longnumber swig_types[45] 
#define  SWIGTYPE_p_number swig_types[46] 
#define  SWIGTYPE_p_long swig_types[47] 
#define  SWIGTYPE_p_hk_dstable swig_types[48] 
#define  SWIGTYPE_p_dependingclass swig_types[49] 
#define  SWIGTYPE_p_hk_connection swig_types[50] 
#define  SWIGTYPE_p_hk_reporthtml swig_types[51] 
#define  SWIGTYPE_p_hk_qbe swig_types[52] 
#define  SWIGTYPE_p_hk_dsboolean swig_types[53] 
#define  SWIGTYPE_p_hk_data swig_types[54] 
#define  SWIGTYPE_p_listThk_string_t swig_types[55] 
#define  SWIGTYPE_p_hk_button swig_types[56] 
#define  SWIGTYPE_p_hk_actionquery swig_types[57] 
#define  SWIGTYPE_p_std__vectorThk_string_t swig_types[58] 
#define  SWIGTYPE_p_char swig_types[59] 
#define  SWIGTYPE_p_struct_raw_data swig_types[60] 
#define  SWIGTYPE_p_HK_CHARSIZE swig_types[61] 
#define  SWIGTYPE_p_hk_importcsv swig_types[62] 
#define  SWIGTYPE_p_hk_reportcsv swig_types[63] 
#define  SWIGTYPE_p_report_configurefunction swig_types[64] 
#define  SWIGTYPE_p_reporttypefunction swig_types[65] 
#define  SWIGTYPE_p_colstruct swig_types[66] 
#define  SWIGTYPE_p_hk_drivermanager swig_types[67] 
#define  SWIGTYPE_p_listTint_t swig_types[68] 
#define  SWIGTYPE_p_hk_dsdate swig_types[69] 
#define  SWIGTYPE_p_hk_dsimage swig_types[70] 
#define  SWIGTYPE_p_hk_class swig_types[71] 
#define  SWIGTYPE_p_ostream swig_types[72] 
#define  SWIGTYPE_p_hk_datasource swig_types[73] 
#define  SWIGTYPE_p_hk_string swig_types[74] 
#define  SWIGTYPE_p_hk_reportdata swig_types[75] 
#define  SWIGTYPE_p_listTdependingt swig_types[76] 
#define  SWIGTYPE_p_hk_datetime swig_types[77] 
#define  SWIGTYPE_p_hk_reportsection swig_types[78] 
#define  SWIGTYPE_p_hk_dsrowselector swig_types[79] 
#define  SWIGTYPE_p_hk_dsmemo swig_types[80] 
#define  SWIGTYPE_p_hk_encodingtab swig_types[81] 
#define  SWIGTYPE_p_hk_colour swig_types[82] 
#define  SWIGTYPE_p_hk_form swig_types[83] 
#define  SWIGTYPE_p_hk_dsgrid swig_types[84] 
#define  SWIGTYPE_p_hk_mimetype swig_types[85] 
static swig_type_info *swig_types[87];

/* -------- TYPES TABLE (END) -------- */


/*-----------------------------------------------
              @(target):= _hk_classes.so
  ------------------------------------------------*/
#define SWIG_init    init_hk_classes

#define SWIG_name    "_hk_classes"






#include <hk_definitions.h>


#include <hk_string.h>
#include <vector>


#include <string>

PyObject* SwigInt_FromBool(bool b) {
    return PyInt_FromLong(b ? 1L : 0L);
}
double SwigNumber_Check(PyObject* o) {
    return PyFloat_Check(o) || PyInt_Check(o) || PyLong_Check(o);
}
double SwigNumber_AsDouble(PyObject* o) {
    return PyFloat_Check(o) ? PyFloat_AsDouble(o) 
        : (PyInt_Check(o) ?   double(PyInt_AsLong(o))
                            : double(PyLong_AsLong(o)));
}
PyObject* SwigString_FromString(const std::string& s) {
    return PyString_FromStringAndSize(s.data(),s.size());
}
std::string SwigString_AsString(PyObject* o) {
    return std::string(PyString_AsString(o));
}


#define  SWIG_MemoryError    1
#define  SWIG_IOError        2
#define  SWIG_RuntimeError   3
#define  SWIG_IndexError     4
#define  SWIG_TypeError      5
#define  SWIG_DivisionByZero 6
#define  SWIG_OverflowError  7
#define  SWIG_SyntaxError    8
#define  SWIG_ValueError     9
#define  SWIG_SystemError   10
#define  SWIG_UnknownError  99


static void SWIG_exception_(int code, const char *msg) {
  switch(code) {
  case SWIG_MemoryError:
    PyErr_SetString(PyExc_MemoryError,msg);
    break;
  case SWIG_IOError:
    PyErr_SetString(PyExc_IOError,msg);
    break;
  case SWIG_RuntimeError:
    PyErr_SetString(PyExc_RuntimeError,msg);
    break;
  case SWIG_IndexError:
    PyErr_SetString(PyExc_IndexError,msg);
    break;
  case SWIG_TypeError:
    PyErr_SetString(PyExc_TypeError,msg);
    break;
  case SWIG_DivisionByZero:
    PyErr_SetString(PyExc_ZeroDivisionError,msg);
    break;
  case SWIG_OverflowError:
    PyErr_SetString(PyExc_OverflowError,msg);
    break;
  case SWIG_SyntaxError:
    PyErr_SetString(PyExc_SyntaxError,msg);
    break;
  case SWIG_ValueError:
    PyErr_SetString(PyExc_ValueError,msg);
    break;
  case SWIG_SystemError:
    PyErr_SetString(PyExc_SystemError,msg);
    break;
  default:
    PyErr_SetString(PyExc_RuntimeError,msg);
    break;
  }
}

#define SWIG_exception(a,b) { SWIG_exception_(a,b); SWIG_fail; }


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <hk_class.h>


#include <hk_drivermanager.h>
#include <hk_class.h>


#include <hk_connection.h>


#include "../config.h"
#include "hk_database.h"


#include <hk_data.h>


#include <hk_datasource.h>
#include <Python.h>

PyObject *hk_datasource_columnlist(hk_datasource *self){
      PyObject* l=NULL;
      if (!self) return l;
      list<hk_column*>* cols= self->columns();
      if (!cols) return l;
      l=PyList_New(cols->size());
      list<hk_column*>::iterator it=cols->begin();
      int i=0;
      while(it!=cols->end())
      {
        PyObject* o= PyString_FromString((*it)->name().c_str());
        PyList_SetItem(l,i,o);
	++it;++i;
      }
  return l;
    }
PyObject *hk_datasource_indexlist(hk_datasource *self){
      PyObject* l=NULL;
      if (!self) return l;
      list<hk_datasource::indexclass>* idx= self->indices();
      if (!idx) return l;
      l=PyList_New(idx->size());
      list<hk_datasource::indexclass>::iterator it=idx->begin();
      int i=0;
      while(it!=idx->end())
      {
        PyObject* o= PyString_FromString((*it).name.c_str());
        PyList_SetItem(l,i,o);
	++it;++i;
      }
  return l;
    }
PyObject *hk_datasource_show_currentrow(hk_datasource *self){
      PyObject* l=NULL;
      if (!self) return l;
      list<hk_column*>* cols= self->columns();
      if (!cols) return l;
      l=PyList_New(cols->size());
      list<hk_column*>::iterator it=cols->begin();
      int i=0;
      while(it!=cols->end())
      {
        PyObject* o= PyString_FromString((*it)->asstring().c_str());
        PyList_SetItem(l,i,o);
	++it;++i;
      }
  return l;
    }
PyObject *hk_datasource_indices(hk_datasource *self){
    if (!self) return NULL;
   list<hk_datasource::indexclass>* idxclass=self->indices();
int s=idxclass->size();
PyObject* result=PyList_New(s);
list<hk_datasource::indexclass>::iterator it=idxclass->begin();
int i=0;
while (it!=idxclass->end())
{
    hk_datasource::indexclass idx= (*it);
     PyObject* ilist=PyList_New(3);
     PyList_SetItem(ilist,0,PyString_FromString((*it).name.c_str()));
     PyList_SetItem(ilist,1,PyInt_FromLong((*it).unique));

     PyObject* fieldlist=PyList_New((*it).fields.size());
     int f=0;
     list<hk_string>::iterator sit=(*it).fields.begin();
     while (sit!=(*it).fields.end())
     {
       PyList_SetItem(fieldlist,f,PyString_FromString((*sit).c_str()));
       ++sit;++f;
     }
     PyList_SetItem(ilist,2,fieldlist);


//     PyObject* o= PyString_FromString((*it).c_str());
     PyList_SetItem(result,i,ilist);
++it;
++i;

    }
    return result;
    }

#include "hk_column.h"


#include <hk_visible.h>
#include <hk_interpreter.h>


#include "hk_dsvisible.h"
#include "hk_interpreter.h"


#include "hk_dsdatavisible.h"
#include "hk_dslineedit.h"
#include "hk_dsboolean.h"
#include "hk_dsmemo.h"
#include "hk_interpreter.h"


#include <hk_font.h>


#include <hk_colour.h>


#include <hk_key.h>


#include <hk_dsmodevisible.h>


#include <hk_dstable.h>


#include <hk_dsquery.h>


#include <hk_presentation.h>


#include <hk_button.h>
#include <hk_interpreter.h>


#include <hk_form.h>

PyObject *hk_form_get_pyvisible__SWIG_0(hk_form *self,long nr){
   hk_visible* v=self->get_visible(nr);
   if (!v) 
   {
    Py_INCREF(Py_None);
    return Py_None;
   }
   PyObject *resultobj=NULL;
   switch (v->type())
   {
     case hk_visible::textlabel:
     			resultobj=SWIG_NewPointerObj((void *) v, SWIGTYPE_p_hk_label, 0);
     			break;
     case hk_visible::button:
     			resultobj=SWIG_NewPointerObj((void *) v, SWIGTYPE_p_hk_button, 0);
     			break;
     case hk_visible::rowselector:
     			resultobj=SWIG_NewPointerObj((void *) v, SWIGTYPE_p_hk_dsrowselector, 0);
     			break;
     case hk_visible::boolean:
     			resultobj=SWIG_NewPointerObj((void *) v, SWIGTYPE_p_hk_dsboolean, 0);
     			break;
     case hk_visible::lineedit:
     			resultobj=SWIG_NewPointerObj((void *) v, SWIGTYPE_p_hk_dslineedit, 0);
     			break;
     case hk_visible::memo:
     			resultobj=SWIG_NewPointerObj((void *) v, SWIGTYPE_p_hk_dsmemo, 0);
     			break;
     case hk_visible::combobox:
     			resultobj=SWIG_NewPointerObj((void *) v, SWIGTYPE_p_hk_dscombobox, 0);
     			break;
     case hk_visible::grid:
     			resultobj=SWIG_NewPointerObj((void *) v, SWIGTYPE_p_hk_dsgrid, 0);
     			break;
     case hk_visible::form:
     			resultobj=SWIG_NewPointerObj((void *) v, SWIGTYPE_p_hk_form, 0);
     			break;
     case hk_visible::report:
     			resultobj=SWIG_NewPointerObj((void *) v, SWIGTYPE_p_hk_report, 0);
     			break;
     case hk_visible::reportsection:
     			resultobj=SWIG_NewPointerObj((void *) v, SWIGTYPE_p_hk_reportsection, 0);
     			break;
     case hk_visible::reportdata:
     			resultobj=SWIG_NewPointerObj((void *) v, SWIGTYPE_p_hk_reportdata, 0);
     			break;
     case hk_visible::query:
     			resultobj=SWIG_NewPointerObj((void *) v, SWIGTYPE_p_hk_dsquery, 0);
     			break;
     case hk_visible::subform:
     			resultobj=SWIG_NewPointerObj((void *) v, SWIGTYPE_p_hk_subform, 0);
     			break;
     case hk_visible::image:
     			resultobj=SWIG_NewPointerObj((void *) v, SWIGTYPE_p_hk_dsimage, 0);
     			break;
     case hk_visible::date:
     			resultobj=SWIG_NewPointerObj((void *) v, SWIGTYPE_p_hk_dsdate, 0);
     			break;
   default:
   		resultobj=SWIG_NewPointerObj((void *) v, SWIGTYPE_p_hk_visible, 0);
   }


   return resultobj;

}
PyObject *hk_form_get_pyvisible__SWIG_1(hk_form *self,hk_string const &identifier){
   hk_visible* v=self->get_visible(identifier);
   if (!v) return NULL;
   PyObject *resultobj=NULL;
   switch (v->type())
   {
     case hk_visible::textlabel:
     			resultobj=SWIG_NewPointerObj((void *) v, SWIGTYPE_p_hk_label, 0);
     			break;
     case hk_visible::button:
     			resultobj=SWIG_NewPointerObj((void *) v, SWIGTYPE_p_hk_button, 0);
     			break;
     case hk_visible::rowselector:
     			resultobj=SWIG_NewPointerObj((void *) v, SWIGTYPE_p_hk_dsrowselector, 0);
     			break;
     case hk_visible::boolean:
     			resultobj=SWIG_NewPointerObj((void *) v, SWIGTYPE_p_hk_dsboolean, 0);
     			break;
     case hk_visible::lineedit:
     			resultobj=SWIG_NewPointerObj((void *) v, SWIGTYPE_p_hk_dslineedit, 0);
     			break;
     case hk_visible::memo:
     			resultobj=SWIG_NewPointerObj((void *) v, SWIGTYPE_p_hk_dsmemo, 0);
     			break;
     case hk_visible::combobox:
     			resultobj=SWIG_NewPointerObj((void *) v, SWIGTYPE_p_hk_dscombobox, 0);
     			break;
     case hk_visible::grid:
     			resultobj=SWIG_NewPointerObj((void *) v, SWIGTYPE_p_hk_dsgrid, 0);
     			break;
     case hk_visible::form:
     			resultobj=SWIG_NewPointerObj((void *) v, SWIGTYPE_p_hk_form, 0);
     			break;
     case hk_visible::report:
     			resultobj=SWIG_NewPointerObj((void *) v, SWIGTYPE_p_hk_report, 0);
     			break;
     case hk_visible::reportsection:
     			resultobj=SWIG_NewPointerObj((void *) v, SWIGTYPE_p_hk_reportsection, 0);
     			break;
     case hk_visible::reportdata:
     			resultobj=SWIG_NewPointerObj((void *) v, SWIGTYPE_p_hk_reportdata, 0);
     			break;
     case hk_visible::query:
     			resultobj=SWIG_NewPointerObj((void *) v, SWIGTYPE_p_hk_dsquery, 0);
     			break;
     case hk_visible::subform:
     			resultobj=SWIG_NewPointerObj((void *) v, SWIGTYPE_p_hk_subform, 0);
     			break;
     case hk_visible::image:
     			resultobj=SWIG_NewPointerObj((void *) v, SWIGTYPE_p_hk_dsimage, 0);
     			break;
     case hk_visible::date:
     			resultobj=SWIG_NewPointerObj((void *) v, SWIGTYPE_p_hk_dsdate, 0);
     			break;
   default:
   		resultobj=SWIG_NewPointerObj((void *) v, SWIGTYPE_p_hk_visible, 0);
   }

   return resultobj;


}

#include <hk_label.h>



#include "hk_report.h"
#include "hk_reportutils.h"


#include <hk_reportsection.h>


#include <hk_reportsectionpair.h>


#include <hk_reportdata.h>


#include <hk_actionquery.h>


#include "hk_dsgrid.h"


#include "hk_dsgridcolumn.h"


#include <hk_dscombobox.h>


#include "hk_dsimage.h"


#include <hk_subform.h>


#include <hk_url.h>


#include "hk_dsdate.h"


#include "hk_datetime.h"


#include <hk_importcsv.h>


#include <hk_reportutils.h>


#include <hk_mimetype.h>

#ifdef __cplusplus
extern "C" {
#endif
static PyObject *_wrap_is_numerictype(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:is_numerictype",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)is_numerictype(arg1);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_is_integertype(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:is_integertype",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)is_integertype(arg1);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_is_realtype(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:is_realtype",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)is_realtype(arg1);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_inch2cm(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    double result;
    
    if(!PyArg_ParseTuple(args,(char *)"d:inch2cm",&arg1)) goto fail;
    result = (double)inch2cm(arg1);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cm2inch(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    double result;
    
    if(!PyArg_ParseTuple(args,(char *)"d:cm2inch",&arg1)) goto fail;
    result = (double)cm2inch(arg1);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_dependingclass_dependingfield_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    dependingclass *arg1 = (dependingclass *) 0 ;
    hk_string *arg2 = (hk_string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:dependingclass_dependingfield_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_dependingclass,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_string,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->dependingfield = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_dependingclass_dependingfield_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    dependingclass *arg1 = (dependingclass *) 0 ;
    hk_string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:dependingclass_dependingfield_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_dependingclass,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_string *)& ((arg1)->dependingfield);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_dependingclass_masterfield_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    dependingclass *arg1 = (dependingclass *) 0 ;
    hk_string *arg2 = (hk_string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:dependingclass_masterfield_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_dependingclass,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_string,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->masterfield = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_dependingclass_masterfield_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    dependingclass *arg1 = (dependingclass *) 0 ;
    hk_string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:dependingclass_masterfield_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_dependingclass,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_string *)& ((arg1)->masterfield);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_dependingclass(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    dependingclass *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_dependingclass")) goto fail;
    result = (dependingclass *)new dependingclass();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_dependingclass, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_dependingclass(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    dependingclass *arg1 = (dependingclass *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_dependingclass",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_dependingclass,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * dependingclass_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dependingclass, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_struct_raw_data(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct_raw_data *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_struct_raw_data")) goto fail;
    result = (struct_raw_data *)new struct_raw_data();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_struct_raw_data, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_struct_raw_data_length_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct_raw_data *arg1 = (struct_raw_data *) 0 ;
    unsigned long arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:struct_raw_data_length_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_struct_raw_data,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned long) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    if (arg1) (arg1)->length = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_struct_raw_data_length_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct_raw_data *arg1 = (struct_raw_data *) 0 ;
    unsigned long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:struct_raw_data_length_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_struct_raw_data,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (unsigned long) ((arg1)->length);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_struct_raw_data_data_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct_raw_data *arg1 = (struct_raw_data *) 0 ;
    char *arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:struct_raw_data_data_set",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_struct_raw_data,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (arg1->data) delete [] arg1->data;
        if (arg2) {
            arg1->data = (char *) (new char[strlen(arg2)+1]);
            strcpy((char *) arg1->data,arg2);
        } else {
            arg1->data = 0;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_struct_raw_data_data_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct_raw_data *arg1 = (struct_raw_data *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:struct_raw_data_data_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_struct_raw_data,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (char *) ((arg1)->data);
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_struct_raw_data(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct_raw_data *arg1 = (struct_raw_data *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_struct_raw_data",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_struct_raw_data,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * struct_raw_data_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_struct_raw_data, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_referentialclass(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    referentialclass *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_referentialclass")) goto fail;
    result = (referentialclass *)new referentialclass();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_referentialclass, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_referentialclass_p_name_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    referentialclass *arg1 = (referentialclass *) 0 ;
    hk_string *arg2 = (hk_string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:referentialclass_p_name_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_referentialclass,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_string,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->p_name = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_referentialclass_p_name_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    referentialclass *arg1 = (referentialclass *) 0 ;
    hk_string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:referentialclass_p_name_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_referentialclass,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_string *)& ((arg1)->p_name);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_referentialclass_p_masterdatasource_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    referentialclass *arg1 = (referentialclass *) 0 ;
    hk_string *arg2 = (hk_string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:referentialclass_p_masterdatasource_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_referentialclass,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_string,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->p_masterdatasource = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_referentialclass_p_masterdatasource_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    referentialclass *arg1 = (referentialclass *) 0 ;
    hk_string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:referentialclass_p_masterdatasource_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_referentialclass,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_string *)& ((arg1)->p_masterdatasource);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_referentialclass_p_fields_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    referentialclass *arg1 = (referentialclass *) 0 ;
    list<dependingclass > *arg2 = (list<dependingclass > *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:referentialclass_p_fields_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_referentialclass,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_listTdependingt,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->p_fields = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_referentialclass_p_fields_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    referentialclass *arg1 = (referentialclass *) 0 ;
    list<dependingclass > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:referentialclass_p_fields_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_referentialclass,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (list<dependingclass > *)& ((arg1)->p_fields);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_listTdependingt, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_referentialclass_p_deletecascade_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    referentialclass *arg1 = (referentialclass *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:referentialclass_p_deletecascade_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_referentialclass,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    if (arg1) (arg1)->p_deletecascade = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_referentialclass_p_deletecascade_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    referentialclass *arg1 = (referentialclass *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:referentialclass_p_deletecascade_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_referentialclass,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool) ((arg1)->p_deletecascade);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_referentialclass_p_updatecascade_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    referentialclass *arg1 = (referentialclass *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:referentialclass_p_updatecascade_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_referentialclass,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    if (arg1) (arg1)->p_updatecascade = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_referentialclass_p_updatecascade_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    referentialclass *arg1 = (referentialclass *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:referentialclass_p_updatecascade_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_referentialclass,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool) ((arg1)->p_updatecascade);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_referentialclass(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    referentialclass *arg1 = (referentialclass *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_referentialclass",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_referentialclass,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * referentialclass_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_referentialclass, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_load_file(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    struct_raw_data *arg2 = (struct_raw_data *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:load_file",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_string,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_struct_raw_data,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)load_file((hk_string const &)*arg1,arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_save_file(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    struct_raw_data *arg2 = (struct_raw_data *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:save_file",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_string,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_struct_raw_data,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)save_file((hk_string const &)*arg1,(struct_raw_data const *)arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_save_textfile(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    hk_string *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:save_textfile",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_string,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_string,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (bool)save_textfile((hk_string const &)*arg1,(hk_string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_file_exists(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:file_exists",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_string,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (bool)file_exists((hk_string const &)*arg1);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_data2hex(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct_raw_data *arg1 = (struct_raw_data *) 0 ;
    hk_string *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:data2hex",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_struct_raw_data,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_string,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (bool)data2hex(arg1,*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hex2data(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    unsigned long arg2 ;
    struct_raw_data *arg3 = (struct_raw_data *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:hex2data",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_string,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    arg2 = (unsigned long) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_struct_raw_data,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)hex2data((hk_string const &)*arg1,arg2,arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_smallstringconversion(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    hk_string *arg2 = 0 ;
    hk_string *arg3 = 0 ;
    hk_string result;
    hk_string temp1 ;
    hk_string temp2 ;
    hk_string temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:smallstringconversion",&obj0,&obj1,&obj2)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = hk_string(PyString_AsString(obj0));
            arg1 = &temp1;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    {
        if (PyString_Check(obj2)) {
            temp3 = hk_string(PyString_AsString(obj2));
            arg3 = &temp3;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = smallstringconversion((hk_string const &)*arg1,(hk_string const &)*arg2,(hk_string const &)*arg3);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_l2u(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    hk_string const &arg2_defvalue = "" ;
    hk_string *arg2 = (hk_string *) &arg2_defvalue ;
    hk_string result;
    hk_string temp1 ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:l2u",&obj0,&obj1)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = hk_string(PyString_AsString(obj0));
            arg1 = &temp1;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj1) {
        {
            if (PyString_Check(obj1)) {
                temp2 = hk_string(PyString_AsString(obj1));
                arg2 = &temp2;
            } else {
                SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
            }
        }
    }
    result = l2u((hk_string const &)*arg1,(hk_string const &)*arg2);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_u2l(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    hk_string const &arg2_defvalue = "" ;
    hk_string *arg2 = (hk_string *) &arg2_defvalue ;
    hk_string result;
    hk_string temp1 ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:u2l",&obj0,&obj1)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = hk_string(PyString_AsString(obj0));
            arg1 = &temp1;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj1) {
        {
            if (PyString_Check(obj1)) {
                temp2 = hk_string(PyString_AsString(obj1));
                arg2 = &temp2;
            } else {
                SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
            }
        }
    }
    result = u2l((hk_string const &)*arg1,(hk_string const &)*arg2);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_string2upper(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    hk_string result;
    hk_string temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:string2upper",&obj0)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = hk_string(PyString_AsString(obj0));
            arg1 = &temp1;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = string2upper((hk_string const &)*arg1);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_string2lower(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    hk_string result;
    hk_string temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:string2lower",&obj0)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = hk_string(PyString_AsString(obj0));
            arg1 = &temp1;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = string2lower((hk_string const &)*arg1);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_format_number__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    bool arg2 = (bool) true ;
    int arg3 = (int) 2 ;
    hk_string const &arg4_defvalue = "" ;
    hk_string *arg4 = (hk_string *) &arg4_defvalue ;
    hk_string result;
    hk_string temp4 ;
    PyObject * obj1 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"d|OiO:format_number",&arg1,&obj1,&arg3,&obj3)) goto fail;
    if (obj1) {
        arg2 = PyInt_AsLong(obj1) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj3) {
        {
            if (PyString_Check(obj3)) {
                temp4 = hk_string(PyString_AsString(obj3));
                arg4 = &temp4;
            } else {
                SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
            }
        }
    }
    result = format_number(arg1,arg2,arg3,(hk_string const &)*arg4);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_format_number__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    bool arg2 ;
    bool arg3 ;
    int arg4 ;
    hk_string *arg5 = 0 ;
    hk_string result;
    hk_string temp1 ;
    hk_string temp5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOiO:format_number",&obj0,&obj1,&obj2,&arg4,&obj4)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = hk_string(PyString_AsString(obj0));
            arg1 = &temp1;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = PyInt_AsLong(obj2) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    {
        if (PyString_Check(obj4)) {
            temp5 = hk_string(PyString_AsString(obj4));
            arg5 = &temp5;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = format_number((hk_string const &)*arg1,arg2,arg3,arg4,(hk_string const &)*arg5);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_format_number(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[6];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 5); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if ((argc >= 1) && (argc <= 4)) {
        int _v;
        {
            _v = (PyFloat_Check(argv[0]) || PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            if (argc <= 1) {
                return _wrap_format_number__SWIG_0(self,args);
            }
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                if (argc <= 2) {
                    return _wrap_format_number__SWIG_0(self,args);
                }
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    if (argc <= 3) {
                        return _wrap_format_number__SWIG_0(self,args);
                    }
                    {
                        _v = PyString_Check(argv[3]) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_format_number__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            _v = PyString_Check(argv[0]) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            _v = PyString_Check(argv[4]) ? 1 : 0;
                        }
                        if (_v) {
                            return _wrap_format_number__SWIG_1(self,args);
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'format_number'");
    return NULL;
}


static PyObject *_wrap_format_standard_number__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    bool arg2 = (bool) false ;
    int arg3 = (int) 8 ;
    hk_string const &arg4_defvalue = "C" ;
    hk_string *arg4 = (hk_string *) &arg4_defvalue ;
    hk_string result;
    hk_string temp4 ;
    PyObject * obj1 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"d|OiO:format_standard_number",&arg1,&obj1,&arg3,&obj3)) goto fail;
    if (obj1) {
        arg2 = PyInt_AsLong(obj1) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj3) {
        {
            if (PyString_Check(obj3)) {
                temp4 = hk_string(PyString_AsString(obj3));
                arg4 = &temp4;
            } else {
                SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
            }
        }
    }
    result = format_standard_number(arg1,arg2,arg3,(hk_string const &)*arg4);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_format_standard_number__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    bool arg2 = (bool) false ;
    int arg3 = (int) 8 ;
    hk_string const &arg4_defvalue = "C" ;
    hk_string *arg4 = (hk_string *) &arg4_defvalue ;
    hk_string result;
    hk_string temp1 ;
    hk_string temp4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|OiO:format_standard_number",&obj0,&obj1,&arg3,&obj3)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = hk_string(PyString_AsString(obj0));
            arg1 = &temp1;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj1) {
        arg2 = PyInt_AsLong(obj1) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj3) {
        {
            if (PyString_Check(obj3)) {
                temp4 = hk_string(PyString_AsString(obj3));
                arg4 = &temp4;
            } else {
                SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
            }
        }
    }
    result = format_standard_number((hk_string const &)*arg1,arg2,arg3,(hk_string const &)*arg4);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_format_standard_number(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if ((argc >= 1) && (argc <= 4)) {
        int _v;
        {
            _v = (PyFloat_Check(argv[0]) || PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            if (argc <= 1) {
                return _wrap_format_standard_number__SWIG_0(self,args);
            }
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                if (argc <= 2) {
                    return _wrap_format_standard_number__SWIG_0(self,args);
                }
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    if (argc <= 3) {
                        return _wrap_format_standard_number__SWIG_0(self,args);
                    }
                    {
                        _v = PyString_Check(argv[3]) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_format_standard_number__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    if ((argc >= 1) && (argc <= 4)) {
        int _v;
        {
            _v = PyString_Check(argv[0]) ? 1 : 0;
        }
        if (_v) {
            if (argc <= 1) {
                return _wrap_format_standard_number__SWIG_1(self,args);
            }
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                if (argc <= 2) {
                    return _wrap_format_standard_number__SWIG_1(self,args);
                }
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    if (argc <= 3) {
                        return _wrap_format_standard_number__SWIG_1(self,args);
                    }
                    {
                        _v = PyString_Check(argv[3]) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_format_standard_number__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'format_standard_number'");
    return NULL;
}


static PyObject *_wrap_localestring2double(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    double result;
    hk_string temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:localestring2double",&obj0)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = hk_string(PyString_AsString(obj0));
            arg1 = &temp1;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = (double)localestring2double((hk_string const &)*arg1);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_localestring2int(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    long result;
    hk_string temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:localestring2int",&obj0)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = hk_string(PyString_AsString(obj0));
            arg1 = &temp1;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = (long)localestring2int((hk_string const &)*arg1);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_localestring2uint(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    unsigned long result;
    hk_string temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:localestring2uint",&obj0)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = hk_string(PyString_AsString(obj0));
            arg1 = &temp1;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = (unsigned long)localestring2uint((hk_string const &)*arg1);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_standardstring2double(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    hk_string const &arg2_defvalue = "C" ;
    hk_string *arg2 = (hk_string *) &arg2_defvalue ;
    double result;
    hk_string temp1 ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:standardstring2double",&obj0,&obj1)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = hk_string(PyString_AsString(obj0));
            arg1 = &temp1;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj1) {
        {
            if (PyString_Check(obj1)) {
                temp2 = hk_string(PyString_AsString(obj1));
                arg2 = &temp2;
            } else {
                SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
            }
        }
    }
    result = (double)standardstring2double((hk_string const &)*arg1,(hk_string const &)*arg2);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_longint2string(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    long arg1 ;
    hk_string result;
    
    if(!PyArg_ParseTuple(args,(char *)"l:longint2string",&arg1)) goto fail;
    result = longint2string(arg1);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ulongint2string(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    unsigned long arg1 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ulongint2string",&obj0)) goto fail;
    arg1 = (unsigned long) PyInt_AsLong(obj0);
    if (PyErr_Occurred()) SWIG_fail;
    result = ulongint2string(arg1);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_replace_all(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    hk_string *arg2 = 0 ;
    hk_string *arg3 = 0 ;
    hk_string result;
    hk_string temp1 ;
    hk_string temp2 ;
    hk_string temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:replace_all",&obj0,&obj1,&obj2)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = hk_string(PyString_AsString(obj0));
            arg1 = &temp1;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    {
        if (PyString_Check(obj2)) {
            temp3 = hk_string(PyString_AsString(obj2));
            arg3 = &temp3;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = replace_all((hk_string const &)*arg1,(hk_string const &)*arg2,(hk_string const &)*arg3);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_trimleft(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    hk_string result;
    hk_string temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:trimleft",&obj0)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = hk_string(PyString_AsString(obj0));
            arg1 = &temp1;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = trimleft((hk_string const &)*arg1);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_trimright(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    hk_string result;
    hk_string temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:trimright",&obj0)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = hk_string(PyString_AsString(obj0));
            arg1 = &temp1;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = trimright((hk_string const &)*arg1);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_trim(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    hk_string result;
    hk_string temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:trim",&obj0)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = hk_string(PyString_AsString(obj0));
            arg1 = &temp1;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = trim((hk_string const &)*arg1);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_bin2hex(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char arg1 ;
    hk_string result;
    
    if(!PyArg_ParseTuple(args,(char *)"c:bin2hex",&arg1)) goto fail;
    result = bin2hex(arg1);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hex2bin(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    char result;
    hk_string temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hex2bin",&obj0)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = hk_string(PyString_AsString(obj0));
            arg1 = &temp1;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = (char)hex2bin((hk_string const &)*arg1);
    
    resultobj = Py_BuildValue((char*)"c",result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_class_show_warningmessage(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    hk_string temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_class_show_warningmessage",&obj0)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = hk_string(PyString_AsString(obj0));
            arg1 = &temp1;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    hk_class::show_warningmessage((hk_string const &)*arg1);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_class_hk_translate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    hk_string result;
    hk_string temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_class_hk_translate",&obj0)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = hk_string(PyString_AsString(obj0));
            arg1 = &temp1;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = hk_class::hk_translate((hk_string const &)*arg1);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_class_show_yesnodialog(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    bool arg2 ;
    bool result;
    hk_string temp1 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_class_show_yesnodialog",&obj0,&obj1)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = hk_string(PyString_AsString(obj0));
            arg1 = &temp1;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    result = (bool)hk_class::show_yesnodialog((hk_string const &)*arg1,arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_class_show_stringvaluedialog(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    hk_string result;
    hk_string temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_class_show_stringvaluedialog",&obj0)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = hk_string(PyString_AsString(obj0));
            arg1 = &temp1;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = hk_class::show_stringvaluedialog((hk_string const &)*arg1);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_class_set_filedialog(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    file_dialogtype *arg1 = (file_dialogtype *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_class_set_filedialog",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_file_dialogtype,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    hk_class::set_filedialog(arg1);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_class_show_filedialog(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string const &arg1_defvalue = "" ;
    hk_string *arg1 = (hk_string *) &arg1_defvalue ;
    int arg2 = (int) file_open ;
    hk_string result;
    hk_string temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"|Oi:hk_class_show_filedialog",&obj0,&arg2)) goto fail;
    if (obj0) {
        {
            if (PyString_Check(obj0)) {
                temp1 = hk_string(PyString_AsString(obj0));
                arg1 = &temp1;
            } else {
                SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
            }
        }
    }
    result = hk_class::show_filedialog((hk_string const &)*arg1,(enum_operationmode )arg2);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_class_save_preferences(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    
    if(!PyArg_ParseTuple(args,(char *)":hk_class_save_preferences")) goto fail;
    hk_class::save_preferences();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_class_set_directorydialog(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    stringvalue_dialogtype *arg1 = (stringvalue_dialogtype *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_class_set_directorydialog",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_stringvalue_dialogtype,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    hk_class::set_directorydialog(arg1);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_class_show_directorydialog(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string const &arg1_defvalue = "" ;
    hk_string *arg1 = (hk_string *) &arg1_defvalue ;
    hk_string result;
    hk_string temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"|O:hk_class_show_directorydialog",&obj0)) goto fail;
    if (obj0) {
        {
            if (PyString_Check(obj0)) {
                temp1 = hk_string(PyString_AsString(obj0));
                arg1 = &temp1;
            } else {
                SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
            }
        }
    }
    result = hk_class::show_directorydialog((hk_string const &)*arg1);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_class_set_default_automatic_data_update(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    bool arg1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_class_set_default_automatic_data_update",&obj0)) goto fail;
    arg1 = PyInt_AsLong(obj0) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    hk_class::set_default_automatic_data_update(arg1);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_class_default_automatic_data_update(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    bool result;
    
    if(!PyArg_ParseTuple(args,(char *)":hk_class_default_automatic_data_update")) goto fail;
    result = (bool)hk_class::default_automatic_data_update();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * hk_class_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_hk_class, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_show_warningmessage(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    hk_string temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:show_warningmessage",&obj0)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = hk_string(PyString_AsString(obj0));
            arg1 = &temp1;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    show_warningmessage((hk_string const &)*arg1);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_show_yesnodialog(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    bool arg2 ;
    bool result;
    hk_string temp1 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:show_yesnodialog",&obj0,&obj1)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = hk_string(PyString_AsString(obj0));
            arg1 = &temp1;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    result = (bool)show_yesnodialog((hk_string const &)*arg1,arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_show_filedialog(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string const &arg1_defvalue = "" ;
    hk_string *arg1 = (hk_string *) &arg1_defvalue ;
    int arg2 = (int) file_open ;
    hk_string result;
    hk_string temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"|Oi:show_filedialog",&obj0,&arg2)) goto fail;
    if (obj0) {
        {
            if (PyString_Check(obj0)) {
                temp1 = hk_string(PyString_AsString(obj0));
                arg1 = &temp1;
            } else {
                SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
            }
        }
    }
    result = show_filedialog((hk_string const &)*arg1,(enum_operationmode )arg2);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_show_stringvaluedialog(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    hk_string result;
    hk_string temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:show_stringvaluedialog",&obj0)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = hk_string(PyString_AsString(obj0));
            arg1 = &temp1;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = show_stringvaluedialog((hk_string const &)*arg1);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_show_directorydialog(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    hk_string result;
    hk_string temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:show_directorydialog",&obj0)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = hk_string(PyString_AsString(obj0));
            arg1 = &temp1;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = show_directorydialog((hk_string const &)*arg1);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_hk_connection(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_connection *arg1 = (hk_connection *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_hk_connection",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_connection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_connection_set_host(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_connection *arg1 = (hk_connection *) 0 ;
    hk_string *arg2 = 0 ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_connection_set_host",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_connection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    (arg1)->set_host((hk_string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_connection_host(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_connection *arg1 = (hk_connection *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_connection_host",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_connection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->host();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_connection_set_user(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_connection *arg1 = (hk_connection *) 0 ;
    hk_string *arg2 = 0 ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_connection_set_user",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_connection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    (arg1)->set_user((hk_string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_connection_user(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_connection *arg1 = (hk_connection *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_connection_user",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_connection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->user();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_connection_set_password(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_connection *arg1 = (hk_connection *) 0 ;
    hk_string *arg2 = 0 ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_connection_set_password",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_connection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    (arg1)->set_password((hk_string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_connection_set_tcp_port(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_connection *arg1 = (hk_connection *) 0 ;
    unsigned int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_connection_set_tcp_port",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_connection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->set_tcp_port(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_connection_tcp_port(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_connection *arg1 = (hk_connection *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_connection_tcp_port",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_connection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (unsigned int)(arg1)->tcp_port();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_connection_default_tcp_port(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_connection *arg1 = (hk_connection *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_connection_default_tcp_port",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_connection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (unsigned int)((hk_connection const *)arg1)->default_tcp_port();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_connection_set_defaultdatabase(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_connection *arg1 = (hk_connection *) 0 ;
    hk_string *arg2 = 0 ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_connection_set_defaultdatabase",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_connection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    (arg1)->set_defaultdatabase((hk_string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_connection_defaultdatabase(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_connection *arg1 = (hk_connection *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_connection_defaultdatabase",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_connection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((hk_connection const *)arg1)->defaultdatabase();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_connection_connect(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_connection *arg1 = (hk_connection *) 0 ;
    int arg2 = (int) hk_class::interactive ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|i:hk_connection_connect",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_connection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->connect((hk_class::enum_interaction )arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_connection_disconnect(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_connection *arg1 = (hk_connection *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_connection_disconnect",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_connection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->disconnect();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_connection_is_connected(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_connection *arg1 = (hk_connection *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_connection_is_connected",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_connection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->is_connected();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_connection_dblist(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_connection *arg1 = (hk_connection *) 0 ;
    vector<hk_string > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_connection_dblist",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_connection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (vector<hk_string > *)(arg1)->dblist();
    
    {
        int s=result->size();
        resultobj=PyList_New(s);
        vector<hk_string>::iterator it=result->begin();
        int i=0;
        while (it!=result->end())
        {
            PyObject* o= PyString_FromString((*it).c_str());
            PyList_SetItem(resultobj,i,o);
            ++it;
            ++i;
        }
        
        
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_connection_new_database(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_connection *arg1 = (hk_connection *) 0 ;
    hk_string const &arg2_defvalue = "" ;
    hk_string *arg2 = (hk_string *) &arg2_defvalue ;
    hk_database *result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:hk_connection_new_database",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_connection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        {
            if (PyString_Check(obj1)) {
                temp2 = hk_string(PyString_AsString(obj1));
                arg2 = &temp2;
            } else {
                SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
            }
        }
    }
    result = (hk_database *)(arg1)->new_database((hk_string const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_database, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_connection_create_database(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_connection *arg1 = (hk_connection *) 0 ;
    hk_string *arg2 = 0 ;
    bool result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_connection_create_database",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_connection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = (bool)(arg1)->create_database((hk_string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_connection_delete_database(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_connection *arg1 = (hk_connection *) 0 ;
    hk_string *arg2 = 0 ;
    int arg3 = (int) hk_class::interactive ;
    bool result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|i:hk_connection_delete_database",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_connection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = (bool)(arg1)->delete_database((hk_string const &)*arg2,(hk_class::enum_interaction )arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_connection_database_exists(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_connection *arg1 = (hk_connection *) 0 ;
    hk_string *arg2 = 0 ;
    bool result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_connection_database_exists",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_connection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = (bool)(arg1)->database_exists((hk_string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_connection_drivermanager(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_connection *arg1 = (hk_connection *) 0 ;
    hk_drivermanager *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_connection_drivermanager",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_connection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_drivermanager *)(arg1)->drivermanager();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_drivermanager, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_connection_check_capabilities(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_connection *arg1 = (hk_connection *) 0 ;
    hk_connection *arg2 = (hk_connection *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_connection_check_capabilities",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_connection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_connection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = hk_connection::check_capabilities(arg1,arg2);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_connection_rename_database(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_connection *arg1 = (hk_connection *) 0 ;
    hk_string *arg2 = 0 ;
    hk_string *arg3 = 0 ;
    bool result;
    hk_string temp2 ;
    hk_string temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:hk_connection_rename_database",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_connection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    {
        if (PyString_Check(obj2)) {
            temp3 = hk_string(PyString_AsString(obj2));
            arg3 = &temp3;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = (bool)(arg1)->rename_database((hk_string const &)*arg2,(hk_string const &)*arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_connection_server_supports(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_connection *arg1 = (hk_connection *) 0 ;
    int arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:hk_connection_server_supports",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_connection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((hk_connection const *)arg1)->server_supports((hk_connection::support_enum )arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_connection_server_needs(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_connection *arg1 = (hk_connection *) 0 ;
    int arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:hk_connection_server_needs",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_connection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((hk_connection const *)arg1)->server_needs((hk_connection::need_enum )arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_connection_set_newpassword(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_connection *arg1 = (hk_connection *) 0 ;
    hk_string *arg2 = 0 ;
    bool result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_connection_set_newpassword",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_connection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = (bool)(arg1)->set_newpassword((hk_string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_connection_show_newpassworddialog(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_connection *arg1 = (hk_connection *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_connection_show_newpassworddialog",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_connection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->show_newpassworddialog();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_connection_show_passworddialog(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_connection *arg1 = (hk_connection *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_connection_show_passworddialog",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_connection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->show_passworddialog();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_connection_drivername(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_connection *arg1 = (hk_connection *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_connection_drivername",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_connection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((hk_connection const *)arg1)->drivername();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_connection_set_booleanemulation(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_connection *arg1 = (hk_connection *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_connection_set_booleanemulation",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_connection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->set_booleanemulation(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_connection_booleanemulation(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_connection *arg1 = (hk_connection *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_connection_booleanemulation",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_connection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((hk_connection const *)arg1)->booleanemulation();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_connection_copy_database(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_connection *arg1 = (hk_connection *) 0 ;
    hk_database *arg2 = (hk_database *) 0 ;
    bool arg3 ;
    bool arg4 ;
    progress_dialogtype *arg5 = (progress_dialogtype *) NULL ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO|O:hk_connection_copy_database",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_connection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg3 = PyInt_AsLong(obj2) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = PyInt_AsLong(obj3) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    if (obj4) {
        if ((SWIG_ConvertPtr(obj4,(void **) &arg5, SWIGTYPE_p_progress_dialogtype,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    }
    result = (bool)(arg1)->copy_database(arg2,arg3,arg4,arg5);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_connection_last_servermessage(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_connection *arg1 = (hk_connection *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_connection_last_servermessage",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_connection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->last_servermessage();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_connection_databasepath(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_connection *arg1 = (hk_connection *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_connection_databasepath",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_connection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->databasepath();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_connection_mimetype(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_connection *arg1 = (hk_connection *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_connection_mimetype",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_connection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->mimetype();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_connection_maxfieldnamesize(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_connection *arg1 = (hk_connection *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_connection_maxfieldnamesize",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_connection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (unsigned int)((hk_connection const *)arg1)->maxfieldnamesize();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * hk_connection_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_hk_connection, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_hk_drivermanager(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_drivermanager *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_hk_drivermanager")) goto fail;
    result = (hk_drivermanager *)new hk_drivermanager();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_drivermanager, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_hk_drivermanager(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_drivermanager *arg1 = (hk_drivermanager *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_hk_drivermanager",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_drivermanager,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_drivermanager_driverlist(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_drivermanager *arg1 = (hk_drivermanager *) 0 ;
    vector<hk_string > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_drivermanager_driverlist",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_drivermanager,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (vector<hk_string > *)(arg1)->driverlist();
    
    {
        int s=result->size();
        resultobj=PyList_New(s);
        vector<hk_string>::iterator it=result->begin();
        int i=0;
        while (it!=result->end())
        {
            PyObject* o= PyString_FromString((*it).c_str());
            PyList_SetItem(resultobj,i,o);
            ++it;
            ++i;
        }
        
        
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_drivermanager_new_connection(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_drivermanager *arg1 = (hk_drivermanager *) 0 ;
    hk_string const &arg2_defvalue = "" ;
    hk_string *arg2 = (hk_string *) &arg2_defvalue ;
    int arg3 = (int) hk_class::interactive ;
    hk_connection *result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|Oi:hk_drivermanager_new_connection",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_drivermanager,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        {
            if (PyString_Check(obj1)) {
                temp2 = hk_string(PyString_AsString(obj1));
                arg2 = &temp2;
            } else {
                SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
            }
        }
    }
    result = (hk_connection *)(arg1)->new_connection((hk_string const &)*arg2,(hk_class::enum_interaction )arg3);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_connection, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_drivermanager_find_existing_connection(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_drivermanager *arg1 = (hk_drivermanager *) 0 ;
    hk_string *arg2 = 0 ;
    hk_string *arg3 = 0 ;
    unsigned int arg4 ;
    hk_string *arg5 = 0 ;
    hk_connection *result;
    hk_string temp2 ;
    hk_string temp3 ;
    hk_string temp5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:hk_drivermanager_find_existing_connection",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_drivermanager,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    {
        if (PyString_Check(obj2)) {
            temp3 = hk_string(PyString_AsString(obj2));
            arg3 = &temp3;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    arg4 = (unsigned int) PyInt_AsLong(obj3);
    if (PyErr_Occurred()) SWIG_fail;
    {
        if (PyString_Check(obj4)) {
            temp5 = hk_string(PyString_AsString(obj4));
            arg5 = &temp5;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = (hk_connection *)(arg1)->find_existing_connection((hk_string const &)*arg2,(hk_string const &)*arg3,arg4,(hk_string const &)*arg5);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_connection, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_drivermanager_show_driverselectdialog(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string result;
    
    if(!PyArg_ParseTuple(args,(char *)":hk_drivermanager_show_driverselectdialog")) goto fail;
    result = hk_drivermanager::show_driverselectdialog();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_drivermanager_set_path(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    hk_string temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_drivermanager_set_path",&obj0)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = hk_string(PyString_AsString(obj0));
            arg1 = &temp1;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    hk_drivermanager::set_path((hk_string const &)*arg1);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_drivermanager_path(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string result;
    
    if(!PyArg_ParseTuple(args,(char *)":hk_drivermanager_path")) goto fail;
    result = hk_drivermanager::path();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * hk_drivermanager_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_hk_drivermanager, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_hk_database_tablelist(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    bool arg2 = (bool) false ;
    vector<hk_string > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:hk_database_tablelist",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = PyInt_AsLong(obj1) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (vector<hk_string > *)(arg1)->tablelist(arg2);
    
    {
        int s=result->size();
        resultobj=PyList_New(s);
        vector<hk_string>::iterator it=result->begin();
        int i=0;
        while (it!=result->end())
        {
            PyObject* o= PyString_FromString((*it).c_str());
            PyList_SetItem(resultobj,i,o);
            ++it;
            ++i;
        }
        
        
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_database_querylist(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    vector<hk_string > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_database_querylist",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (vector<hk_string > *)(arg1)->querylist();
    
    {
        int s=result->size();
        resultobj=PyList_New(s);
        vector<hk_string>::iterator it=result->begin();
        int i=0;
        while (it!=result->end())
        {
            PyObject* o= PyString_FromString((*it).c_str());
            PyList_SetItem(resultobj,i,o);
            ++it;
            ++i;
        }
        
        
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_database_formlist(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    vector<hk_string > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_database_formlist",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (vector<hk_string > *)(arg1)->formlist();
    
    {
        int s=result->size();
        resultobj=PyList_New(s);
        vector<hk_string>::iterator it=result->begin();
        int i=0;
        while (it!=result->end())
        {
            PyObject* o= PyString_FromString((*it).c_str());
            PyList_SetItem(resultobj,i,o);
            ++it;
            ++i;
        }
        
        
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_database_reportlist(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    vector<hk_string > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_database_reportlist",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (vector<hk_string > *)(arg1)->reportlist();
    
    {
        int s=result->size();
        resultobj=PyList_New(s);
        vector<hk_string>::iterator it=result->begin();
        int i=0;
        while (it!=result->end())
        {
            PyObject* o= PyString_FromString((*it).c_str());
            PyList_SetItem(resultobj,i,o);
            ++it;
            ++i;
        }
        
        
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_database_viewlist(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    vector<hk_string > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_database_viewlist",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (vector<hk_string > *)(arg1)->viewlist();
    
    {
        int s=result->size();
        resultobj=PyList_New(s);
        vector<hk_string>::iterator it=result->begin();
        int i=0;
        while (it!=result->end())
        {
            PyObject* o= PyString_FromString((*it).c_str());
            PyList_SetItem(resultobj,i,o);
            ++it;
            ++i;
        }
        
        
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_database_tableviewlist(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    bool arg2 = (bool) false ;
    vector<hk_string > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:hk_database_tableviewlist",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = PyInt_AsLong(obj1) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (vector<hk_string > *)(arg1)->tableviewlist(arg2);
    
    {
        int s=result->size();
        resultobj=PyList_New(s);
        vector<hk_string>::iterator it=result->begin();
        int i=0;
        while (it!=result->end())
        {
            PyObject* o= PyString_FromString((*it).c_str());
            PyList_SetItem(resultobj,i,o);
            ++it;
            ++i;
        }
        
        
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_database_new_table(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    hk_string const &arg2_defvalue = "" ;
    hk_string *arg2 = (hk_string *) &arg2_defvalue ;
    hk_presentation *arg3 = (hk_presentation *) NULL ;
    hk_datasource *result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|OO:hk_database_new_table",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        {
            if (PyString_Check(obj1)) {
                temp2 = hk_string(PyString_AsString(obj1));
                arg2 = &temp2;
            } else {
                SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
            }
        }
    }
    if (obj2) {
        if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_hk_presentation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    }
    result = (hk_datasource *)(arg1)->new_table((hk_string const &)*arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_datasource, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_database_new_resultquery(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    hk_presentation *arg2 = (hk_presentation *) NULL ;
    hk_datasource *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:hk_database_new_resultquery",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_presentation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    }
    result = (hk_datasource *)(arg1)->new_resultquery(arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_datasource, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_database_new_view(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    hk_string const &arg2_defvalue = "" ;
    hk_string *arg2 = (hk_string *) &arg2_defvalue ;
    hk_presentation *arg3 = (hk_presentation *) NULL ;
    hk_datasource *result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|OO:hk_database_new_view",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        {
            if (PyString_Check(obj1)) {
                temp2 = hk_string(PyString_AsString(obj1));
                arg2 = &temp2;
            } else {
                SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
            }
        }
    }
    if (obj2) {
        if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_hk_presentation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    }
    result = (hk_datasource *)(arg1)->new_view((hk_string const &)*arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_datasource, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_database_new_actionquery(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    hk_actionquery *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_database_new_actionquery",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_actionquery *)(arg1)->new_actionquery();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_actionquery, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_database_load_datasource(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    hk_string *arg2 = 0 ;
    int arg3 = (int) dt_table ;
    hk_presentation *arg4 = (hk_presentation *) NULL ;
    hk_datasource *result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|iO:hk_database_load_datasource",&obj0,&obj1,&arg3,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj3) {
        if ((SWIG_ConvertPtr(obj3,(void **) &arg4, SWIGTYPE_p_hk_presentation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    }
    result = (hk_datasource *)(arg1)->load_datasource((hk_string const &)*arg2,(datasourcetype )arg3,arg4);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_datasource, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_database_delete_table(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    hk_string *arg2 = 0 ;
    int arg3 = (int) hk_class::interactive ;
    bool result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|i:hk_database_delete_table",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = (bool)(arg1)->delete_table((hk_string const &)*arg2,(hk_class::enum_interaction )arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_database_delete_view(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    hk_string *arg2 = 0 ;
    int arg3 = (int) hk_class::interactive ;
    bool result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|i:hk_database_delete_view",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = (bool)(arg1)->delete_view((hk_string const &)*arg2,(hk_class::enum_interaction )arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_database_table_exists(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    hk_string *arg2 = 0 ;
    bool result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_database_table_exists",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = (bool)(arg1)->table_exists((hk_string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_database_query_exists(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    hk_string *arg2 = 0 ;
    bool result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_database_query_exists",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = (bool)(arg1)->query_exists((hk_string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_database_view_exists(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    hk_string *arg2 = 0 ;
    bool result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_database_view_exists",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = (bool)(arg1)->view_exists((hk_string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_database_form_exists(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    hk_string *arg2 = 0 ;
    bool result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_database_form_exists",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = (bool)(arg1)->form_exists((hk_string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_database_report_exists(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    hk_string *arg2 = 0 ;
    bool result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_database_report_exists",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = (bool)(arg1)->report_exists((hk_string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_database_load(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    hk_string *arg2 = 0 ;
    int arg3 ;
    hk_string result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOi:hk_database_load",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = (arg1)->load((hk_string const &)*arg2,(filetype )arg3);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_database_save(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    hk_string *arg2 = 0 ;
    hk_string *arg3 = 0 ;
    int arg4 ;
    hk_string temp2 ;
    hk_string temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOi:hk_database_save",&obj0,&obj1,&obj2,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    {
        if (PyString_Check(obj2)) {
            temp3 = hk_string(PyString_AsString(obj2));
            arg3 = &temp3;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    (arg1)->save((hk_string const &)*arg2,(hk_string const &)*arg3,(filetype )arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_database_connection(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    hk_connection *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_database_connection",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_connection *)(arg1)->connection();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_connection, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_database_new_formvisible(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    hk_form *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_database_new_formvisible",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_form *)(arg1)->new_formvisible();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_form, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_database_new_dialogformvisible(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    hk_form *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_database_new_dialogformvisible",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_form *)(arg1)->new_dialogformvisible();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_form, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_database_new_reportvisible(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    hk_report *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_database_new_reportvisible",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_report *)(arg1)->new_reportvisible();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_report, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_database_new_tablevisible(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    hk_dstable *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_database_new_tablevisible",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_dstable *)(arg1)->new_tablevisible();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_dstable, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_database_new_queryvisible(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    hk_dsquery *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_database_new_queryvisible",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_dsquery *)(arg1)->new_queryvisible();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_dsquery, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_database_set_storagemode(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oiii:hk_database_set_storagemode",&obj0,&arg2,&arg3,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->set_storagemode((filetype )arg2,(hk_database::enum_storagemode )arg3,(hk_database::enum_storagemode )arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_database_storagemode(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    int arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:hk_database_storagemode",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->storagemode((filetype )arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_database_loadmode(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    int arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:hk_database_loadmode",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->loadmode((filetype )arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_database_create_centralstoragetable(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_database_create_centralstoragetable",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->create_centralstoragetable();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_database_has_centralstoragetable(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_database_has_centralstoragetable",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->has_centralstoragetable();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_database_load_local(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    hk_string *arg2 = 0 ;
    int arg3 ;
    hk_string result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOi:hk_database_load_local",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = (arg1)->load_local((hk_string const &)*arg2,(filetype )arg3);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_database_load_central(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    hk_string *arg2 = 0 ;
    int arg3 ;
    hk_string result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOi:hk_database_load_central",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = (arg1)->load_central((hk_string const &)*arg2,(filetype )arg3);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_database_save_local(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    hk_string *arg2 = 0 ;
    hk_string *arg3 = 0 ;
    int arg4 ;
    bool arg5 ;
    bool arg6 ;
    hk_string temp2 ;
    hk_string temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOiOO:hk_database_save_local",&obj0,&obj1,&obj2,&arg4,&obj4,&obj5)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    {
        if (PyString_Check(obj2)) {
            temp3 = hk_string(PyString_AsString(obj2));
            arg3 = &temp3;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    arg5 = PyInt_AsLong(obj4) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    arg6 = PyInt_AsLong(obj5) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->save_local((hk_string const &)*arg2,(hk_string const &)*arg3,(filetype )arg4,arg5,arg6);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_database_save_central(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    hk_string *arg2 = 0 ;
    hk_string *arg3 = 0 ;
    int arg4 ;
    bool arg5 ;
    bool arg6 ;
    hk_string temp2 ;
    hk_string temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOiOO:hk_database_save_central",&obj0,&obj1,&obj2,&arg4,&obj4,&obj5)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    {
        if (PyString_Check(obj2)) {
            temp3 = hk_string(PyString_AsString(obj2));
            arg3 = &temp3;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    arg5 = PyInt_AsLong(obj4) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    arg6 = PyInt_AsLong(obj5) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->save_central((hk_string const &)*arg2,(hk_string const &)*arg3,(filetype )arg4,arg5,arg6);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_database_delete_localfile(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    hk_string *arg2 = 0 ;
    int arg3 ;
    int arg4 = (int) hk_class::interactive ;
    bool result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOi|i:hk_database_delete_localfile",&obj0,&obj1,&arg3,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = (bool)(arg1)->delete_localfile((hk_string const &)*arg2,(filetype )arg3,(hk_class::enum_interaction )arg4);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_database_delete_centralfile(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    hk_string *arg2 = 0 ;
    int arg3 ;
    int arg4 = (int) hk_class::interactive ;
    bool result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOi|i:hk_database_delete_centralfile",&obj0,&obj1,&arg3,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = (bool)(arg1)->delete_centralfile((hk_string const &)*arg2,(filetype )arg3,(hk_class::enum_interaction )arg4);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_database_filelist(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    int arg2 ;
    vector<hk_string > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:hk_database_filelist",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (vector<hk_string > *)(arg1)->filelist((filetype )arg2);
    
    {
        int s=result->size();
        resultobj=PyList_New(s);
        vector<hk_string>::iterator it=result->begin();
        int i=0;
        while (it!=result->end())
        {
            PyObject* o= PyString_FromString((*it).c_str());
            PyList_SetItem(resultobj,i,o);
            ++it;
            ++i;
        }
        
        
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_database_local_filelist(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    int arg2 ;
    vector<hk_string > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:hk_database_local_filelist",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (vector<hk_string > *)(arg1)->local_filelist((filetype )arg2);
    
    {
        int s=result->size();
        resultobj=PyList_New(s);
        vector<hk_string>::iterator it=result->begin();
        int i=0;
        while (it!=result->end())
        {
            PyObject* o= PyString_FromString((*it).c_str());
            PyList_SetItem(resultobj,i,o);
            ++it;
            ++i;
        }
        
        
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_database_central_filelist(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    int arg2 ;
    vector<hk_string > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:hk_database_central_filelist",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (vector<hk_string > *)(arg1)->central_filelist((filetype )arg2);
    
    {
        int s=result->size();
        resultobj=PyList_New(s);
        vector<hk_string>::iterator it=result->begin();
        int i=0;
        while (it!=result->end())
        {
            PyObject* o= PyString_FromString((*it).c_str());
            PyList_SetItem(resultobj,i,o);
            ++it;
            ++i;
        }
        
        
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_database_database_path(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_database_database_path",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->database_path();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_database_save_configuration(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_database_save_configuration",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->save_configuration();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_database_disable(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_database_disable",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->disable();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_database_existing_presentation(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    hk_string *arg2 = 0 ;
    int arg3 ;
    hk_presentation *result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOi:hk_database_existing_presentation",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = (hk_presentation *)(arg1)->existing_presentation((hk_string const &)*arg2,(hk_presentation::enum_presentationtype )arg3);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_presentation, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_database_existing_form(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    hk_string arg2 ;
    hk_form *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_database_existing_form",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1))
        arg2 = hk_string(PyString_AsString(obj1));
        else
        SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
    }
    result = (hk_form *)(arg1)->existing_form(arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_form, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_database_existing_report(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    hk_string arg2 ;
    hk_report *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_database_existing_report",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1))
        arg2 = hk_string(PyString_AsString(obj1));
        else
        SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
    }
    result = (hk_report *)(arg1)->existing_report(arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_report, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_database_set_name(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    hk_string *arg2 = 0 ;
    bool result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_database_set_name",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = (bool)(arg1)->set_name((hk_string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_database_name(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_database_name",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->name();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_database_copy_table(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    hk_datasource *arg2 = (hk_datasource *) 0 ;
    bool arg3 ;
    bool arg4 ;
    bool arg5 ;
    progress_dialogtype *arg6 = (progress_dialogtype *) NULL ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO|O:hk_database_copy_table",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg3 = PyInt_AsLong(obj2) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = PyInt_AsLong(obj3) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    arg5 = PyInt_AsLong(obj4) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    if (obj5) {
        if ((SWIG_ConvertPtr(obj5,(void **) &arg6, SWIGTYPE_p_progress_dialogtype,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    }
    result = (bool)(arg1)->copy_table(arg2,arg3,arg4,arg5,arg6);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_database_copy_view(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    hk_datasource *arg2 = (hk_datasource *) 0 ;
    progress_dialogtype *arg3 = (progress_dialogtype *) NULL ;
    hk_string const &arg4_defvalue = "" ;
    hk_string *arg4 = (hk_string *) &arg4_defvalue ;
    bool result;
    hk_string temp4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|OO:hk_database_copy_view",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj2) {
        if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_progress_dialogtype,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    }
    if (obj3) {
        {
            if (PyString_Check(obj3)) {
                temp4 = hk_string(PyString_AsString(obj3));
                arg4 = &temp4;
            } else {
                SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
            }
        }
    }
    result = (bool)(arg1)->copy_view(arg2,arg3,(hk_string const &)*arg4);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_database_rename_table(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    hk_string *arg2 = 0 ;
    hk_string *arg3 = 0 ;
    int arg4 = (int) hk_class::interactive ;
    bool result;
    hk_string temp2 ;
    hk_string temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO|i:hk_database_rename_table",&obj0,&obj1,&obj2,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    {
        if (PyString_Check(obj2)) {
            temp3 = hk_string(PyString_AsString(obj2));
            arg3 = &temp3;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = (bool)(arg1)->rename_table((hk_string const &)*arg2,(hk_string const &)*arg3,(hk_class::enum_interaction )arg4);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_database_rename_file(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    hk_string *arg2 = 0 ;
    hk_string *arg3 = 0 ;
    int arg4 ;
    int arg5 = (int) hk_class::interactive ;
    bool result;
    hk_string temp2 ;
    hk_string temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOi|i:hk_database_rename_file",&obj0,&obj1,&obj2,&arg4,&arg5)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    {
        if (PyString_Check(obj2)) {
            temp3 = hk_string(PyString_AsString(obj2));
            arg3 = &temp3;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = (bool)(arg1)->rename_file((hk_string const &)*arg2,(hk_string const &)*arg3,(filetype )arg4,(hk_class::enum_interaction )arg5);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_database_set_databasecharset(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    hk_string *arg2 = 0 ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_database_set_databasecharset",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    (arg1)->set_databasecharset((hk_string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_database_databasecharset(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_database_databasecharset",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((hk_database const *)arg1)->databasecharset();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_database_set_automatic_data_update(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_database_set_automatic_data_update",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->set_automatic_data_update(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_database_is_automatic_data_update(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_database *arg1 = (hk_database *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_database_is_automatic_data_update",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->is_automatic_data_update();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * hk_database_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_hk_database, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_defaulttextdelimiter_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable defaulttextdelimiter is read-only.");
    return 1;
}


static PyObject *_wrap_defaulttextdelimiter_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) &defaulttextdelimiter, SWIGTYPE_p_hk_string, 0);
    return pyobj;
}


static int _wrap_defaultidentifierdelimiter_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable defaultidentifierdelimiter is read-only.");
    return 1;
}


static PyObject *_wrap_defaultidentifierdelimiter_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) &defaultidentifierdelimiter, SWIGTYPE_p_hk_string, 0);
    return pyobj;
}


static PyObject *_wrap_hk_data_name(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_data *arg1 = (hk_data *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_data_name",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_data,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((hk_data const *)arg1)->name();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_data_set_name(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_data *arg1 = (hk_data *) 0 ;
    hk_string *arg2 = 0 ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_data_set_name",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_data,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    (arg1)->set_name((hk_string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_data_type(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_data *arg1 = (hk_data *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_data_type",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_data,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)((hk_data const *)arg1)->type();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_data_identifierdelimiter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_data *arg1 = (hk_data *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_data_identifierdelimiter",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_data,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((hk_data const *)arg1)->identifierdelimiter();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_data_textdelimiter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_data *arg1 = (hk_data *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_data_textdelimiter",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_data,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((hk_data const *)arg1)->textdelimiter();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_data_print_sqlstatements(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    bool result;
    
    if(!PyArg_ParseTuple(args,(char *)":hk_data_print_sqlstatements")) goto fail;
    result = (bool)hk_data::print_sqlstatements();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_data_set_print_sqlstatements(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    bool arg1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_data_set_print_sqlstatements",&obj0)) goto fail;
    arg1 = PyInt_AsLong(obj0) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    hk_data::set_print_sqlstatements(arg1);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * hk_data_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_hk_data, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_hk_datasource_name(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datasource_name",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->name();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_set_name(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_datasource_set_name",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_name((hk_string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_set_sql(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) false ;
    bool arg4 = (bool) true ;
    bool result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|OO:hk_datasource_set_sql",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj3) {
        arg4 = PyInt_AsLong(obj3) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (bool)(arg1)->set_sql((hk_string const &)*arg2,arg3,arg4);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_sql(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datasource_sql",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->sql();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_backendsql(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datasource_backendsql",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((hk_datasource const *)arg1)->backendsql();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_is_rawsql(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datasource_is_rawsql",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->is_rawsql();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_goto_row(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    unsigned long arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_datasource_goto_row",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned long) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    result = (bool)(arg1)->goto_row(arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_goto_first(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datasource_goto_first",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->goto_first();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_goto_last(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datasource_goto_last",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->goto_last();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_goto_next(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datasource_goto_next",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->goto_next();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_goto_previous(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datasource_goto_previous",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->goto_previous();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_row_position(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    unsigned long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datasource_row_position",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (unsigned long)(arg1)->row_position();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_max_rows(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    unsigned long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datasource_max_rows",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (unsigned long)(arg1)->max_rows();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_enable(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datasource_enable",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->enable();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_disable(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datasource_disable",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->disable();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_set_enabled(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    bool arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_datasource_set_enabled",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    result = (bool)(arg1)->set_enabled(arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_is_enabled(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datasource_is_enabled",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->is_enabled();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_column_by_name__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    hk_string *arg2 = 0 ;
    hk_column *result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_datasource_column_by_name",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = (hk_column *)(arg1)->column_by_name((hk_string const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_column, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_column_by_name__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    hk_string *arg2 = 0 ;
    int arg3 ;
    hk_column *result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOi:hk_datasource_column_by_name",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = (hk_column *)(arg1)->column_by_name((hk_string const &)*arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_column, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_column_by_name(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_datasource, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                return _wrap_hk_datasource_column_by_name__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_datasource, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_hk_datasource_column_by_name__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'hk_datasource_column_by_name'");
    return NULL;
}


static PyObject *_wrap_hk_datasource_store_changed_data(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datasource_store_changed_data",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->store_changed_data();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_set_automatic_data_update(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_datasource_set_automatic_data_update",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->set_automatic_data_update(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_is_automatic_data_update(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datasource_is_automatic_data_update",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->is_automatic_data_update();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_mode(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datasource_mode",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->mode();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_setmode_insertrow(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datasource_setmode_insertrow",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setmode_insertrow();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_delete_actualrow(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    int arg2 = (int) hk_class::interactive ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|i:hk_datasource_delete_actualrow",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->delete_actualrow((hk_class::enum_interaction )arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_delete_rows(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    unsigned long arg2 ;
    unsigned long arg3 ;
    bool arg4 = (bool) true ;
    int arg5 = (int) hk_class::interactive ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO|Oi:hk_datasource_delete_rows",&obj0,&obj1,&obj2,&obj3,&arg5)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned long) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (unsigned long) PyInt_AsLong(obj2);
    if (PyErr_Occurred()) SWIG_fail;
    if (obj3) {
        arg4 = PyInt_AsLong(obj3) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (bool)(arg1)->delete_rows(arg2,arg3,arg4,(hk_class::enum_interaction )arg5);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_setmode_normal(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datasource_setmode_normal",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setmode_normal();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_setmode_createtable(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datasource_setmode_createtable",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setmode_createtable();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_setmode_altertable(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datasource_setmode_altertable",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setmode_altertable();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_new_column(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    hk_column *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datasource_new_column",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_column *)(arg1)->new_column();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_column, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_alter_column(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    hk_string *arg2 = 0 ;
    hk_string *arg3 = (hk_string *) NULL ;
    hk_column::enum_columntype *arg4 = (hk_column::enum_columntype *) NULL ;
    long *arg5 = (long *) NULL ;
    hk_string *arg6 = (hk_string *) NULL ;
    bool *arg7 = (bool *) NULL ;
    bool *arg8 = (bool *) NULL ;
    bool result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    PyObject * obj7 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|OOOOOO:hk_datasource_alter_column",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_hk_string,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    }
    if (obj3) {
        if ((SWIG_ConvertPtr(obj3,(void **) &arg4, SWIGTYPE_p_hk_column__enum_columntype,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    }
    if (obj4) {
        if ((SWIG_ConvertPtr(obj4,(void **) &arg5, SWIGTYPE_p_long,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    }
    if (obj5) {
        if ((SWIG_ConvertPtr(obj5,(void **) &arg6, SWIGTYPE_p_hk_string,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    }
    if (obj6) {
        if ((SWIG_ConvertPtr(obj6,(void **) &arg7, SWIGTYPE_p_bool,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    }
    if (obj7) {
        if ((SWIG_ConvertPtr(obj7,(void **) &arg8, SWIGTYPE_p_bool,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    }
    result = (bool)(arg1)->alter_column((hk_string const &)*arg2,(hk_string const *)arg3,arg4,arg5,(hk_string const *)arg6,(bool const *)arg7,(bool const *)arg8);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_delete_column(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    hk_string *arg2 = 0 ;
    bool result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_datasource_delete_column",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = (bool)(arg1)->delete_column((hk_string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_create_table_now(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datasource_create_table_now",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->create_table_now();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_alter_table_now(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datasource_alter_table_now",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->alter_table_now();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_set_accessmode(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    int arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:hk_datasource_set_accessmode",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->set_accessmode((hk_datasource::enum_accessmode )arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_accessmode(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datasource_accessmode",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)((hk_datasource const *)arg1)->accessmode();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_is_readonly(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datasource_is_readonly",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->is_readonly();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_set_readonly(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_datasource_set_readonly",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->set_readonly(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_drop_index(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    hk_string *arg2 = 0 ;
    bool result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_datasource_drop_index",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = (bool)(arg1)->drop_index((hk_string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_create_index(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 ;
    list<hk_string > *arg4 = 0 ;
    bool result;
    hk_string temp2 ;
    list<hk_string > strlist4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:hk_datasource_create_index",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    arg3 = PyInt_AsLong(obj2) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    {
        if (!PySequence_Check(obj3))
        {
            PyErr_SetString(PyExc_ValueError,hk_class::hk_translate("Expected a sequence").c_str());
            return NULL;
        }
        int i=PySequence_Length(obj3);
        int count=0;
        while (count < i)
        {
            PyObject *o=PySequence_GetItem(obj3,count);
            if (!PyString_Check(o))
            {
                PyErr_SetString(PyExc_ValueError,hk_class::hk_translate("Sequence elements must be strings").c_str());
                return NULL;
            }
            strlist4.insert(strlist4.end(),(hk_string)PyString_AsString(o));
            ++count;
        }
        arg4=&strlist4;
    }
    result = (bool)(arg1)->create_index((hk_string const &)*arg2,arg3,*arg4);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_alter_index(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 ;
    list<hk_string > *arg4 = 0 ;
    bool result;
    hk_string temp2 ;
    list<hk_string > strlist4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:hk_datasource_alter_index",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    arg3 = PyInt_AsLong(obj2) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    {
        if (!PySequence_Check(obj3))
        {
            PyErr_SetString(PyExc_ValueError,hk_class::hk_translate("Expected a sequence").c_str());
            return NULL;
        }
        int i=PySequence_Length(obj3);
        int count=0;
        while (count < i)
        {
            PyObject *o=PySequence_GetItem(obj3,count);
            if (!PyString_Check(o))
            {
                PyErr_SetString(PyExc_ValueError,hk_class::hk_translate("Sequence elements must be strings").c_str());
                return NULL;
            }
            strlist4.insert(strlist4.end(),(hk_string)PyString_AsString(o));
            ++count;
        }
        arg4=&strlist4;
    }
    result = (bool)(arg1)->alter_index((hk_string const &)*arg2,arg3,*arg4);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_database(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    hk_database *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datasource_database",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_database *)(arg1)->database();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_database, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_set_ignore_changed_data(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datasource_set_ignore_changed_data",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->set_ignore_changed_data();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_ignore_changed_data(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datasource_ignore_changed_data",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((hk_datasource const *)arg1)->ignore_changed_data();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_set_filter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_datasource_set_filter",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_filter((hk_string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_filter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datasource_filter",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->filter();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_set_temporaryfilter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    hk_string *arg2 = 0 ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_datasource_set_temporaryfilter",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    (arg1)->set_temporaryfilter((hk_string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_temporaryfilter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datasource_temporaryfilter",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->temporaryfilter();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_set_use_temporaryfilter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_datasource_set_use_temporaryfilter",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->set_use_temporaryfilter(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_use_temporaryfilter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datasource_use_temporaryfilter",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->use_temporaryfilter();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_clear_filter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    bool arg2 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:hk_datasource_clear_filter",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = PyInt_AsLong(obj1) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->clear_filter(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_set_sorting(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_datasource_set_sorting",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_sorting((hk_string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_sorting(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datasource_sorting",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->sorting();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_set_temporarysorting(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    hk_string *arg2 = 0 ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_datasource_set_temporarysorting",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    (arg1)->set_temporarysorting((hk_string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_temporarysorting(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datasource_temporarysorting",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->temporarysorting();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_set_use_temporarysorting(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_datasource_set_use_temporarysorting",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->set_use_temporarysorting(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_use_temporarysorting(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datasource_use_temporarysorting",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->use_temporarysorting();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_clear_sorting(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    bool arg2 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:hk_datasource_clear_sorting",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = PyInt_AsLong(obj1) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->clear_sorting(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_datasource_used(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datasource_datasource_used",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((hk_datasource const *)arg1)->datasource_used();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_referenceslist(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    list<referentialclass > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datasource_referenceslist",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (list<referentialclass > *)(arg1)->referenceslist();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_listTreferentialt, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_add_reference(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    referentialclass *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_datasource_add_reference",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_referentialclass,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (bool)(arg1)->add_reference((referentialclass const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_drop_reference(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    hk_string *arg2 = 0 ;
    bool result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_datasource_drop_reference",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = (bool)(arg1)->drop_reference((hk_string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_has_changed(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datasource_has_changed",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((hk_datasource const *)arg1)->has_changed();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_dateformat(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datasource_dateformat",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((hk_datasource const *)arg1)->dateformat();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_datetimeformat(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datasource_datetimeformat",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((hk_datasource const *)arg1)->datetimeformat();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_timeformat(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datasource_timeformat",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((hk_datasource const *)arg1)->timeformat();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_dependingmode(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datasource_dependingmode",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->dependingmode();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_set_depending_on(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    hk_datasource *arg2 = (hk_datasource *) 0 ;
    bool arg3 = (bool) false ;
    int arg4 = (int) hk_datasource::depending_standard ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|Oi:hk_datasource_set_depending_on",&obj0,&obj1,&obj2,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (bool)(arg1)->set_depending_on(arg2,arg3,(hk_datasource::enum_dependingmodes )arg4);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_depending_on(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    hk_datasource *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datasource_depending_on",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_datasource *)(arg1)->depending_on();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_datasource, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_set_depending_on_is_left_join(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    bool arg2 ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_datasource_set_depending_on_is_left_join",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_depending_on_is_left_join(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_depending_on_is_left_join(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datasource_depending_on_is_left_join",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->depending_on_is_left_join();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_depending_on_react_on_data_changes(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datasource_depending_on_react_on_data_changes",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->depending_on_react_on_data_changes();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_depending_on_thisfields(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    list<hk_string > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datasource_depending_on_thisfields",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (list<hk_string > *)(arg1)->depending_on_thisfields();
    
    {
        int s=result->size();
        resultobj=PyList_New(s);
        list<hk_string>::iterator it=result->begin();
        int i=0;
        while (it!=result->end())
        {
            PyObject* o= PyString_FromString((*it).c_str());
            PyList_SetItem(resultobj,i,o);
            ++it;
            ++i;
        }
        
        
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_depending_on_masterfields(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    list<hk_string > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datasource_depending_on_masterfields",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (list<hk_string > *)(arg1)->depending_on_masterfields();
    
    {
        int s=result->size();
        resultobj=PyList_New(s);
        list<hk_string>::iterator it=result->begin();
        int i=0;
        while (it!=result->end())
        {
            PyObject* o= PyString_FromString((*it).c_str());
            PyList_SetItem(resultobj,i,o);
            ++it;
            ++i;
        }
        
        
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_set_depending_on_presentationdatasource(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    long arg2 ;
    bool arg3 = (bool) false ;
    int arg4 = (int) hk_datasource::depending_standard ;
    bool arg5 = (bool) true ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Ol|OiO:hk_datasource_set_depending_on_presentationdatasource",&obj0,&arg2,&obj2,&arg4,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj4) {
        arg5 = PyInt_AsLong(obj4) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (bool)(arg1)->set_depending_on_presentationdatasource(arg2,arg3,(hk_datasource::enum_dependingmodes )arg4,arg5);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_depending_on_presentationdatasource(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datasource_depending_on_presentationdatasource",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (long)(arg1)->depending_on_presentationdatasource();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_add_depending_fields(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    hk_string *arg2 = 0 ;
    hk_string *arg3 = 0 ;
    bool arg4 = (bool) true ;
    hk_string temp2 ;
    hk_string temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO|O:hk_datasource_add_depending_fields",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    {
        if (PyString_Check(obj2)) {
            temp3 = hk_string(PyString_AsString(obj2));
            arg3 = &temp3;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj3) {
        arg4 = PyInt_AsLong(obj3) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->add_depending_fields((hk_string const &)*arg2,(hk_string const &)*arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_clear_depending_fields(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    bool arg2 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:hk_datasource_clear_depending_fields",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = PyInt_AsLong(obj1) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->clear_depending_fields(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_columnlist(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datasource_columnlist",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (PyObject *)hk_datasource_columnlist(arg1);
    
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_indexlist(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datasource_indexlist",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (PyObject *)hk_datasource_indexlist(arg1);
    
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_show_currentrow(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datasource_show_currentrow",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (PyObject *)hk_datasource_show_currentrow(arg1);
    
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datasource_indices(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datasource_indices",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (PyObject *)hk_datasource_indices(arg1);
    
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_hk_datasource(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datasource *arg1 = (hk_datasource *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_hk_datasource",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * hk_datasource_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_hk_datasource, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_hk_column_name(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_column_name",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((hk_column const *)arg1)->name();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_set_name(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    hk_string *arg2 = 0 ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_column_set_name",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    (arg1)->set_name((hk_string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_is_readonly(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_column_is_readonly",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((hk_column const *)arg1)->is_readonly();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_set_readonly(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_column_set_readonly",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->set_readonly(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_columntype(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_column_columntype",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)((hk_column const *)arg1)->columntype();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_set_columntype(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:hk_column_set_columntype",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->set_columntype((hk_column::enum_columntype )arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_size(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_column_size",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (long)(arg1)->size();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_set_size(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    long arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Ol:hk_column_set_size",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->set_size(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_columntype_name(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_column_columntype_name",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->columntype_name();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_is_primary(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_column_is_primary",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->is_primary();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_set_primary(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    bool arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_column_set_primary",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    result = (bool)(arg1)->set_primary(arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_is_notnull(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_column_is_notnull",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->is_notnull();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_get_delimiter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_column_get_delimiter",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->get_delimiter();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_set_notnull(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    bool arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_column_set_notnull",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    result = (bool)(arg1)->set_notnull(arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_has_changed(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_column_has_changed",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->has_changed();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_asstring(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    bool arg2 = (bool) true ;
    hk_string result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:hk_column_asstring",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = PyInt_AsLong(obj1) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (arg1)->asstring(arg2);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_set_asstring__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_column_set_asstring",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_asstring((hk_string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_set_asstring__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 ;
    bool arg4 ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:hk_column_set_asstring",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    arg3 = PyInt_AsLong(obj2) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = PyInt_AsLong(obj3) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->set_asstring((hk_string const &)*arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_set_asstring(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if ((argc >= 2) && (argc <= 3)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_column, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                if (argc <= 2) {
                    return _wrap_hk_column_set_asstring__SWIG_0(self,args);
                }
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_hk_column_set_asstring__SWIG_0(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_column, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_hk_column_set_asstring__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'hk_column_set_asstring'");
    return NULL;
}


static PyObject *_wrap_hk_column_transformed_asstring(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_column_transformed_asstring",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (char *)(arg1)->transformed_asstring();
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_transformed_asstring_at(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    unsigned long arg2 ;
    char *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_column_transformed_asstring_at",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned long) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    result = (char *)(arg1)->transformed_asstring_at(arg2);
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_changed_data_asstring(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    bool arg2 = (bool) true ;
    hk_string result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:hk_column_changed_data_asstring",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = PyInt_AsLong(obj1) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (arg1)->changed_data_asstring(arg2);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_set_asbinary(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    struct_raw_data *arg2 = (struct_raw_data *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_column_set_asbinary",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_struct_raw_data,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->set_asbinary((struct_raw_data const *)arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_asbinary(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    struct_raw_data *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_column_asbinary",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (struct_raw_data *)(arg1)->asbinary();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_struct_raw_data, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_asbinary_at(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    unsigned long arg2 ;
    struct_raw_data *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_column_asbinary_at",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned long) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    result = (struct_raw_data *)(arg1)->asbinary_at(arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_struct_raw_data, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_set_asbool(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_column_set_asbool",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->set_asbool(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_asbool(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_column_asbool",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->asbool();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_asbool_at(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    unsigned long arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_column_asbool_at",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned long) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    result = (bool)(arg1)->asbool_at(arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_changed_data_asbool(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_column_changed_data_asbool",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->changed_data_asbool();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_set_asinteger(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    long arg2 ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Ol|O:hk_column_set_asinteger",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_asinteger(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_asinteger(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_column_asinteger",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (long)(arg1)->asinteger();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_asinteger_at(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    unsigned long arg2 ;
    long result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_column_asinteger_at",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned long) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    result = (long)(arg1)->asinteger_at(arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_changed_data_asinteger(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_column_changed_data_asinteger",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (long)(arg1)->changed_data_asinteger();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_set_asdouble(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    double arg2 ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Od|O:hk_column_set_asdouble",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_asdouble(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_asdouble(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_column_asdouble",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (double)(arg1)->asdouble();
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_asdouble_at(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    unsigned long arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_column_asdouble_at",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned long) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    result = (double)(arg1)->asdouble_at(arg2);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_changed_data_asdouble(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_column_changed_data_asdouble",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (double)(arg1)->changed_data_asdouble();
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_fieldnumber(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_column_fieldnumber",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (unsigned int)(arg1)->fieldnumber();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_asstring_at(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    unsigned long arg2 ;
    bool arg3 = (bool) true ;
    hk_string result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_column_asstring_at",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned long) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (arg1)->asstring_at(arg2,arg3);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_is_nullvalue(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_column_is_nullvalue",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->is_nullvalue();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_changed_data_is_nullvalue(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_column_changed_data_is_nullvalue",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->changed_data_is_nullvalue();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_is_nullvalue_at(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    unsigned long arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_column_is_nullvalue_at",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned long) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    result = (bool)(arg1)->is_nullvalue_at(arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_set_asnullvalue(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    bool arg2 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:hk_column_set_asnullvalue",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = PyInt_AsLong(obj1) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_asnullvalue(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_count__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    unsigned int arg2 ;
    unsigned int arg3 ;
    long result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:hk_column_count",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (unsigned int) PyInt_AsLong(obj2);
    if (PyErr_Occurred()) SWIG_fail;
    result = (long)(arg1)->count(arg2,arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_sum__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    unsigned int arg2 ;
    unsigned int arg3 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:hk_column_sum",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (unsigned int) PyInt_AsLong(obj2);
    if (PyErr_Occurred()) SWIG_fail;
    result = (double)(arg1)->sum(arg2,arg3);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_count__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_column_count",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (long)(arg1)->count();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_count(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_column, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_hk_column_count__SWIG_1(self,args);
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_column, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_hk_column_count__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'hk_column_count'");
    return NULL;
}


static PyObject *_wrap_hk_column_sum__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_column_sum",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (double)(arg1)->sum();
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_sum(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_column, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_hk_column_sum__SWIG_1(self,args);
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_column, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_hk_column_sum__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'hk_column_sum'");
    return NULL;
}


static PyObject *_wrap_hk_column_find__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    unsigned int arg2 ;
    unsigned int arg3 ;
    hk_string *arg4 = 0 ;
    bool arg5 = (bool) false ;
    bool arg6 = (bool) false ;
    bool arg7 = (bool) false ;
    unsigned int result;
    hk_string temp4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO|OOO:hk_column_find",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (unsigned int) PyInt_AsLong(obj2);
    if (PyErr_Occurred()) SWIG_fail;
    {
        if (PyString_Check(obj3)) {
            temp4 = hk_string(PyString_AsString(obj3));
            arg4 = &temp4;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj4) {
        arg5 = PyInt_AsLong(obj4) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj5) {
        arg6 = PyInt_AsLong(obj5) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj6) {
        arg7 = PyInt_AsLong(obj6) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (unsigned int)(arg1)->find(arg2,arg3,(hk_string const &)*arg4,arg5,arg6,arg7);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_find__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) false ;
    bool arg4 = (bool) false ;
    bool arg5 = (bool) false ;
    unsigned int result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|OOO:hk_column_find",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj3) {
        arg4 = PyInt_AsLong(obj3) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj4) {
        arg5 = PyInt_AsLong(obj4) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (unsigned int)(arg1)->find((hk_string const &)*arg2,arg3,arg4,arg5);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_find(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[8];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 7); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if ((argc >= 2) && (argc <= 5)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_column, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                if (argc <= 2) {
                    return _wrap_hk_column_find__SWIG_1(self,args);
                }
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    if (argc <= 3) {
                        return _wrap_hk_column_find__SWIG_1(self,args);
                    }
                    {
                        _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        if (argc <= 4) {
                            return _wrap_hk_column_find__SWIG_1(self,args);
                        }
                        {
                            _v = (PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
                        }
                        if (_v) {
                            return _wrap_hk_column_find__SWIG_1(self,args);
                        }
                    }
                }
            }
        }
    }
    if ((argc >= 4) && (argc <= 7)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_column, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = PyString_Check(argv[3]) ? 1 : 0;
                    }
                    if (_v) {
                        if (argc <= 4) {
                            return _wrap_hk_column_find__SWIG_0(self,args);
                        }
                        {
                            _v = (PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
                        }
                        if (_v) {
                            if (argc <= 5) {
                                return _wrap_hk_column_find__SWIG_0(self,args);
                            }
                            {
                                _v = (PyInt_Check(argv[5]) || PyLong_Check(argv[5])) ? 1 : 0;
                            }
                            if (_v) {
                                if (argc <= 6) {
                                    return _wrap_hk_column_find__SWIG_0(self,args);
                                }
                                {
                                    _v = (PyInt_Check(argv[6]) || PyLong_Check(argv[6])) ? 1 : 0;
                                }
                                if (_v) {
                                    return _wrap_hk_column_find__SWIG_0(self,args);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'hk_column_find'");
    return NULL;
}


static PyObject *_wrap_hk_column_is_findstring(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    unsigned int arg2 ;
    hk_string *arg3 = 0 ;
    bool arg4 = (bool) false ;
    bool arg5 = (bool) false ;
    bool result;
    hk_string temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO|OO:hk_column_is_findstring",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    {
        if (PyString_Check(obj2)) {
            temp3 = hk_string(PyString_AsString(obj2));
            arg3 = &temp3;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj3) {
        arg4 = PyInt_AsLong(obj3) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj4) {
        arg5 = PyInt_AsLong(obj4) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (bool)(arg1)->is_findstring(arg2,(hk_string const &)*arg3,arg4,arg5);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_changed_data(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    struct_raw_data *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_column_changed_data",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (struct_raw_data *)(arg1)->changed_data();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_struct_raw_data, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_transformed_changed_data(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    struct_raw_data *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_column_transformed_changed_data",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (struct_raw_data *)(arg1)->transformed_changed_data();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_struct_raw_data, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_reset_changed_data(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_column_reset_changed_data",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->reset_changed_data();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_set_boolvalues(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    hk_string *arg2 = 0 ;
    hk_string *arg3 = 0 ;
    hk_string temp2 ;
    hk_string temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:hk_column_set_boolvalues",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    {
        if (PyString_Check(obj2)) {
            temp3 = hk_string(PyString_AsString(obj2));
            arg3 = &temp3;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    (arg1)->set_boolvalues((hk_string const &)*arg2,(hk_string const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_bool_truevalue(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_column_bool_truevalue",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->bool_truevalue();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_bool_falsevalue(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_column_bool_falsevalue",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->bool_falsevalue();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_set_dateformat(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    hk_string *arg2 = 0 ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_column_set_dateformat",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    (arg1)->set_dateformat((hk_string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_dateformat(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_column_dateformat",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((hk_column const *)arg1)->dateformat();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_set_timeformat(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    hk_string *arg2 = 0 ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_column_set_timeformat",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    (arg1)->set_timeformat((hk_string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_timeformat(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_column_timeformat",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((hk_column const *)arg1)->timeformat();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_set_datetimeformat(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    hk_string *arg2 = 0 ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_column_set_datetimeformat",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    (arg1)->set_datetimeformat((hk_string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_datetimeformat(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_column_datetimeformat",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((hk_column const *)arg1)->datetimeformat();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_save_to_file(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    hk_string *arg2 = 0 ;
    bool result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_column_save_to_file",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = (bool)(arg1)->save_to_file((hk_string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_load_from_file(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    hk_string *arg2 = 0 ;
    bool result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_column_load_from_file",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = (bool)(arg1)->load_from_file((hk_string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_save_columndefinition(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    ostream *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_column_save_columndefinition",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_ostream,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    (arg1)->save_columndefinition(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_load_columndefinition(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    xmlNodePtr arg2 ;
    xmlNodePtr *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_column_load_columndefinition",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_xmlNodePtr,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    (arg1)->load_columndefinition(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_datasource(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    hk_datasource *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_column_datasource",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_datasource *)(arg1)->datasource();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_datasource, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_set_allow_autoincwrite(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_column_set_allow_autoincwrite",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->set_allow_autoincwrite(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_allow_autoincwrite(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_column_allow_autoincwrite",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->allow_autoincwrite();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_in_definitionmode(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_column_in_definitionmode",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->in_definitionmode();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_curval_asstring(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_column_curval_asstring",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->curval_asstring();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_curval_asdouble(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_column_curval_asdouble",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (double)(arg1)->curval_asdouble();
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_curval_asinteger(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_column_curval_asinteger",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (long)(arg1)->curval_asinteger();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_curval_asbool(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_column_curval_asbool",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->curval_asbool();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_set_definitionmode(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_column_set_definitionmode",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->set_definitionmode(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_column_tableorigin(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_column *arg1 = (hk_column *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_column_tableorigin",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->tableorigin();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * hk_column_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_hk_column, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_hk_visible(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_presentation *arg1 = (hk_presentation *) NULL ;
    hk_visible *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"|O:new_hk_visible",&obj0)) goto fail;
    if (obj0) {
        if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_presentation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    }
    result = (hk_visible *)new hk_visible(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_visible, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_hk_visible(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_hk_visible",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_set_x(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    unsigned int arg2 ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_visible_set_x",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_x(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_set_y(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    unsigned int arg2 ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_visible_set_y",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_y(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_set_width(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    unsigned int arg2 ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_visible_set_width",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_width(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_set_height(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    unsigned int arg2 ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_visible_set_height",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_height(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_x(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_visible_x",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (unsigned int)((hk_visible const *)arg1)->x();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_y(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_visible_y",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (unsigned int)((hk_visible const *)arg1)->y();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_width(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_visible_width",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (unsigned int)((hk_visible const *)arg1)->width();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_height(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_visible_height",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (unsigned int)(arg1)->height();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_set_size__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    unsigned int arg2 ;
    unsigned int arg3 ;
    unsigned int arg4 ;
    unsigned int arg5 ;
    bool arg6 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO|O:hk_visible_set_size",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (unsigned int) PyInt_AsLong(obj2);
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (unsigned int) PyInt_AsLong(obj3);
    if (PyErr_Occurred()) SWIG_fail;
    arg5 = (unsigned int) PyInt_AsLong(obj4);
    if (PyErr_Occurred()) SWIG_fail;
    if (obj5) {
        arg6 = PyInt_AsLong(obj5) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_size(arg2,arg3,arg4,arg5,arg6);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_set_size__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    unsigned int arg2 ;
    unsigned int arg3 ;
    unsigned int arg4 ;
    unsigned int arg5 ;
    bool arg6 ;
    bool arg7 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOO:hk_visible_set_size",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (unsigned int) PyInt_AsLong(obj2);
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (unsigned int) PyInt_AsLong(obj3);
    if (PyErr_Occurred()) SWIG_fail;
    arg5 = (unsigned int) PyInt_AsLong(obj4);
    if (PyErr_Occurred()) SWIG_fail;
    arg6 = PyInt_AsLong(obj5) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    arg7 = PyInt_AsLong(obj6) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->set_size(arg2,arg3,arg4,arg5,arg6,arg7);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_set_size__SWIG_2(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    unsigned int arg2 ;
    unsigned int arg3 ;
    bool arg4 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO|O:hk_visible_set_size",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (unsigned int) PyInt_AsLong(obj2);
    if (PyErr_Occurred()) SWIG_fail;
    if (obj3) {
        arg4 = PyInt_AsLong(obj3) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_size(arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_set_size(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[8];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 7); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if ((argc >= 3) && (argc <= 4)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_visible, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    if (argc <= 3) {
                        return _wrap_hk_visible_set_size__SWIG_2(self,args);
                    }
                    {
                        _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_hk_visible_set_size__SWIG_2(self,args);
                    }
                }
            }
        }
    }
    if ((argc >= 5) && (argc <= 6)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_visible, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            _v = (PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
                        }
                        if (_v) {
                            if (argc <= 5) {
                                return _wrap_hk_visible_set_size__SWIG_0(self,args);
                            }
                            {
                                _v = (PyInt_Check(argv[5]) || PyLong_Check(argv[5])) ? 1 : 0;
                            }
                            if (_v) {
                                return _wrap_hk_visible_set_size__SWIG_0(self,args);
                            }
                        }
                    }
                }
            }
        }
    }
    if (argc == 7) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_visible, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            _v = (PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
                        }
                        if (_v) {
                            {
                                _v = (PyInt_Check(argv[5]) || PyLong_Check(argv[5])) ? 1 : 0;
                            }
                            if (_v) {
                                {
                                    _v = (PyInt_Check(argv[6]) || PyLong_Check(argv[6])) ? 1 : 0;
                                }
                                if (_v) {
                                    return _wrap_hk_visible_set_size__SWIG_1(self,args);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'hk_visible_set_size'");
    return NULL;
}


static PyObject *_wrap_hk_visible_set_position(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    unsigned int arg2 ;
    unsigned int arg3 ;
    bool arg4 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO|O:hk_visible_set_position",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (unsigned int) PyInt_AsLong(obj2);
    if (PyErr_Occurred()) SWIG_fail;
    if (obj3) {
        arg4 = PyInt_AsLong(obj3) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_position(arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_set_label__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_visible_set_label",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_label((hk_string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_set_label__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 ;
    bool arg4 ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:hk_visible_set_label",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    arg3 = PyInt_AsLong(obj2) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = PyInt_AsLong(obj3) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->set_label((hk_string const &)*arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_set_label(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if ((argc >= 2) && (argc <= 3)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_visible, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                if (argc <= 2) {
                    return _wrap_hk_visible_set_label__SWIG_0(self,args);
                }
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_hk_visible_set_label__SWIG_0(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_visible, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_hk_visible_set_label__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'hk_visible_set_label'");
    return NULL;
}


static PyObject *_wrap_hk_visible_label(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_visible_label",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->label();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_set_identifier(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    int arg4 = (int) hk_class::interactive ;
    bool result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|Oi:hk_visible_set_identifier",&obj0,&obj1,&obj2,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (bool)(arg1)->set_identifier((hk_string const &)*arg2,arg3,(hk_class::enum_interaction )arg4);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_identifier(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_visible_identifier",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((hk_visible const *)arg1)->identifier();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_type(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_visible_type",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->type();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_set_font__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_string *arg2 = 0 ;
    int arg3 ;
    bool arg4 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOi|O:hk_visible_set_font",&obj0,&obj1,&arg3,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj3) {
        arg4 = PyInt_AsLong(obj3) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_font((hk_string const &)*arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_set_font__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_string *arg2 = 0 ;
    int arg3 ;
    bool arg4 ;
    bool arg5 ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOiOO:hk_visible_set_font",&obj0,&obj1,&arg3,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    arg4 = PyInt_AsLong(obj3) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    arg5 = PyInt_AsLong(obj4) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->set_font((hk_string const &)*arg2,arg3,arg4,arg5);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_set_font__SWIG_2(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_font *arg2 = 0 ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_visible_set_font",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_font,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_font((hk_font const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_set_font__SWIG_3(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_font *arg2 = 0 ;
    bool arg3 ;
    bool arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:hk_visible_set_font",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_font,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    arg3 = PyInt_AsLong(obj2) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = PyInt_AsLong(obj3) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->set_font((hk_font const &)*arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_set_font(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[6];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 5); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if ((argc >= 2) && (argc <= 3)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_visible, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_hk_font, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                if (argc <= 2) {
                    return _wrap_hk_visible_set_font__SWIG_2(self,args);
                }
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_hk_visible_set_font__SWIG_2(self,args);
                }
            }
        }
    }
    if ((argc >= 3) && (argc <= 4)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_visible, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    if (argc <= 3) {
                        return _wrap_hk_visible_set_font__SWIG_0(self,args);
                    }
                    {
                        _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_hk_visible_set_font__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_visible, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_hk_font, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_hk_visible_set_font__SWIG_3(self,args);
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_visible, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            _v = (PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
                        }
                        if (_v) {
                            return _wrap_hk_visible_set_font__SWIG_1(self,args);
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'hk_visible_set_font'");
    return NULL;
}


static PyObject *_wrap_hk_visible_font(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_font result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_visible_font",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->font();
    
    {
        hk_font * resultptr;
        resultptr = new hk_font((hk_font &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_hk_font, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_set_foregroundcolour__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_colour *arg2 = 0 ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_visible_set_foregroundcolour",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_colour,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_foregroundcolour((hk_colour const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_set_foregroundcolour__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_colour *arg2 = 0 ;
    bool arg3 ;
    bool arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:hk_visible_set_foregroundcolour",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_colour,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    arg3 = PyInt_AsLong(obj2) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = PyInt_AsLong(obj3) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->set_foregroundcolour((hk_colour const &)*arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_set_foregroundcolour(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if ((argc >= 2) && (argc <= 3)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_visible, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_hk_colour, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                if (argc <= 2) {
                    return _wrap_hk_visible_set_foregroundcolour__SWIG_0(self,args);
                }
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_hk_visible_set_foregroundcolour__SWIG_0(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_visible, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_hk_colour, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_hk_visible_set_foregroundcolour__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'hk_visible_set_foregroundcolour'");
    return NULL;
}


static PyObject *_wrap_hk_visible_foregroundcolour(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_colour result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_visible_foregroundcolour",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->foregroundcolour();
    
    {
        hk_colour * resultptr;
        resultptr = new hk_colour((hk_colour &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_hk_colour, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_set_backgroundcolour__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_colour *arg2 = 0 ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_visible_set_backgroundcolour",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_colour,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_backgroundcolour((hk_colour const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_set_backgroundcolour__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_colour *arg2 = 0 ;
    bool arg3 ;
    bool arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:hk_visible_set_backgroundcolour",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_colour,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    arg3 = PyInt_AsLong(obj2) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = PyInt_AsLong(obj3) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->set_backgroundcolour((hk_colour const &)*arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_set_backgroundcolour(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if ((argc >= 2) && (argc <= 3)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_visible, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_hk_colour, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                if (argc <= 2) {
                    return _wrap_hk_visible_set_backgroundcolour__SWIG_0(self,args);
                }
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_hk_visible_set_backgroundcolour__SWIG_0(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_visible, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_hk_colour, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_hk_visible_set_backgroundcolour__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'hk_visible_set_backgroundcolour'");
    return NULL;
}


static PyObject *_wrap_hk_visible_backgroundcolour(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_colour result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_visible_backgroundcolour",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->backgroundcolour();
    
    {
        hk_colour * resultptr;
        resultptr = new hk_colour((hk_colour &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_hk_colour, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_set_neverregisterchange__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_visible_set_neverregisterchange",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->set_neverregisterchange(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_set_neverregisterchange__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    bool arg2 ;
    bool arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:hk_visible_set_neverregisterchange",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = PyInt_AsLong(obj2) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->set_neverregisterchange(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_set_neverregisterchange(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_visible, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_hk_visible_set_neverregisterchange__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_visible, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_hk_visible_set_neverregisterchange__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'hk_visible_set_neverregisterchange'");
    return NULL;
}


static PyObject *_wrap_hk_visible_neverregisterchange(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_visible_neverregisterchange",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->neverregisterchange();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_savedata(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    ostream *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_visible_savedata",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_ostream,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    (arg1)->savedata(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_loaddata(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    xmlNodePtr arg2 ;
    xmlNodePtr *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_visible_loaddata",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_xmlNodePtr,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    (arg1)->loaddata(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_presentationnumber(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_visible_presentationnumber",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (long)((hk_visible const *)arg1)->presentationnumber();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_set_datetimeformat__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_string *arg2 = 0 ;
    hk_string *arg3 = 0 ;
    hk_string *arg4 = 0 ;
    hk_string temp2 ;
    hk_string temp3 ;
    hk_string temp4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:hk_visible_set_datetimeformat",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    {
        if (PyString_Check(obj2)) {
            temp3 = hk_string(PyString_AsString(obj2));
            arg3 = &temp3;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    {
        if (PyString_Check(obj3)) {
            temp4 = hk_string(PyString_AsString(obj3));
            arg4 = &temp4;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    (arg1)->set_datetimeformat((hk_string const &)*arg2,(hk_string const &)*arg3,(hk_string const &)*arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_set_datetimeformat__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_string *arg2 = 0 ;
    hk_string *arg3 = 0 ;
    hk_string *arg4 = 0 ;
    bool arg5 ;
    hk_string temp2 ;
    hk_string temp3 ;
    hk_string temp4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:hk_visible_set_datetimeformat",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    {
        if (PyString_Check(obj2)) {
            temp3 = hk_string(PyString_AsString(obj2));
            arg3 = &temp3;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    {
        if (PyString_Check(obj3)) {
            temp4 = hk_string(PyString_AsString(obj3));
            arg4 = &temp4;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    arg5 = PyInt_AsLong(obj4) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->set_datetimeformat((hk_string const &)*arg2,(hk_string const &)*arg3,(hk_string const &)*arg4,arg5);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_set_datetimeformat(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[6];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 5); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_visible, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = PyString_Check(argv[2]) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = PyString_Check(argv[3]) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_hk_visible_set_datetimeformat__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_visible, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = PyString_Check(argv[2]) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = PyString_Check(argv[3]) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            _v = (PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
                        }
                        if (_v) {
                            return _wrap_hk_visible_set_datetimeformat__SWIG_1(self,args);
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'hk_visible_set_datetimeformat'");
    return NULL;
}


static PyObject *_wrap_hk_visible_datetimeformat(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_visible_datetimeformat",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->datetimeformat();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_dateformat(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_visible_dateformat",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->dateformat();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_timeformat(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_visible_timeformat",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->timeformat();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_set_counts_as__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    unsigned long arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_visible_set_counts_as",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned long) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->set_counts_as(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_set_counts_as__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    unsigned long arg2 ;
    bool arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:hk_visible_set_counts_as",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned long) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = PyInt_AsLong(obj2) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->set_counts_as(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_set_counts_as(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_visible, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_hk_visible_set_counts_as__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_visible, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_hk_visible_set_counts_as__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'hk_visible_set_counts_as'");
    return NULL;
}


static PyObject *_wrap_hk_visible_counts_as(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    unsigned long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_visible_counts_as",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (unsigned long)(arg1)->counts_as();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_replace(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_string *arg2 = 0 ;
    hk_string result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_visible_replace",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = (arg1)->replace((hk_string const &)*arg2);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_presentation(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_presentation *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_visible_presentation",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_presentation *)(arg1)->presentation();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_presentation, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_set_load_presentationnumber__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_visible_set_load_presentationnumber",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->set_load_presentationnumber(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_set_load_presentationnumber__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    bool arg2 ;
    bool arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:hk_visible_set_load_presentationnumber",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = PyInt_AsLong(obj2) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->set_load_presentationnumber(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_set_load_presentationnumber(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_visible, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_hk_visible_set_load_presentationnumber__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_visible, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_hk_visible_set_load_presentationnumber__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'hk_visible_set_load_presentationnumber'");
    return NULL;
}


static PyObject *_wrap_hk_visible_load_presentationnumber(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_visible_load_presentationnumber",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->load_presentationnumber();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_set_alignment__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    int arg2 ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi|O:hk_visible_set_alignment",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_alignment((hk_visible::alignmenttype )arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_set_alignment__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    int arg2 ;
    bool arg3 ;
    bool arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OiOO:hk_visible_set_alignment",&obj0,&arg2,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg3 = PyInt_AsLong(obj2) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = PyInt_AsLong(obj3) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->set_alignment((hk_visible::alignmenttype )arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_set_alignment(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if ((argc >= 2) && (argc <= 3)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_visible, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                if (argc <= 2) {
                    return _wrap_hk_visible_set_alignment__SWIG_0(self,args);
                }
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_hk_visible_set_alignment__SWIG_0(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_visible, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_hk_visible_set_alignment__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'hk_visible_set_alignment'");
    return NULL;
}


static PyObject *_wrap_hk_visible_alignment(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_visible_alignment",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->alignment();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_set_defaulttextalignment(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    
    if(!PyArg_ParseTuple(args,(char *)"i:hk_visible_set_defaulttextalignment",&arg1)) goto fail;
    hk_visible::set_defaulttextalignment((hk_visible::alignmenttype )arg1);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_defaulttextalignment(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int result;
    
    if(!PyArg_ParseTuple(args,(char *)":hk_visible_defaulttextalignment")) goto fail;
    result = (int)hk_visible::defaulttextalignment();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_set_defaultnumberalignment(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    
    if(!PyArg_ParseTuple(args,(char *)"i:hk_visible_set_defaultnumberalignment",&arg1)) goto fail;
    hk_visible::set_defaultnumberalignment((hk_visible::alignmenttype )arg1);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_defaultnumberalignment(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int result;
    
    if(!PyArg_ParseTuple(args,(char *)":hk_visible_defaultnumberalignment")) goto fail;
    result = (int)hk_visible::defaultnumberalignment();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_set_open_maximized_windows(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    bool arg1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_visible_set_open_maximized_windows",&obj0)) goto fail;
    arg1 = PyInt_AsLong(obj0) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    hk_visible::set_open_maximized_windows(arg1);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_open_maximized_windows(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    bool result;
    
    if(!PyArg_ParseTuple(args,(char *)":hk_visible_open_maximized_windows")) goto fail;
    result = (bool)hk_visible::open_maximized_windows();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_set_tooltip(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    bool arg4 = (bool) false ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|OO:hk_visible_set_tooltip",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj3) {
        arg4 = PyInt_AsLong(obj3) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_tooltip((hk_string const &)*arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_tooltip(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_visible_tooltip",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->tooltip();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_show_widget(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_visible_show_widget",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->show_widget();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_hide_widget(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_visible_hide_widget",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->hide_widget();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_close_widget(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_visible_close_widget",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->close_widget();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_lower_widget(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    bool arg2 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:hk_visible_lower_widget",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = PyInt_AsLong(obj1) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->lower_widget(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_raise_widget(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    bool arg2 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:hk_visible_raise_widget",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = PyInt_AsLong(obj1) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->raise_widget(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_set_on_click_action(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    bool arg4 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|OO:hk_visible_set_on_click_action",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj3) {
        arg4 = PyInt_AsLong(obj3) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_on_click_action((hk_string const &)*arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_on_click_action(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_visible_on_click_action",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->on_click_action();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_set_on_doubleclick_action(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    bool arg4 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|OO:hk_visible_set_on_doubleclick_action",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj3) {
        arg4 = PyInt_AsLong(obj3) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_on_doubleclick_action((hk_string const &)*arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_on_doubleclick_action(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_visible_on_doubleclick_action",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->on_doubleclick_action();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_set_on_open_action(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    bool arg4 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|OO:hk_visible_set_on_open_action",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj3) {
        arg4 = PyInt_AsLong(obj3) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_on_open_action((hk_string const &)*arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_on_open_action(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_visible_on_open_action",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->on_open_action();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_set_on_close_action(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    bool arg4 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|OO:hk_visible_set_on_close_action",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj3) {
        arg4 = PyInt_AsLong(obj3) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_on_close_action((hk_string const &)*arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_on_close_action(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_visible_on_close_action",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->on_close_action();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_set_on_getfocus_action(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    bool arg4 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|OO:hk_visible_set_on_getfocus_action",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj3) {
        arg4 = PyInt_AsLong(obj3) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_on_getfocus_action((hk_string const &)*arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_on_getfocus_action(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_visible_on_getfocus_action",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->on_getfocus_action();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_set_on_loosefocus_action(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    bool arg4 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|OO:hk_visible_set_on_loosefocus_action",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj3) {
        arg4 = PyInt_AsLong(obj3) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_on_loosefocus_action((hk_string const &)*arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_on_loosefocus_action(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_visible_on_loosefocus_action",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->on_loosefocus_action();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_set_on_key_action(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    bool arg4 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|OO:hk_visible_set_on_key_action",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj3) {
        arg4 = PyInt_AsLong(obj3) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_on_key_action((hk_string const &)*arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_on_key_action(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_visible_on_key_action",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->on_key_action();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_set_key(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_key *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_visible_set_key",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_key,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    (arg1)->set_key((hk_key const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_key(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_key *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_visible_key",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_key *)((hk_visible const *)arg1)->key();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_key, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_set_enabled(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    bool arg2 ;
    bool arg3 = (bool) true ;
    bool arg4 = (bool) false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|OO:hk_visible_set_enabled",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj3) {
        arg4 = PyInt_AsLong(obj3) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_enabled(arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_is_enabled(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_visible_is_enabled",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->is_enabled();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_action_on_click(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_visible_action_on_click",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->action_on_click();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_action_on_doubleclick(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_visible_action_on_doubleclick",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->action_on_doubleclick();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_action_on_close(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_visible_action_on_close",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->action_on_close();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_action_on_open(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_visible_action_on_open",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->action_on_open();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_action_on_getfocus(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_visible_action_on_getfocus",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->action_on_getfocus();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_action_on_loosefocus(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_visible_action_on_loosefocus",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->action_on_loosefocus();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_action_on_key(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_visible_action_on_key",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->action_on_key();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_in_tabvisible(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_visible_in_tabvisible",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((hk_visible const *)arg1)->in_tabvisible();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_set_buddylabel(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    long arg2 ;
    bool arg3 = (bool) true ;
    bool arg4 = (bool) false ;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Ol|OO:hk_visible_set_buddylabel",&obj0,&arg2,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj3) {
        arg4 = PyInt_AsLong(obj3) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_buddylabel(arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_buddylabel(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_visible_buddylabel",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (long)((hk_visible const *)arg1)->buddylabel();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_set_movebuddylabel(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_visible_set_movebuddylabel",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->set_movebuddylabel(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_move_buddylabel(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_visible_move_buddylabel",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((hk_visible const *)arg1)->move_buddylabel();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_tag_number(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_string *arg2 = 0 ;
    int result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_visible_tag_number",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = (int)(arg1)->tag_number((hk_string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_tag_value__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    int arg2 ;
    bool *arg3 = 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OiO:hk_visible_tag_value",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_bool,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (arg1)->tag_value(arg2,*arg3);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_column_value(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_string *arg2 = 0 ;
    bool *arg3 = 0 ;
    hk_string result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:hk_visible_column_value",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_bool,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (arg1)->column_value((hk_string const &)*arg2,*arg3);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_tag_value__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_string *arg2 = 0 ;
    bool *arg3 = 0 ;
    hk_string result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:hk_visible_tag_value",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_bool,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (arg1)->tag_value((hk_string const &)*arg2,*arg3);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_visible_tag_value(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_visible, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_bool, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_hk_visible_tag_value__SWIG_0(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_visible, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_bool, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_hk_visible_tag_value__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'hk_visible_tag_value'");
    return NULL;
}


static PyObject *_wrap_hk_visible_register_tag(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_string *arg2 = 0 ;
    int result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_visible_register_tag",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = (int)(arg1)->register_tag((hk_string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * hk_visible_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_hk_visible, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_currentvisible(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *result;
    
    if(!PyArg_ParseTuple(args,(char *)":currentvisible")) goto fail;
    result = (hk_visible *)currentvisible();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_visible, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cast_button(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_button *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cast_button",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_button *)cast_button(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_button, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cast_dslineedit(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_dslineedit *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cast_dslineedit",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_dslineedit *)cast_dslineedit(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_dslineedit, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cast_dsmemo(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_dsmemo *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cast_dsmemo",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_dsmemo *)cast_dsmemo(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_dsmemo, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cast_dsgrid(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_dsgrid *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cast_dsgrid",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_dsgrid *)cast_dsgrid(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_dsgrid, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cast_dscombobox(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_dscombobox *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cast_dscombobox",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_dscombobox *)cast_dscombobox(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_dscombobox, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cast_dsboolean(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_dsboolean *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cast_dsboolean",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_dsboolean *)cast_dsboolean(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_dsboolean, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cast_dsvisible(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_dsvisible *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cast_dsvisible",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_dsvisible *)cast_dsvisible(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_dsvisible, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cast_subform(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_subform *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cast_subform",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_subform *)cast_subform(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_subform, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cast_form(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_form *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cast_form",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_form *)cast_form(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_form, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cast_dsimage(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_dsimage *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cast_dsimage",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_dsimage *)cast_dsimage(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_dsimage, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cast_dsdate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_dsdate *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cast_dsdate",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_dsdate *)cast_dsdate(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_dsdate, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cast_report(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_visible *arg1 = (hk_visible *) 0 ;
    hk_report *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cast_report",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_report *)cast_report(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_report, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_hk_dsvisible(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_presentation *arg1 = (hk_presentation *) NULL ;
    hk_dsvisible *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"|O:new_hk_dsvisible",&obj0)) goto fail;
    if (obj0) {
        if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_presentation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    }
    result = (hk_dsvisible *)new hk_dsvisible(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_dsvisible, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_hk_dsvisible(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsvisible *arg1 = (hk_dsvisible *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_hk_dsvisible",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsvisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsvisible_set_datasource(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsvisible *arg1 = (hk_dsvisible *) 0 ;
    hk_datasource *arg2 = (hk_datasource *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_dsvisible_set_datasource",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsvisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->set_datasource(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsvisible_set_presentationdatasource(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsvisible *arg1 = (hk_dsvisible *) 0 ;
    long arg2 ;
    bool arg3 = (bool) true ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Ol|O:hk_dsvisible_set_presentationdatasource",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsvisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (bool)(arg1)->set_presentationdatasource(arg2,arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsvisible_presentationdatasource(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsvisible *arg1 = (hk_dsvisible *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsvisible_presentationdatasource",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsvisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (long)(arg1)->presentationdatasource();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsvisible_datasource(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsvisible *arg1 = (hk_dsvisible *) 0 ;
    hk_datasource *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsvisible_datasource",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsvisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_datasource *)(arg1)->datasource();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_datasource, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsvisible_savedata__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsvisible *arg1 = (hk_dsvisible *) 0 ;
    ostream *arg2 = 0 ;
    bool arg3 ;
    bool arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:hk_dsvisible_savedata",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsvisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_ostream,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    arg3 = PyInt_AsLong(obj2) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = PyInt_AsLong(obj3) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->savedata(*arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsvisible_savedata__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsvisible *arg1 = (hk_dsvisible *) 0 ;
    ostream *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_dsvisible_savedata",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsvisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_ostream,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    (arg1)->savedata(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsvisible_savedata(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_dsvisible, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_ostream, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_hk_dsvisible_savedata__SWIG_1(self,args);
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_dsvisible, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_ostream, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_hk_dsvisible_savedata__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'hk_dsvisible_savedata'");
    return NULL;
}


static PyObject *_wrap_hk_dsvisible_loaddata(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsvisible *arg1 = (hk_dsvisible *) 0 ;
    xmlNodePtr arg2 ;
    xmlNodePtr *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_dsvisible_loaddata",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsvisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_xmlNodePtr,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    (arg1)->loaddata(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsvisible_set_readonly(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsvisible *arg1 = (hk_dsvisible *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_dsvisible_set_readonly",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsvisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->set_readonly(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsvisible_is_readonly(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsvisible *arg1 = (hk_dsvisible *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsvisible_is_readonly",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsvisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((hk_dsvisible const *)arg1)->is_readonly();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsvisible_set_before_row_change_action(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsvisible *arg1 = (hk_dsvisible *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    bool arg4 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|OO:hk_dsvisible_set_before_row_change_action",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsvisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj3) {
        arg4 = PyInt_AsLong(obj3) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_before_row_change_action((hk_string const &)*arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsvisible_before_row_change_action(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsvisible *arg1 = (hk_dsvisible *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsvisible_before_row_change_action",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsvisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->before_row_change_action();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsvisible_set_after_row_change_action(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsvisible *arg1 = (hk_dsvisible *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    bool arg4 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|OO:hk_dsvisible_set_after_row_change_action",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsvisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj3) {
        arg4 = PyInt_AsLong(obj3) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_after_row_change_action((hk_string const &)*arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsvisible_after_row_change_action(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsvisible *arg1 = (hk_dsvisible *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsvisible_after_row_change_action",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsvisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->after_row_change_action();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsvisible_set_before_update_action(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsvisible *arg1 = (hk_dsvisible *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    bool arg4 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|OO:hk_dsvisible_set_before_update_action",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsvisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj3) {
        arg4 = PyInt_AsLong(obj3) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_before_update_action((hk_string const &)*arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsvisible_before_update_action(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsvisible *arg1 = (hk_dsvisible *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsvisible_before_update_action",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsvisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->before_update_action();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsvisible_set_after_update_action(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsvisible *arg1 = (hk_dsvisible *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    bool arg4 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|OO:hk_dsvisible_set_after_update_action",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsvisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj3) {
        arg4 = PyInt_AsLong(obj3) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_after_update_action((hk_string const &)*arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsvisible_after_update_action(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsvisible *arg1 = (hk_dsvisible *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsvisible_after_update_action",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsvisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->after_update_action();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsvisible_set_before_delete_action(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsvisible *arg1 = (hk_dsvisible *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    bool arg4 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|OO:hk_dsvisible_set_before_delete_action",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsvisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj3) {
        arg4 = PyInt_AsLong(obj3) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_before_delete_action((hk_string const &)*arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsvisible_before_delete_action(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsvisible *arg1 = (hk_dsvisible *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsvisible_before_delete_action",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsvisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->before_delete_action();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsvisible_set_after_delete_action(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsvisible *arg1 = (hk_dsvisible *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    bool arg4 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|OO:hk_dsvisible_set_after_delete_action",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsvisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj3) {
        arg4 = PyInt_AsLong(obj3) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_after_delete_action((hk_string const &)*arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsvisible_after_delete_action(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsvisible *arg1 = (hk_dsvisible *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsvisible_after_delete_action",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsvisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->after_delete_action();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsvisible_set_before_insert_action(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsvisible *arg1 = (hk_dsvisible *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    bool arg4 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|OO:hk_dsvisible_set_before_insert_action",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsvisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj3) {
        arg4 = PyInt_AsLong(obj3) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_before_insert_action((hk_string const &)*arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsvisible_before_insert_action(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsvisible *arg1 = (hk_dsvisible *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsvisible_before_insert_action",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsvisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->before_insert_action();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsvisible_set_after_insert_action(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsvisible *arg1 = (hk_dsvisible *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    bool arg4 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|OO:hk_dsvisible_set_after_insert_action",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsvisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj3) {
        arg4 = PyInt_AsLong(obj3) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_after_insert_action((hk_string const &)*arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsvisible_after_insert_action(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsvisible *arg1 = (hk_dsvisible *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsvisible_after_insert_action",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsvisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->after_insert_action();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsvisible_tag_value(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsvisible *arg1 = (hk_dsvisible *) 0 ;
    int arg2 ;
    bool *arg3 = 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OiO:hk_dsvisible_tag_value",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsvisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_bool,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (arg1)->tag_value(arg2,*arg3);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsvisible_action_before_store_changed_data(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsvisible *arg1 = (hk_dsvisible *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsvisible_action_before_store_changed_data",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsvisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->action_before_store_changed_data();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsvisible_action_after_store_changed_data(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsvisible *arg1 = (hk_dsvisible *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsvisible_action_after_store_changed_data",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsvisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->action_after_store_changed_data();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsvisible_action_before_row_change(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsvisible *arg1 = (hk_dsvisible *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsvisible_action_before_row_change",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsvisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->action_before_row_change();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsvisible_action_after_row_change(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsvisible *arg1 = (hk_dsvisible *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsvisible_action_after_row_change",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsvisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->action_after_row_change();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsvisible_action_before_delete(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsvisible *arg1 = (hk_dsvisible *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsvisible_action_before_delete",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsvisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->action_before_delete();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsvisible_action_after_delete(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsvisible *arg1 = (hk_dsvisible *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsvisible_action_after_delete",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsvisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->action_after_delete();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsvisible_action_before_insert(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsvisible *arg1 = (hk_dsvisible *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsvisible_action_before_insert",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsvisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->action_before_insert();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsvisible_action_after_insert(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsvisible *arg1 = (hk_dsvisible *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsvisible_action_after_insert",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsvisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->action_after_insert();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * hk_dsvisible_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_hk_dsvisible, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_currentdsvisible(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsvisible *result;
    
    if(!PyArg_ParseTuple(args,(char *)":currentdsvisible")) goto fail;
    result = (hk_dsvisible *)currentdsvisible();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_dsvisible, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_currentgrid(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgrid *result;
    
    if(!PyArg_ParseTuple(args,(char *)":currentgrid")) goto fail;
    result = (hk_dsgrid *)currentgrid();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_dsgrid, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_hk_dsdatavisible(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_presentation *arg1 = (hk_presentation *) NULL ;
    hk_dsdatavisible *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"|O:new_hk_dsdatavisible",&obj0)) goto fail;
    if (obj0) {
        if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_presentation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    }
    result = (hk_dsdatavisible *)new hk_dsdatavisible(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_dsdatavisible, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_hk_dsdatavisible(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsdatavisible *arg1 = (hk_dsdatavisible *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_hk_dsdatavisible",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsdatavisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsdatavisible_set_columnname__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsdatavisible *arg1 = (hk_dsdatavisible *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_dsdatavisible_set_columnname",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsdatavisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_columnname((hk_string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsdatavisible_set_columnname__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsdatavisible *arg1 = (hk_dsdatavisible *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 ;
    int arg4 ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOi:hk_dsdatavisible_set_columnname",&obj0,&obj1,&obj2,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsdatavisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    arg3 = PyInt_AsLong(obj2) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->set_columnname((hk_string const &)*arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsdatavisible_set_columnname(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if ((argc >= 2) && (argc <= 3)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_dsdatavisible, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                if (argc <= 2) {
                    return _wrap_hk_dsdatavisible_set_columnname__SWIG_0(self,args);
                }
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_hk_dsdatavisible_set_columnname__SWIG_0(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_dsdatavisible, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_hk_dsdatavisible_set_columnname__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'hk_dsdatavisible_set_columnname'");
    return NULL;
}


static PyObject *_wrap_hk_dsdatavisible_column(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsdatavisible *arg1 = (hk_dsdatavisible *) 0 ;
    hk_column *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsdatavisible_column",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsdatavisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_column *)(arg1)->column();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_column, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsdatavisible_columnname(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsdatavisible *arg1 = (hk_dsdatavisible *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsdatavisible_columnname",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsdatavisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((hk_dsdatavisible const *)arg1)->columnname();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsdatavisible_set_datasource(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsdatavisible *arg1 = (hk_dsdatavisible *) 0 ;
    hk_datasource *arg2 = (hk_datasource *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_dsdatavisible_set_datasource",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsdatavisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->set_datasource(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsdatavisible_datasource(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsdatavisible *arg1 = (hk_dsdatavisible *) 0 ;
    hk_datasource *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsdatavisible_datasource",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsdatavisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_datasource *)(arg1)->datasource();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_datasource, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsdatavisible_savedata(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsdatavisible *arg1 = (hk_dsdatavisible *) 0 ;
    ostream *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_dsdatavisible_savedata",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsdatavisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_ostream,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    (arg1)->savedata(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsdatavisible_loaddata(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsdatavisible *arg1 = (hk_dsdatavisible *) 0 ;
    xmlNodePtr arg2 ;
    xmlNodePtr *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_dsdatavisible_loaddata",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsdatavisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_xmlNodePtr,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    (arg1)->loaddata(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsdatavisible_use_defaultvalue(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsdatavisible *arg1 = (hk_dsdatavisible *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsdatavisible_use_defaultvalue",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsdatavisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->use_defaultvalue();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsdatavisible_set_defaultvalue(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsdatavisible *arg1 = (hk_dsdatavisible *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_dsdatavisible_set_defaultvalue",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsdatavisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_defaultvalue((hk_string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsdatavisible_raw_defaultvalue(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsdatavisible *arg1 = (hk_dsdatavisible *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsdatavisible_raw_defaultvalue",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsdatavisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->raw_defaultvalue();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsdatavisible_defaultvalue(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsdatavisible *arg1 = (hk_dsdatavisible *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsdatavisible_defaultvalue",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsdatavisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->defaultvalue();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsdatavisible_reset_default(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsdatavisible *arg1 = (hk_dsdatavisible *) 0 ;
    bool arg2 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:hk_dsdatavisible_reset_default",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsdatavisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = PyInt_AsLong(obj1) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->reset_default(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsdatavisible_set_numberformat__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsdatavisible *arg1 = (hk_dsdatavisible *) 0 ;
    bool arg2 = (bool) false ;
    int arg3 = (int) -1 ;
    bool arg4 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|OiO:hk_dsdatavisible_set_numberformat",&obj0,&obj1,&arg3,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsdatavisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = PyInt_AsLong(obj1) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj3) {
        arg4 = PyInt_AsLong(obj3) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_numberformat(arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsdatavisible_set_numberformat__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsdatavisible *arg1 = (hk_dsdatavisible *) 0 ;
    bool arg2 ;
    int arg3 ;
    bool arg4 ;
    bool arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOiOO:hk_dsdatavisible_set_numberformat",&obj0,&obj1,&arg3,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsdatavisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = PyInt_AsLong(obj3) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    arg5 = PyInt_AsLong(obj4) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->set_numberformat(arg2,arg3,arg4,arg5);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsdatavisible_set_numberformat(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[6];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 5); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if ((argc >= 1) && (argc <= 4)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_dsdatavisible, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            if (argc <= 1) {
                return _wrap_hk_dsdatavisible_set_numberformat__SWIG_0(self,args);
            }
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                if (argc <= 2) {
                    return _wrap_hk_dsdatavisible_set_numberformat__SWIG_0(self,args);
                }
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    if (argc <= 3) {
                        return _wrap_hk_dsdatavisible_set_numberformat__SWIG_0(self,args);
                    }
                    {
                        _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_hk_dsdatavisible_set_numberformat__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_dsdatavisible, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            _v = (PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
                        }
                        if (_v) {
                            return _wrap_hk_dsdatavisible_set_numberformat__SWIG_1(self,args);
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'hk_dsdatavisible_set_numberformat'");
    return NULL;
}


static PyObject *_wrap_hk_dsdatavisible_use_numberseparator(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsdatavisible *arg1 = (hk_dsdatavisible *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsdatavisible_use_numberseparator",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsdatavisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->use_numberseparator();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsdatavisible_commadigits(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsdatavisible *arg1 = (hk_dsdatavisible *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsdatavisible_commadigits",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsdatavisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->commadigits();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsdatavisible_precision(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsdatavisible *arg1 = (hk_dsdatavisible *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsdatavisible_precision",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsdatavisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->precision();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsdatavisible_set_defaultnumberformat(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    bool arg1 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:hk_dsdatavisible_set_defaultnumberformat",&obj0,&arg2)) goto fail;
    arg1 = PyInt_AsLong(obj0) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    hk_dsdatavisible::set_defaultnumberformat(arg1,arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsdatavisible_defaultuse_numberseparator(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    bool result;
    
    if(!PyArg_ParseTuple(args,(char *)":hk_dsdatavisible_defaultuse_numberseparator")) goto fail;
    result = (bool)hk_dsdatavisible::defaultuse_numberseparator();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsdatavisible_defaultprecision(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int result;
    
    if(!PyArg_ParseTuple(args,(char *)":hk_dsdatavisible_defaultprecision")) goto fail;
    result = (int)hk_dsdatavisible::defaultprecision();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsdatavisible_value_at(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsdatavisible *arg1 = (hk_dsdatavisible *) 0 ;
    unsigned long arg2 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_dsdatavisible_value_at",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsdatavisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned long) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    result = (arg1)->value_at(arg2);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsdatavisible_value(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsdatavisible *arg1 = (hk_dsdatavisible *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsdatavisible_value",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsdatavisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->value();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsdatavisible_set_value(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsdatavisible *arg1 = (hk_dsdatavisible *) 0 ;
    hk_string *arg2 = 0 ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_dsdatavisible_set_value",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsdatavisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    (arg1)->set_value((hk_string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsdatavisible_find__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsdatavisible *arg1 = (hk_dsdatavisible *) 0 ;
    unsigned int arg2 ;
    unsigned int arg3 ;
    hk_string *arg4 = 0 ;
    bool arg5 = (bool) false ;
    bool arg6 = (bool) false ;
    bool arg7 = (bool) false ;
    unsigned int result;
    hk_string temp4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO|OOO:hk_dsdatavisible_find",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsdatavisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (unsigned int) PyInt_AsLong(obj2);
    if (PyErr_Occurred()) SWIG_fail;
    {
        if (PyString_Check(obj3)) {
            temp4 = hk_string(PyString_AsString(obj3));
            arg4 = &temp4;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj4) {
        arg5 = PyInt_AsLong(obj4) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj5) {
        arg6 = PyInt_AsLong(obj5) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj6) {
        arg7 = PyInt_AsLong(obj6) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (unsigned int)(arg1)->find(arg2,arg3,(hk_string const &)*arg4,arg5,arg6,arg7);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsdatavisible_find__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsdatavisible *arg1 = (hk_dsdatavisible *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) false ;
    bool arg4 = (bool) false ;
    bool arg5 = (bool) false ;
    unsigned int result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|OOO:hk_dsdatavisible_find",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsdatavisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj3) {
        arg4 = PyInt_AsLong(obj3) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj4) {
        arg5 = PyInt_AsLong(obj4) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (unsigned int)(arg1)->find((hk_string const &)*arg2,arg3,arg4,arg5);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsdatavisible_find(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[8];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 7); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if ((argc >= 2) && (argc <= 5)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_dsdatavisible, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                if (argc <= 2) {
                    return _wrap_hk_dsdatavisible_find__SWIG_1(self,args);
                }
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    if (argc <= 3) {
                        return _wrap_hk_dsdatavisible_find__SWIG_1(self,args);
                    }
                    {
                        _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        if (argc <= 4) {
                            return _wrap_hk_dsdatavisible_find__SWIG_1(self,args);
                        }
                        {
                            _v = (PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
                        }
                        if (_v) {
                            return _wrap_hk_dsdatavisible_find__SWIG_1(self,args);
                        }
                    }
                }
            }
        }
    }
    if ((argc >= 4) && (argc <= 7)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_dsdatavisible, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = PyString_Check(argv[3]) ? 1 : 0;
                    }
                    if (_v) {
                        if (argc <= 4) {
                            return _wrap_hk_dsdatavisible_find__SWIG_0(self,args);
                        }
                        {
                            _v = (PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
                        }
                        if (_v) {
                            if (argc <= 5) {
                                return _wrap_hk_dsdatavisible_find__SWIG_0(self,args);
                            }
                            {
                                _v = (PyInt_Check(argv[5]) || PyLong_Check(argv[5])) ? 1 : 0;
                            }
                            if (_v) {
                                if (argc <= 6) {
                                    return _wrap_hk_dsdatavisible_find__SWIG_0(self,args);
                                }
                                {
                                    _v = (PyInt_Check(argv[6]) || PyLong_Check(argv[6])) ? 1 : 0;
                                }
                                if (_v) {
                                    return _wrap_hk_dsdatavisible_find__SWIG_0(self,args);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'hk_dsdatavisible_find'");
    return NULL;
}


static PyObject *_wrap_hk_dsdatavisible_set_on_valuechanged_action(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsdatavisible *arg1 = (hk_dsdatavisible *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    bool arg4 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|OO:hk_dsdatavisible_set_on_valuechanged_action",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsdatavisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj3) {
        arg4 = PyInt_AsLong(obj3) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_on_valuechanged_action((hk_string const &)*arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsdatavisible_on_valuechanged_action(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsdatavisible *arg1 = (hk_dsdatavisible *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsdatavisible_on_valuechanged_action",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsdatavisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->on_valuechanged_action();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsdatavisible_action_on_valuechanged(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsdatavisible *arg1 = (hk_dsdatavisible *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsdatavisible_action_on_valuechanged",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsdatavisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->action_on_valuechanged();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsdatavisible_tag_value(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsdatavisible *arg1 = (hk_dsdatavisible *) 0 ;
    int arg2 ;
    bool *arg3 = 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OiO:hk_dsdatavisible_tag_value",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsdatavisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_bool,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (arg1)->tag_value(arg2,*arg3);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsdatavisible_set_filtervalue(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsdatavisible *arg1 = (hk_dsdatavisible *) 0 ;
    hk_string *arg2 = 0 ;
    bool result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_dsdatavisible_set_filtervalue",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsdatavisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = (bool)(arg1)->set_filtervalue((hk_string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsdatavisible_filtervalue(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsdatavisible *arg1 = (hk_dsdatavisible *) 0 ;
    bool arg2 = (bool) false ;
    hk_string result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:hk_dsdatavisible_filtervalue",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsdatavisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = PyInt_AsLong(obj1) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = ((hk_dsdatavisible const *)arg1)->filtervalue(arg2);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsdatavisible_parsed_value(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    hk_connection *arg2 = (hk_connection *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_dsdatavisible_parsed_value",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_string,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_connection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)hk_dsdatavisible::parsed_value(*arg1,arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsdatavisible_update_filter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsdatavisible *arg1 = (hk_dsdatavisible *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsdatavisible_update_filter",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsdatavisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->update_filter();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * hk_dsdatavisible_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_hk_dsdatavisible, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_hk_dslineedit(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *arg1 = (hk_form *) NULL ;
    hk_dslineedit *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"|O:new_hk_dslineedit",&obj0)) goto fail;
    if (obj0) {
        if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    }
    result = (hk_dslineedit *)new hk_dslineedit(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_dslineedit, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_hk_dslineedit(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dslineedit *arg1 = (hk_dslineedit *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_hk_dslineedit",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dslineedit,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dslineedit_set_gridcolumn(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dslineedit *arg1 = (hk_dslineedit *) 0 ;
    hk_dsgridcolumn *arg2 = (hk_dsgridcolumn *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_dslineedit_set_gridcolumn",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dslineedit,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_dsgridcolumn,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->set_gridcolumn(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dslineedit_gridcolumn(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dslineedit *arg1 = (hk_dslineedit *) 0 ;
    hk_dsgridcolumn *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dslineedit_gridcolumn",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dslineedit,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_dsgridcolumn *)((hk_dslineedit const *)arg1)->gridcolumn();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_dsgridcolumn, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * hk_dslineedit_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_hk_dslineedit, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_hk_dsmemo(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *arg1 = (hk_form *) NULL ;
    hk_dsmemo *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"|O:new_hk_dsmemo",&obj0)) goto fail;
    if (obj0) {
        if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    }
    result = (hk_dsmemo *)new hk_dsmemo(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_dsmemo, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsmemo_set_gridcolumn(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsmemo *arg1 = (hk_dsmemo *) 0 ;
    hk_dsgridcolumn *arg2 = (hk_dsgridcolumn *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_dsmemo_set_gridcolumn",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsmemo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_dsgridcolumn,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->set_gridcolumn(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsmemo_gridcolumn(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsmemo *arg1 = (hk_dsmemo *) 0 ;
    hk_dsgridcolumn *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsmemo_gridcolumn",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsmemo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_dsgridcolumn *)((hk_dsmemo const *)arg1)->gridcolumn();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_dsgridcolumn, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_hk_dsmemo(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsmemo *arg1 = (hk_dsmemo *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_hk_dsmemo",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsmemo,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * hk_dsmemo_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_hk_dsmemo, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_hk_dsboolean(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *arg1 = (hk_form *) NULL ;
    hk_dsboolean *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"|O:new_hk_dsboolean",&obj0)) goto fail;
    if (obj0) {
        if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    }
    result = (hk_dsboolean *)new hk_dsboolean(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_dsboolean, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsboolean_set_gridcolumn(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsboolean *arg1 = (hk_dsboolean *) 0 ;
    hk_dsgridcolumn *arg2 = (hk_dsgridcolumn *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_dsboolean_set_gridcolumn",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsboolean,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_dsgridcolumn,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->set_gridcolumn(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsboolean_gridcolumn(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsboolean *arg1 = (hk_dsboolean *) 0 ;
    hk_dsgridcolumn *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsboolean_gridcolumn",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsboolean,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_dsgridcolumn *)((hk_dsboolean const *)arg1)->gridcolumn();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_dsgridcolumn, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_hk_dsboolean(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsboolean *arg1 = (hk_dsboolean *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_hk_dsboolean",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsboolean,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * hk_dsboolean_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_hk_dsboolean, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_hk_dsdate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *arg1 = (hk_form *) NULL ;
    hk_dsdate *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"|O:new_hk_dsdate",&obj0)) goto fail;
    if (obj0) {
        if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    }
    result = (hk_dsdate *)new hk_dsdate(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_dsdate, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_hk_dsdate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsdate *arg1 = (hk_dsdate *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_hk_dsdate",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsdate,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * hk_dsdate_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_hk_dsdate, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_hk_dsimage(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *arg1 = (hk_form *) NULL ;
    hk_dsimage *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"|O:new_hk_dsimage",&obj0)) goto fail;
    if (obj0) {
        if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    }
    result = (hk_dsimage *)new hk_dsimage(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_dsimage, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_hk_dsimage(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsimage *arg1 = (hk_dsimage *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_hk_dsimage",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsimage,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsimage_set_path__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsimage *arg1 = (hk_dsimage *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_dsimage_set_path",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsimage,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_path((hk_string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsimage_set_path__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsimage *arg1 = (hk_dsimage *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 ;
    bool arg4 ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:hk_dsimage_set_path",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsimage,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    arg3 = PyInt_AsLong(obj2) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = PyInt_AsLong(obj3) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->set_path((hk_string const &)*arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsimage_set_path(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if ((argc >= 2) && (argc <= 3)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_dsimage, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                if (argc <= 2) {
                    return _wrap_hk_dsimage_set_path__SWIG_0(self,args);
                }
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_hk_dsimage_set_path__SWIG_0(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_dsimage, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_hk_dsimage_set_path__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'hk_dsimage_set_path'");
    return NULL;
}


static PyObject *_wrap_hk_dsimage_path(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsimage *arg1 = (hk_dsimage *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsimage_path",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsimage,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((hk_dsimage const *)arg1)->path();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsimage_savedata(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsimage *arg1 = (hk_dsimage *) 0 ;
    ostream *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_dsimage_savedata",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsimage,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_ostream,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    (arg1)->savedata(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsimage_loaddata(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsimage *arg1 = (hk_dsimage *) 0 ;
    xmlNodePtr arg2 ;
    xmlNodePtr *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_dsimage_loaddata",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsimage,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_xmlNodePtr,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    (arg1)->loaddata(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsimage_set_value(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsimage *arg1 = (hk_dsimage *) 0 ;
    hk_string *arg2 = 0 ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_dsimage_set_value",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsimage,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    (arg1)->set_value((hk_string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsimage_value(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsimage *arg1 = (hk_dsimage *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsimage_value",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsimage,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->value();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsimage_value_at(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsimage *arg1 = (hk_dsimage *) 0 ;
    unsigned long arg2 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_dsimage_value_at",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsimage,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned long) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    result = (arg1)->value_at(arg2);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsimage_set_zoom__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsimage *arg1 = (hk_dsimage *) 0 ;
    int arg2 ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi|O:hk_dsimage_set_zoom",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsimage,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_zoom(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsimage_set_zoom__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsimage *arg1 = (hk_dsimage *) 0 ;
    int arg2 ;
    bool arg3 ;
    bool arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OiOO:hk_dsimage_set_zoom",&obj0,&arg2,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsimage,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg3 = PyInt_AsLong(obj2) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = PyInt_AsLong(obj3) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->set_zoom(arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsimage_set_zoom(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if ((argc >= 2) && (argc <= 3)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_dsimage, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                if (argc <= 2) {
                    return _wrap_hk_dsimage_set_zoom__SWIG_0(self,args);
                }
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_hk_dsimage_set_zoom__SWIG_0(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_dsimage, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_hk_dsimage_set_zoom__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'hk_dsimage_set_zoom'");
    return NULL;
}


static PyObject *_wrap_hk_dsimage_zoom(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsimage *arg1 = (hk_dsimage *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsimage_zoom",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsimage,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)((hk_dsimage const *)arg1)->zoom();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsimage_load_localimage(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsimage *arg1 = (hk_dsimage *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    bool result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_dsimage_load_localimage",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsimage,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (bool)(arg1)->load_localimage((hk_string const &)*arg2,arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsimage_localimage(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsimage *arg1 = (hk_dsimage *) 0 ;
    struct_raw_data *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsimage_localimage",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsimage,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (struct_raw_data *)(arg1)->localimage();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_struct_raw_data, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsimage_show_image(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsimage *arg1 = (hk_dsimage *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsimage_show_image",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsimage,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->show_image();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsimage_get_postscript_image__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    hk_string *arg2 = 0 ;
    bool result;
    hk_string temp1 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_dsimage_get_postscript_image",&obj0,&obj1)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = hk_string(PyString_AsString(obj0));
            arg1 = &temp1;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_string,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (bool)hk_dsimage::get_postscript_image((hk_string const &)*arg1,*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsimage_get_postscript_image__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct_raw_data *arg1 = (struct_raw_data *) 0 ;
    hk_string *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_dsimage_get_postscript_image",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_struct_raw_data,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_string,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (bool)hk_dsimage::get_postscript_image((struct_raw_data const *)arg1,*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsimage_get_postscript_image(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_struct_raw_data, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_hk_string, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_hk_dsimage_get_postscript_image__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = PyString_Check(argv[0]) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_hk_string, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_hk_dsimage_get_postscript_image__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'hk_dsimage_get_postscript_image'");
    return NULL;
}


static PyObject *_wrap_hk_dsimage_add_postscriptimagetype(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    psimagedatatype *arg2 = (psimagedatatype *) 0 ;
    hk_string temp1 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_dsimage_add_postscriptimagetype",&obj0,&obj1)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = hk_string(PyString_AsString(obj0));
            arg1 = &temp1;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_psimagedatatype,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    hk_dsimage::add_postscriptimagetype((hk_string const &)*arg1,arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * hk_dsimage_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_hk_dsimage, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_currentlineedit(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dslineedit *result;
    
    if(!PyArg_ParseTuple(args,(char *)":currentlineedit")) goto fail;
    result = (hk_dslineedit *)currentlineedit();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_dslineedit, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_currentboolean(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsboolean *result;
    
    if(!PyArg_ParseTuple(args,(char *)":currentboolean")) goto fail;
    result = (hk_dsboolean *)currentboolean();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_dsboolean, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_currentcombobox(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dscombobox *result;
    
    if(!PyArg_ParseTuple(args,(char *)":currentcombobox")) goto fail;
    result = (hk_dscombobox *)currentcombobox();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_dscombobox, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_currentmemo(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsmemo *result;
    
    if(!PyArg_ParseTuple(args,(char *)":currentmemo")) goto fail;
    result = (hk_dsmemo *)currentmemo();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_dsmemo, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_currentgridcolumn(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgridcolumn *result;
    
    if(!PyArg_ParseTuple(args,(char *)":currentgridcolumn")) goto fail;
    result = (hk_dsgridcolumn *)currentgridcolumn();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_dsgridcolumn, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_currentdsimage(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsimage *result;
    
    if(!PyArg_ParseTuple(args,(char *)":currentdsimage")) goto fail;
    result = (hk_dsimage *)currentdsimage();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_dsimage, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_currentdsdate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsdate *result;
    
    if(!PyArg_ParseTuple(args,(char *)":currentdsdate")) goto fail;
    result = (hk_dsdate *)currentdsdate();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_dsdate, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_hk_font__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_font *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_hk_font")) goto fail;
    result = (hk_font *)new hk_font();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_font, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_hk_font__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    int arg2 ;
    hk_font *result;
    hk_string temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:new_hk_font",&obj0,&arg2)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = hk_string(PyString_AsString(obj0));
            arg1 = &temp1;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = (hk_font *)new hk_font((hk_string const &)*arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_font, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_hk_font__SWIG_2(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_font *arg1 = 0 ;
    hk_font *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_hk_font",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_font,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (hk_font *)new hk_font((hk_font const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_font, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_hk_font(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_hk_font__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_font, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_hk_font__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = PyString_Check(argv[0]) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_new_hk_font__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_hk_font'");
    return NULL;
}


static PyObject *_wrap_hk_font_set_font__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_font *arg1 = (hk_font *) 0 ;
    hk_string *arg2 = 0 ;
    int arg3 ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOi:hk_font_set_font",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_font,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    (arg1)->set_font((hk_string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_font_set_font__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_font *arg1 = (hk_font *) 0 ;
    hk_font *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_font_set_font",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_font,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_font,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    (arg1)->set_font((hk_font const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_font_set_font(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_font, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_hk_font, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_hk_font_set_font__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_font, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_hk_font_set_font__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'hk_font_set_font'");
    return NULL;
}


static PyObject *_wrap_hk_font_fontname(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_font *arg1 = (hk_font *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_font_fontname",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_font,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((hk_font const *)arg1)->fontname();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_font_fontsize(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_font *arg1 = (hk_font *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_font_fontsize",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_font,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)((hk_font const *)arg1)->fontsize();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_font_set_bold(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_font *arg1 = (hk_font *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_font_set_bold",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_font,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->set_bold(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_font_bold(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_font *arg1 = (hk_font *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_font_bold",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_font,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((hk_font const *)arg1)->bold();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_font_set_italic(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_font *arg1 = (hk_font *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_font_set_italic",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_font,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->set_italic(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_font_italic(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_font *arg1 = (hk_font *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_font_italic",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_font,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((hk_font const *)arg1)->italic();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_font_psfontname(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_font *arg1 = (hk_font *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_font_psfontname",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_font,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->psfontname();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_font_fontfile(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_font *arg1 = (hk_font *) 0 ;
    hk_url result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_font_fontfile",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_font,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->fontfile();
    
    {
        hk_url * resultptr;
        resultptr = new hk_url((hk_url &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_hk_url, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_font_char_ascender_size(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_font *arg1 = (hk_font *) 0 ;
    HK_CHARSIZE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_font_char_ascender_size",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_font,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->char_ascender_size();
    
    {
        HK_CHARSIZE * resultptr;
        resultptr = new HK_CHARSIZE((HK_CHARSIZE &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_HK_CHARSIZE, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_font_char_descender_size(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_font *arg1 = (hk_font *) 0 ;
    HK_CHARSIZE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_font_char_descender_size",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_font,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->char_descender_size();
    
    {
        HK_CHARSIZE * resultptr;
        resultptr = new HK_CHARSIZE((HK_CHARSIZE &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_HK_CHARSIZE, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_font_set_defaultfont(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    int arg2 ;
    hk_string temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:hk_font_set_defaultfont",&obj0,&arg2)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = hk_string(PyString_AsString(obj0));
            arg1 = &temp1;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    hk_font::set_defaultfont((hk_string const &)*arg1,arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_font_defaultfontname(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string result;
    
    if(!PyArg_ParseTuple(args,(char *)":hk_font_defaultfontname")) goto fail;
    result = hk_font::defaultfontname();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_font_defaultfontsize(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int result;
    
    if(!PyArg_ParseTuple(args,(char *)":hk_font_defaultfontsize")) goto fail;
    result = (int)hk_font::defaultfontsize();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_font_fontlist(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    list<hk_string > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":hk_font_fontlist")) goto fail;
    result = (list<hk_string > *)hk_font::fontlist();
    
    {
        int s=result->size();
        resultobj=PyList_New(s);
        list<hk_string>::iterator it=result->begin();
        int i=0;
        while (it!=result->end())
        {
            PyObject* o= PyString_FromString((*it).c_str());
            PyList_SetItem(resultobj,i,o);
            ++it;
            ++i;
        }
        
        
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_hk_font(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_font *arg1 = (hk_font *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_hk_font",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_font,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * hk_font_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_hk_font, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_hk_colour__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_colour *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_hk_colour")) goto fail;
    result = (hk_colour *)new hk_colour();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_colour, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_hk_colour__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_colour::hk_colourtype arg1 ;
    hk_colour::hk_colourtype arg2 ;
    hk_colour::hk_colourtype arg3 ;
    hk_colour *result;
    
    if(!PyArg_ParseTuple(args,(char *)"iii:new_hk_colour",&arg1,&arg2,&arg3)) goto fail;
    result = (hk_colour *)new hk_colour(arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_colour, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_hk_colour__SWIG_2(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_colour *arg1 = 0 ;
    hk_colour *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_hk_colour",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_colour,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (hk_colour *)new hk_colour((hk_colour const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_colour, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_hk_colour(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_hk_colour__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_colour, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_hk_colour__SWIG_2(self,args);
        }
    }
    if (argc == 3) {
        int _v;
        {
            _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_new_hk_colour__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_hk_colour'");
    return NULL;
}


static PyObject *_wrap_delete_hk_colour(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_colour *arg1 = (hk_colour *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_hk_colour",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_colour,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_colour_set_colour(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_colour *arg1 = (hk_colour *) 0 ;
    hk_colour::hk_colourtype arg2 ;
    hk_colour::hk_colourtype arg3 ;
    hk_colour::hk_colourtype arg4 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oiii:hk_colour_set_colour",&obj0,&arg2,&arg3,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_colour,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->set_colour(arg2,arg3,arg4);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_colour_red(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_colour *arg1 = (hk_colour *) 0 ;
    hk_colour::hk_colourtype result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_colour_red",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_colour,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_colour::hk_colourtype)((hk_colour const *)arg1)->red();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_colour_green(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_colour *arg1 = (hk_colour *) 0 ;
    hk_colour::hk_colourtype result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_colour_green",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_colour,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_colour::hk_colourtype)((hk_colour const *)arg1)->green();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_colour_blue(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_colour *arg1 = (hk_colour *) 0 ;
    hk_colour::hk_colourtype result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_colour_blue",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_colour,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_colour::hk_colourtype)((hk_colour const *)arg1)->blue();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * hk_colour_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_hk_colour, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_hk_aqua_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable hk_aqua is read-only.");
    return 1;
}


static PyObject *_wrap_hk_aqua_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) &hk_aqua, SWIGTYPE_p_hk_colour, 0);
    return pyobj;
}


static int _wrap_hk_beige_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable hk_beige is read-only.");
    return 1;
}


static PyObject *_wrap_hk_beige_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) &hk_beige, SWIGTYPE_p_hk_colour, 0);
    return pyobj;
}


static int _wrap_hk_black_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable hk_black is read-only.");
    return 1;
}


static PyObject *_wrap_hk_black_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) &hk_black, SWIGTYPE_p_hk_colour, 0);
    return pyobj;
}


static int _wrap_hk_blue_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable hk_blue is read-only.");
    return 1;
}


static PyObject *_wrap_hk_blue_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) &hk_blue, SWIGTYPE_p_hk_colour, 0);
    return pyobj;
}


static int _wrap_hk_brown_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable hk_brown is read-only.");
    return 1;
}


static PyObject *_wrap_hk_brown_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) &hk_brown, SWIGTYPE_p_hk_colour, 0);
    return pyobj;
}


static int _wrap_hk_fuchsia_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable hk_fuchsia is read-only.");
    return 1;
}


static PyObject *_wrap_hk_fuchsia_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) &hk_fuchsia, SWIGTYPE_p_hk_colour, 0);
    return pyobj;
}


static int _wrap_hk_darkgrey_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable hk_darkgrey is read-only.");
    return 1;
}


static PyObject *_wrap_hk_darkgrey_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) &hk_darkgrey, SWIGTYPE_p_hk_colour, 0);
    return pyobj;
}


static int _wrap_hk_darkyellow_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable hk_darkyellow is read-only.");
    return 1;
}


static PyObject *_wrap_hk_darkyellow_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) &hk_darkyellow, SWIGTYPE_p_hk_colour, 0);
    return pyobj;
}


static int _wrap_hk_green_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable hk_green is read-only.");
    return 1;
}


static PyObject *_wrap_hk_green_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) &hk_green, SWIGTYPE_p_hk_colour, 0);
    return pyobj;
}


static int _wrap_hk_grey_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable hk_grey is read-only.");
    return 1;
}


static PyObject *_wrap_hk_grey_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) &hk_grey, SWIGTYPE_p_hk_colour, 0);
    return pyobj;
}


static int _wrap_hk_lightgrey_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable hk_lightgrey is read-only.");
    return 1;
}


static PyObject *_wrap_hk_lightgrey_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) &hk_lightgrey, SWIGTYPE_p_hk_colour, 0);
    return pyobj;
}


static int _wrap_hk_lime_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable hk_lime is read-only.");
    return 1;
}


static PyObject *_wrap_hk_lime_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) &hk_lime, SWIGTYPE_p_hk_colour, 0);
    return pyobj;
}


static int _wrap_hk_maroon_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable hk_maroon is read-only.");
    return 1;
}


static PyObject *_wrap_hk_maroon_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) &hk_maroon, SWIGTYPE_p_hk_colour, 0);
    return pyobj;
}


static int _wrap_hk_navy_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable hk_navy is read-only.");
    return 1;
}


static PyObject *_wrap_hk_navy_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) &hk_navy, SWIGTYPE_p_hk_colour, 0);
    return pyobj;
}


static int _wrap_hk_olive_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable hk_olive is read-only.");
    return 1;
}


static PyObject *_wrap_hk_olive_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) &hk_olive, SWIGTYPE_p_hk_colour, 0);
    return pyobj;
}


static int _wrap_hk_orange_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable hk_orange is read-only.");
    return 1;
}


static PyObject *_wrap_hk_orange_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) &hk_orange, SWIGTYPE_p_hk_colour, 0);
    return pyobj;
}


static int _wrap_hk_pink_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable hk_pink is read-only.");
    return 1;
}


static PyObject *_wrap_hk_pink_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) &hk_pink, SWIGTYPE_p_hk_colour, 0);
    return pyobj;
}


static int _wrap_hk_purple_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable hk_purple is read-only.");
    return 1;
}


static PyObject *_wrap_hk_purple_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) &hk_purple, SWIGTYPE_p_hk_colour, 0);
    return pyobj;
}


static int _wrap_hk_red_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable hk_red is read-only.");
    return 1;
}


static PyObject *_wrap_hk_red_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) &hk_red, SWIGTYPE_p_hk_colour, 0);
    return pyobj;
}


static int _wrap_hk_silver_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable hk_silver is read-only.");
    return 1;
}


static PyObject *_wrap_hk_silver_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) &hk_silver, SWIGTYPE_p_hk_colour, 0);
    return pyobj;
}


static int _wrap_hk_teal_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable hk_teal is read-only.");
    return 1;
}


static PyObject *_wrap_hk_teal_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) &hk_teal, SWIGTYPE_p_hk_colour, 0);
    return pyobj;
}


static int _wrap_hk_white_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable hk_white is read-only.");
    return 1;
}


static PyObject *_wrap_hk_white_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) &hk_white, SWIGTYPE_p_hk_colour, 0);
    return pyobj;
}


static int _wrap_hk_yellow_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable hk_yellow is read-only.");
    return 1;
}


static PyObject *_wrap_hk_yellow_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) &hk_yellow, SWIGTYPE_p_hk_colour, 0);
    return pyobj;
}


static PyObject *_wrap_new_hk_key__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    int arg2 ;
    hk_string *arg3 = 0 ;
    hk_key *result;
    hk_string temp3 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"iiO:new_hk_key",&arg1,&arg2,&obj2)) goto fail;
    {
        if (PyString_Check(obj2)) {
            temp3 = hk_string(PyString_AsString(obj2));
            arg3 = &temp3;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = (hk_key *)new hk_key(arg1,arg2,(hk_string const &)*arg3);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_key, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_hk_key__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_key *arg1 = 0 ;
    hk_key *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_hk_key",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_key,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (hk_key *)new hk_key((hk_key const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_key, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_hk_key(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_key, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_hk_key__SWIG_1(self,args);
        }
    }
    if (argc == 3) {
        int _v;
        {
            _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = PyString_Check(argv[2]) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_new_hk_key__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_hk_key'");
    return NULL;
}


static PyObject *_wrap_delete_hk_key(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_key *arg1 = (hk_key *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_hk_key",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_key,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_key_state(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_key *arg1 = (hk_key *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_key_state",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_key,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)((hk_key const *)arg1)->state();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_key_key(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_key *arg1 = (hk_key *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_key_key",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_key,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)((hk_key const *)arg1)->key();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_key_text(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_key *arg1 = (hk_key *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_key_text",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_key,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((hk_key const *)arg1)->text();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_key___eq__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_key *arg1 = (hk_key *) 0 ;
    hk_key *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_key___eq__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_key,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_key,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (bool)(arg1)->operator ==((hk_key const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_key___ne__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_key *arg1 = (hk_key *) 0 ;
    hk_key *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_key___ne__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_key,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_key,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (bool)(arg1)->operator !=((hk_key const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_key_accept_key(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_key *arg1 = (hk_key *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_key_accept_key",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_key,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((hk_key const *)arg1)->accept_key();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_key_set_accept_key(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_key *arg1 = (hk_key *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_key_set_accept_key",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_key,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->set_accept_key(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * hk_key_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_hk_key, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_hk_dsmodevisible(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_presentation *arg1 = (hk_presentation *) NULL ;
    hk_dsmodevisible *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"|O:new_hk_dsmodevisible",&obj0)) goto fail;
    if (obj0) {
        if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_presentation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    }
    result = (hk_dsmodevisible *)new hk_dsmodevisible(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_dsmodevisible, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_hk_dsmodevisible(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsmodevisible *arg1 = (hk_dsmodevisible *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_hk_dsmodevisible",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsmodevisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsmodevisible_set_mode(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsmodevisible *arg1 = (hk_dsmodevisible *) 0 ;
    int arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:hk_dsmodevisible_set_mode",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsmodevisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->set_mode((hk_dsmodevisible::enum_mode )arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsmodevisible_set_designmode(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsmodevisible *arg1 = (hk_dsmodevisible *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsmodevisible_set_designmode",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsmodevisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->set_designmode();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsmodevisible_set_viewmode(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsmodevisible *arg1 = (hk_dsmodevisible *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsmodevisible_set_viewmode",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsmodevisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->set_viewmode();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsmodevisible_mode(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsmodevisible *arg1 = (hk_dsmodevisible *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsmodevisible_mode",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsmodevisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)((hk_dsmodevisible const *)arg1)->mode();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsmodevisible_has_changed__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsmodevisible *arg1 = (hk_dsmodevisible *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsmodevisible_has_changed",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsmodevisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((hk_dsmodevisible const *)arg1)->has_changed();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsmodevisible_has_changed__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsmodevisible *arg1 = (hk_dsmodevisible *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_dsmodevisible_has_changed",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsmodevisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->has_changed(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsmodevisible_has_changed(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_dsmodevisible, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_hk_dsmodevisible_has_changed__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_dsmodevisible, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_hk_dsmodevisible_has_changed__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'hk_dsmodevisible_has_changed'");
    return NULL;
}


static PyObject *_wrap_hk_dsmodevisible_set_block_has_changed(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsmodevisible *arg1 = (hk_dsmodevisible *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_dsmodevisible_set_block_has_changed",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsmodevisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->set_block_has_changed(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsmodevisible_block_has_changed(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsmodevisible *arg1 = (hk_dsmodevisible *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsmodevisible_block_has_changed",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsmodevisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((hk_dsmodevisible const *)arg1)->block_has_changed();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsmodevisible_reset_has_changed(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsmodevisible *arg1 = (hk_dsmodevisible *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsmodevisible_reset_has_changed",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsmodevisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->reset_has_changed();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsmodevisible_is_new(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsmodevisible *arg1 = (hk_dsmodevisible *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsmodevisible_is_new",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsmodevisible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((hk_dsmodevisible const *)arg1)->is_new();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * hk_dsmodevisible_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_hk_dsmodevisible, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_hk_dstable(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_presentation *arg1 = (hk_presentation *) NULL ;
    hk_dstable *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"|O:new_hk_dstable",&obj0)) goto fail;
    if (obj0) {
        if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_presentation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    }
    result = (hk_dstable *)new hk_dstable(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_dstable, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dstable_grid(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dstable *arg1 = (hk_dstable *) 0 ;
    hk_dsgrid *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dstable_grid",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dstable,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_dsgrid *)(arg1)->grid();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_dsgrid, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_hk_dstable(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dstable *arg1 = (hk_dstable *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_hk_dstable",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dstable,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * hk_dstable_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_hk_dstable, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_hk_dsquery(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_presentation *arg1 = (hk_presentation *) NULL ;
    hk_dsquery *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"|O:new_hk_dsquery",&obj0)) goto fail;
    if (obj0) {
        if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_presentation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    }
    result = (hk_dsquery *)new hk_dsquery(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_dsquery, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_hk_dsquery(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsquery *arg1 = (hk_dsquery *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_hk_dsquery",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsquery,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsquery_grid(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsquery *arg1 = (hk_dsquery *) 0 ;
    hk_dsgrid *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsquery_grid",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsquery,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_dsgrid *)(arg1)->grid();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_dsgrid, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsquery_qbe(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsquery *arg1 = (hk_dsquery *) 0 ;
    hk_qbe *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsquery_qbe",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsquery,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_qbe *)(arg1)->qbe();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_qbe, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsquery_use_qbe(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsquery *arg1 = (hk_dsquery *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsquery_use_qbe",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsquery,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((hk_dsquery const *)arg1)->use_qbe();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsquery_set_use_qbe(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsquery *arg1 = (hk_dsquery *) 0 ;
    bool arg2 ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_dsquery_set_use_qbe",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsquery,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_use_qbe(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsquery_save_query(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsquery *arg1 = (hk_dsquery *) 0 ;
    hk_string const &arg2_defvalue = "" ;
    hk_string *arg2 = (hk_string *) &arg2_defvalue ;
    bool arg3 = (bool) true ;
    bool result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|OO:hk_dsquery_save_query",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsquery,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        {
            if (PyString_Check(obj1)) {
                temp2 = hk_string(PyString_AsString(obj1));
                arg2 = &temp2;
            } else {
                SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
            }
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (bool)(arg1)->save_query((hk_string const &)*arg2,arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsquery_load_query(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsquery *arg1 = (hk_dsquery *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsquery_load_query",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsquery,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->load_query();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsquery_savedata(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsquery *arg1 = (hk_dsquery *) 0 ;
    ostream *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_dsquery_savedata",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsquery,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_ostream,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    (arg1)->savedata(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsquery_loaddata(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsquery *arg1 = (hk_dsquery *) 0 ;
    xmlNodePtr arg2 ;
    xmlNodePtr *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_dsquery_loaddata",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsquery,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_xmlNodePtr,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    (arg1)->loaddata(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * hk_dsquery_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_hk_dsquery, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_hk_presentation(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_presentation *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_hk_presentation")) goto fail;
    result = (hk_presentation *)new hk_presentation();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_presentation, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_hk_presentation(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_presentation *arg1 = (hk_presentation *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_hk_presentation",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_presentation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_presentation_set_database(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_presentation *arg1 = (hk_presentation *) 0 ;
    hk_database *arg2 = (hk_database *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_presentation_set_database",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_presentation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->set_database(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_presentation_database(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_presentation *arg1 = (hk_presentation *) 0 ;
    hk_database *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_presentation_database",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_presentation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_database *)((hk_presentation const *)arg1)->database();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_database, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_presentation_presentationtype(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_presentation *arg1 = (hk_presentation *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_presentation_presentationtype",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_presentation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)((hk_presentation const *)arg1)->presentationtype();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_presentation_set_name(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_presentation *arg1 = (hk_presentation *) 0 ;
    hk_string *arg2 = 0 ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_presentation_set_name",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_presentation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    (arg1)->set_name((hk_string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_presentation_name(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_presentation *arg1 = (hk_presentation *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_presentation_name",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_presentation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((hk_presentation const *)arg1)->name();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_presentation_set_mode(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_presentation *arg1 = (hk_presentation *) 0 ;
    int arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:hk_presentation_set_mode",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_presentation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->set_mode((hk_dsmodevisible::enum_mode )arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_presentation_datasources(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_presentation *arg1 = (hk_presentation *) 0 ;
    list<hk_datasource * > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_presentation_datasources",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_presentation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (list<hk_datasource * > *)((hk_presentation const *)arg1)->datasources();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_listThk_datasource_p_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_presentation_new_datasource(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_presentation *arg1 = (hk_presentation *) 0 ;
    hk_string *arg2 = 0 ;
    int arg3 = (int) dt_table ;
    long result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|i:hk_presentation_new_datasource",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_presentation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = (long)(arg1)->new_datasource((hk_string const &)*arg2,(datasourcetype )arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_presentation_get_datasource__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_presentation *arg1 = (hk_presentation *) 0 ;
    long arg2 ;
    hk_datasource *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Ol:hk_presentation_get_datasource",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_presentation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_datasource *)(arg1)->get_datasource(arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_datasource, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_presentation_get_datasource__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_presentation *arg1 = (hk_presentation *) 0 ;
    hk_string *arg2 = 0 ;
    hk_datasource *result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_presentation_get_datasource",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_presentation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = (hk_datasource *)(arg1)->get_datasource((hk_string const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_datasource, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_presentation_get_datasource(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_presentation, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_hk_presentation_get_datasource__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_presentation, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                return _wrap_hk_presentation_get_datasource__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'hk_presentation_get_datasource'");
    return NULL;
}


static PyObject *_wrap_hk_presentation_get_datasource_by_shortname(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_presentation *arg1 = (hk_presentation *) 0 ;
    hk_string *arg2 = 0 ;
    hk_datasource *result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_presentation_get_datasource_by_shortname",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_presentation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = (hk_datasource *)(arg1)->get_datasource_by_shortname((hk_string const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_datasource, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_presentation_unique_datasourcename(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_presentation *arg1 = (hk_presentation *) 0 ;
    long arg2 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Ol:hk_presentation_unique_datasourcename",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_presentation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->unique_datasourcename(arg2);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_presentation_unique_shortdatasourcename(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_presentation *arg1 = (hk_presentation *) 0 ;
    long arg2 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Ol:hk_presentation_unique_shortdatasourcename",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_presentation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->unique_shortdatasourcename(arg2);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_presentation_savedata(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_presentation *arg1 = (hk_presentation *) 0 ;
    ostream *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_presentation_savedata",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_presentation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_ostream,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    (arg1)->savedata(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_presentation_loaddata(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_presentation *arg1 = (hk_presentation *) 0 ;
    xmlNodePtr arg2 ;
    xmlNodePtr *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_presentation_loaddata",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_presentation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_xmlNodePtr,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    (arg1)->loaddata(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_presentation_clear_datasourcelist(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_presentation *arg1 = (hk_presentation *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_presentation_clear_datasourcelist",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_presentation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->clear_datasourcelist();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_presentation_set_designsize(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_presentation *arg1 = (hk_presentation *) 0 ;
    unsigned int arg2 ;
    unsigned int arg3 ;
    bool arg4 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO|O:hk_presentation_set_designsize",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_presentation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (unsigned int) PyInt_AsLong(obj2);
    if (PyErr_Occurred()) SWIG_fail;
    if (obj3) {
        arg4 = PyInt_AsLong(obj3) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_designsize(arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_presentation_set_presentationsize(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_presentation *arg1 = (hk_presentation *) 0 ;
    unsigned int arg2 ;
    unsigned int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:hk_presentation_set_presentationsize",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_presentation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (unsigned int) PyInt_AsLong(obj2);
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->set_presentationsize(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_presentation_designwidth(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_presentation *arg1 = (hk_presentation *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_presentation_designwidth",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_presentation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (unsigned int)(arg1)->designwidth();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_presentation_designheight(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_presentation *arg1 = (hk_presentation *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_presentation_designheight",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_presentation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (unsigned int)(arg1)->designheight();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_presentation_horizontal2relativ(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_presentation *arg1 = (hk_presentation *) 0 ;
    unsigned int arg2 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_presentation_horizontal2relativ",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_presentation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    result = (unsigned int)(arg1)->horizontal2relativ(arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_presentation_vertical2relativ(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_presentation *arg1 = (hk_presentation *) 0 ;
    unsigned int arg2 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_presentation_vertical2relativ",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_presentation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    result = (unsigned int)(arg1)->vertical2relativ(arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_presentation_relativ2horizontal(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_presentation *arg1 = (hk_presentation *) 0 ;
    unsigned int arg2 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_presentation_relativ2horizontal",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_presentation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    result = (unsigned int)(arg1)->relativ2horizontal(arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_presentation_relativ2vertical(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_presentation *arg1 = (hk_presentation *) 0 ;
    unsigned int arg2 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_presentation_relativ2vertical",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_presentation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    result = (unsigned int)(arg1)->relativ2vertical(arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_presentation_register_object(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_presentation *arg1 = (hk_presentation *) 0 ;
    hk_visible *arg2 = (hk_visible *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_presentation_register_object",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_presentation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->register_object(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_presentation_set_automatic_enable_datasources(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_presentation *arg1 = (hk_presentation *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_presentation_set_automatic_enable_datasources",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_presentation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->set_automatic_enable_datasources(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_presentation_automatic_enable_datasources(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_presentation *arg1 = (hk_presentation *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_presentation_automatic_enable_datasources",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_presentation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->automatic_enable_datasources();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_presentation_bulk_operation(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_presentation *arg1 = (hk_presentation *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:hk_presentation_bulk_operation",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_presentation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->bulk_operation((hk_presentation::enum_bulkoperation )arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_presentation_set_sizetype(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_presentation *arg1 = (hk_presentation *) 0 ;
    int arg2 ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi|O:hk_presentation_set_sizetype",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_presentation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_sizetype((hk_presentation::enum_sizetype )arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_presentation_sizetype(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_presentation *arg1 = (hk_presentation *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_presentation_sizetype",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_presentation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->sizetype();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_presentation_set_defaultsizetype(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    
    if(!PyArg_ParseTuple(args,(char *)"i:hk_presentation_set_defaultsizetype",&arg1)) goto fail;
    hk_presentation::set_defaultsizetype((hk_presentation::enum_sizetype )arg1);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_presentation_defaultsizetype(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int result;
    
    if(!PyArg_ParseTuple(args,(char *)":hk_presentation_defaultsizetype")) goto fail;
    result = (int)hk_presentation::defaultsizetype();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_presentation_set_snap2gridx(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    
    if(!PyArg_ParseTuple(args,(char *)"i:hk_presentation_set_snap2gridx",&arg1)) goto fail;
    hk_presentation::set_snap2gridx(arg1);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_presentation_snap2gridx(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int result;
    
    if(!PyArg_ParseTuple(args,(char *)":hk_presentation_snap2gridx")) goto fail;
    result = (int)hk_presentation::snap2gridx();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_presentation_set_snap2gridy(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    
    if(!PyArg_ParseTuple(args,(char *)"i:hk_presentation_set_snap2gridy",&arg1)) goto fail;
    hk_presentation::set_snap2gridy(arg1);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_presentation_snap2gridy(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int result;
    
    if(!PyArg_ParseTuple(args,(char *)":hk_presentation_snap2gridy")) goto fail;
    result = (int)hk_presentation::snap2gridy();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_presentation_interpreter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_presentation *arg1 = (hk_presentation *) 0 ;
    hk_interpreter *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_presentation_interpreter",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_presentation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_interpreter *)(arg1)->interpreter();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_interpreter, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_presentation_script_error(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_presentation *arg1 = (hk_presentation *) 0 ;
    hk_visible *arg2 = (hk_visible *) 0 ;
    hk_interpreter::enum_action arg3 ;
    hk_interpreter::enum_action *argp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:hk_presentation_script_error",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_presentation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &argp3, SWIGTYPE_p_hk_interpreter__enum_action,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg3 = *argp3; 
    (arg1)->script_error(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_presentation_set_interpretername(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_presentation *arg1 = (hk_presentation *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_presentation_set_interpretername",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_presentation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_interpretername((hk_string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_presentation_interpretername(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_presentation *arg1 = (hk_presentation *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_presentation_interpretername",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_presentation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((hk_presentation const *)arg1)->interpretername();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_presentation_enable_datasources(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_presentation *arg1 = (hk_presentation *) 0 ;
    bool arg2 ;
    int arg3 = (int) hk_datasource::standard ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|i:hk_presentation_enable_datasources",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_presentation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->enable_datasources(arg2,(hk_datasource::enum_accessmode )arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_presentation_is_subpresentation(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_presentation *arg1 = (hk_presentation *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_presentation_is_subpresentation",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_presentation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->is_subpresentation();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_presentation_while_loading(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_presentation *arg1 = (hk_presentation *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_presentation_while_loading",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_presentation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->while_loading();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_presentation_intervaltasks(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_presentation *arg1 = (hk_presentation *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_presentation_intervaltasks",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_presentation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->intervaltasks();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_presentation_load_module(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_presentation *arg1 = (hk_presentation *) 0 ;
    hk_string *arg2 = 0 ;
    bool result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_presentation_load_module",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_presentation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = (bool)(arg1)->load_module((hk_string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * hk_presentation_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_hk_presentation, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_hk_button(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *arg1 = (hk_form *) NULL ;
    hk_button *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"|O:new_hk_button",&obj0)) goto fail;
    if (obj0) {
        if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    }
    result = (hk_button *)new hk_button(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_button, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_hk_button(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_button *arg1 = (hk_button *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_hk_button",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_button,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_button_set_action__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_button *arg1 = (hk_button *) 0 ;
    hk_string *arg2 = 0 ;
    hk_string *arg3 = 0 ;
    bool arg4 = (bool) false ;
    bool arg5 = (bool) true ;
    hk_string temp2 ;
    hk_string temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO|OO:hk_button_set_action",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_button,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    {
        if (PyString_Check(obj2)) {
            temp3 = hk_string(PyString_AsString(obj2));
            arg3 = &temp3;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj3) {
        arg4 = PyInt_AsLong(obj3) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj4) {
        arg5 = PyInt_AsLong(obj4) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_action((hk_string const &)*arg2,(hk_string const &)*arg3,arg4,arg5);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_button_set_action__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_button *arg1 = (hk_button *) 0 ;
    long arg2 ;
    hk_string *arg3 = 0 ;
    bool arg4 = (bool) false ;
    bool arg5 = (bool) true ;
    hk_string temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OlO|OO:hk_button_set_action",&obj0,&arg2,&obj2,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_button,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj2)) {
            temp3 = hk_string(PyString_AsString(obj2));
            arg3 = &temp3;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj3) {
        arg4 = PyInt_AsLong(obj3) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj4) {
        arg5 = PyInt_AsLong(obj4) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_action(arg2,(hk_string const &)*arg3,arg4,arg5);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_button_set_action(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[6];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 5); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if ((argc >= 3) && (argc <= 5)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_button, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = PyString_Check(argv[2]) ? 1 : 0;
                }
                if (_v) {
                    if (argc <= 3) {
                        return _wrap_hk_button_set_action__SWIG_1(self,args);
                    }
                    {
                        _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        if (argc <= 4) {
                            return _wrap_hk_button_set_action__SWIG_1(self,args);
                        }
                        {
                            _v = (PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
                        }
                        if (_v) {
                            return _wrap_hk_button_set_action__SWIG_1(self,args);
                        }
                    }
                }
            }
        }
    }
    if ((argc >= 3) && (argc <= 5)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_button, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = PyString_Check(argv[2]) ? 1 : 0;
                }
                if (_v) {
                    if (argc <= 3) {
                        return _wrap_hk_button_set_action__SWIG_0(self,args);
                    }
                    {
                        _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        if (argc <= 4) {
                            return _wrap_hk_button_set_action__SWIG_0(self,args);
                        }
                        {
                            _v = (PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
                        }
                        if (_v) {
                            return _wrap_hk_button_set_action__SWIG_0(self,args);
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'hk_button_set_action'");
    return NULL;
}


static PyObject *_wrap_hk_button_push_action(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_button *arg1 = (hk_button *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_button_push_action",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_button,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->push_action();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_button_object(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_button *arg1 = (hk_button *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_button_object",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_button,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->object();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_button_action(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_button *arg1 = (hk_button *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_button_action",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_button,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->action();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_button_show_maximized(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_button *arg1 = (hk_button *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_button_show_maximized",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_button,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->show_maximized();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_button_set_database(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_button *arg1 = (hk_button *) 0 ;
    hk_database *arg2 = (hk_database *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_button_set_database",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_button,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_database,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->set_database(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_button_database(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_button *arg1 = (hk_button *) 0 ;
    hk_database *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_button_database",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_button,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_database *)(arg1)->database();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_database, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_button_show_icon(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_button *arg1 = (hk_button *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_button_show_icon",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_button,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->show_icon();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_button_set_is_togglebutton(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_button *arg1 = (hk_button *) 0 ;
    bool arg2 ;
    bool arg3 = (bool) true ;
    bool arg4 = (bool) false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|OO:hk_button_set_is_togglebutton",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_button,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj3) {
        arg4 = PyInt_AsLong(obj3) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_is_togglebutton(arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_button_is_togglebutton(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_button *arg1 = (hk_button *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_button_is_togglebutton",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_button,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((hk_button const *)arg1)->is_togglebutton();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_button_is_pushed(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_button *arg1 = (hk_button *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_button_is_pushed",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_button,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((hk_button const *)arg1)->is_pushed();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_button_set_is_pushed(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_button *arg1 = (hk_button *) 0 ;
    bool arg2 ;
    bool arg3 = (bool) true ;
    bool arg4 = (bool) false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|OO:hk_button_set_is_pushed",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_button,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj3) {
        arg4 = PyInt_AsLong(obj3) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_is_pushed(arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * hk_button_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_hk_button, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_currentbutton(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_button *result;
    
    if(!PyArg_ParseTuple(args,(char *)":currentbutton")) goto fail;
    result = (hk_button *)currentbutton();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_button, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_hk_form(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_hk_form")) goto fail;
    result = (hk_form *)new hk_form();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_form, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_hk_form(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *arg1 = (hk_form *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_hk_form",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_form_new_grid(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *arg1 = (hk_form *) 0 ;
    hk_dsgrid *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_form_new_grid",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_dsgrid *)(arg1)->new_grid();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_dsgrid, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_form_new_lineedit(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *arg1 = (hk_form *) 0 ;
    hk_dslineedit *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_form_new_lineedit",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_dslineedit *)(arg1)->new_lineedit();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_dslineedit, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_form_new_bool(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *arg1 = (hk_form *) 0 ;
    hk_dsboolean *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_form_new_bool",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_dsboolean *)(arg1)->new_bool();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_dsboolean, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_form_new_combobox(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *arg1 = (hk_form *) 0 ;
    hk_dscombobox *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_form_new_combobox",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_dscombobox *)(arg1)->new_combobox();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_dscombobox, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_form_new_button(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *arg1 = (hk_form *) 0 ;
    hk_button *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_form_new_button",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_button *)(arg1)->new_button();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_button, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_form_new_rowselector(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *arg1 = (hk_form *) 0 ;
    hk_dsrowselector *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_form_new_rowselector",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_dsrowselector *)(arg1)->new_rowselector();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_dsrowselector, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_form_new_memo(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *arg1 = (hk_form *) 0 ;
    hk_dsmemo *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_form_new_memo",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_dsmemo *)(arg1)->new_memo();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_dsmemo, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_form_new_label(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *arg1 = (hk_form *) 0 ;
    hk_label *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_form_new_label",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_label *)(arg1)->new_label();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_label, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_form_new_subform(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *arg1 = (hk_form *) 0 ;
    hk_subform *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_form_new_subform",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_subform *)(arg1)->new_subform();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_subform, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_form_new_date(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *arg1 = (hk_form *) 0 ;
    hk_dsdate *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_form_new_date",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_dsdate *)(arg1)->new_date();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_dsdate, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_form_new_image(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *arg1 = (hk_form *) 0 ;
    hk_dsimage *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_form_new_image",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_dsimage *)(arg1)->new_image();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_dsimage, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_form_new_tabvisible(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *arg1 = (hk_form *) 0 ;
    hk_tabvisible *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_form_new_tabvisible",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_tabvisible *)(arg1)->new_tabvisible();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_tabvisible, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_form_save_form(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *arg1 = (hk_form *) 0 ;
    hk_string const &arg2_defvalue = "" ;
    hk_string *arg2 = (hk_string *) &arg2_defvalue ;
    bool arg3 = (bool) true ;
    bool result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|OO:hk_form_save_form",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        {
            if (PyString_Check(obj1)) {
                temp2 = hk_string(PyString_AsString(obj1));
                arg2 = &temp2;
            } else {
                SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
            }
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (bool)(arg1)->save_form((hk_string const &)*arg2,arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_form_load_form(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *arg1 = (hk_form *) 0 ;
    hk_string const &arg2_defvalue = "" ;
    hk_string *arg2 = (hk_string *) &arg2_defvalue ;
    bool result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:hk_form_load_form",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        {
            if (PyString_Check(obj1)) {
                temp2 = hk_string(PyString_AsString(obj1));
                arg2 = &temp2;
            } else {
                SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
            }
        }
    }
    result = (bool)(arg1)->load_form((hk_string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_form_savedata(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *arg1 = (hk_form *) 0 ;
    ostream *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_form_savedata",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_ostream,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    (arg1)->savedata(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_form_loaddata(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *arg1 = (hk_form *) 0 ;
    xmlNodePtr arg2 ;
    xmlNodePtr *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_form_loaddata",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_xmlNodePtr,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    (arg1)->loaddata(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_form_set_designsize(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *arg1 = (hk_form *) 0 ;
    unsigned int arg2 ;
    unsigned int arg3 ;
    bool arg4 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO|O:hk_form_set_designsize",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (unsigned int) PyInt_AsLong(obj2);
    if (PyErr_Occurred()) SWIG_fail;
    if (obj3) {
        arg4 = PyInt_AsLong(obj3) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_designsize(arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_form_get_visible__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *arg1 = (hk_form *) 0 ;
    long arg2 ;
    hk_visible *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Ol:hk_form_get_visible",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_visible *)(arg1)->get_visible(arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_visible, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_form_get_visible__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *arg1 = (hk_form *) 0 ;
    hk_string *arg2 = 0 ;
    hk_visible *result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_form_get_visible",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = (hk_visible *)(arg1)->get_visible((hk_string const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_visible, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_form_get_visible(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_form, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_hk_form_get_visible__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_form, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                return _wrap_hk_form_get_visible__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'hk_form_get_visible'");
    return NULL;
}


static PyObject *_wrap_hk_form_bulk_operation(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *arg1 = (hk_form *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:hk_form_bulk_operation",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->bulk_operation((hk_presentation::enum_bulkoperation )arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_form_set_mode(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *arg1 = (hk_form *) 0 ;
    int arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:hk_form_set_mode",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->set_mode((hk_dsmodevisible::enum_mode )arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_form_masterform(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *arg1 = (hk_form *) 0 ;
    hk_form *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_form_masterform",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_form *)((hk_form const *)arg1)->masterform();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_form, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_form_clear_visiblelist(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *arg1 = (hk_form *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_form_clear_visiblelist",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->clear_visiblelist();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_form_set_taborder(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *arg1 = (hk_form *) 0 ;
    list<int > arg2 ;
    bool arg3 = (bool) true ;
    bool arg4 = (bool) true ;
    list<int > intlist2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|OO:hk_form_set_taborder",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (!PySequence_Check(obj1))
        {
            PyErr_SetString(PyExc_ValueError,hk_class::hk_translate("Expected a sequence").c_str());
            return NULL;
        }
        int i=PySequence_Length(obj1);
        int count=0;
        while (count < i)
        {
            PyObject *o=PySequence_GetItem(obj1,count);
            if (!PyInt_Check(o))
            {
                PyErr_SetString(PyExc_ValueError,hk_class::hk_translate("Sequence elements must be integer values").c_str());
                return NULL;
            }
            intlist2.insert(intlist2.end(),(int)PyInt_AsLong(o));
            ++count;
        }
        arg2=intlist2;
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj3) {
        arg4 = PyInt_AsLong(obj3) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_taborder(arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_form_taborder(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *arg1 = (hk_form *) 0 ;
    list<int > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_form_taborder",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((hk_form const *)arg1)->taborder();
    
    {
        int s=(&result)->size();
        resultobj=PyList_New(s);
        list<int>::iterator it=(&result)->begin();
        int i=0;
        while (it!=(&result)->end())
        {
            PyObject* o= PyInt_FromLong((*it));
            PyList_SetItem(resultobj,i,o);
            ++it;
            ++i;
        }
        
        
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_form_taborder_previous(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *arg1 = (hk_form *) 0 ;
    hk_visible *arg2 = (hk_visible *) 0 ;
    hk_visible *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_form_taborder_previous",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_visible *)(arg1)->taborder_previous(arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_visible, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_form_taborder_next(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *arg1 = (hk_form *) 0 ;
    hk_visible *arg2 = (hk_visible *) 0 ;
    hk_visible *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_form_taborder_next",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_visible *)(arg1)->taborder_next(arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_visible, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_form_first_tabobject(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *arg1 = (hk_form *) 0 ;
    hk_visible *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_form_first_tabobject",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_visible *)(arg1)->first_tabobject();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_visible, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_form_last_tabobject(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *arg1 = (hk_form *) 0 ;
    hk_visible *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_form_last_tabobject",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_visible *)(arg1)->last_tabobject();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_visible, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_form_goto_taborder_next(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *arg1 = (hk_form *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_form_goto_taborder_next",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->goto_taborder_next();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_form_goto_taborder_previous(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *arg1 = (hk_form *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_form_goto_taborder_previous",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->goto_taborder_previous();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_form_goto_taborder_first(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *arg1 = (hk_form *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_form_goto_taborder_first",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->goto_taborder_first();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_form_goto_taborder_last(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *arg1 = (hk_form *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_form_goto_taborder_last",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->goto_taborder_last();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_form_set_focus(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *arg1 = (hk_form *) 0 ;
    hk_visible *arg2 = (hk_visible *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_form_set_focus",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_visible,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->set_focus(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_form_visibles(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *arg1 = (hk_form *) 0 ;
    list<hk_visible * > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_form_visibles",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (list<hk_visible * > *)(arg1)->visibles();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_listThk_visible_p_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_form_is_subform(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *arg1 = (hk_form *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_form_is_subform",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((hk_form const *)arg1)->is_subform();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_form_is_subpresentation(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *arg1 = (hk_form *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_form_is_subpresentation",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->is_subpresentation();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_form_show_asdialog(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *arg1 = (hk_form *) 0 ;
    hk_form *arg2 = (hk_form *) NULL ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:hk_form_show_asdialog",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    }
    result = (bool)(arg1)->show_asdialog(arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_form_screen_width(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *arg1 = (hk_form *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_form_screen_width",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->screen_width();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_form_screen_height(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *arg1 = (hk_form *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_form_screen_height",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->screen_height();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_form_while_load_form(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *arg1 = (hk_form *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_form_while_load_form",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((hk_form const *)arg1)->while_load_form();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_form_while_loading(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *arg1 = (hk_form *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_form_while_loading",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->while_loading();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_form_form2html(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *arg1 = (hk_form *) 0 ;
    int arg2 = (int) hk_form::no_data ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|i:hk_form_form2html",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->form2html((hk_form::enum_include )arg2);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_form_get_pyvisible__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *arg1 = (hk_form *) 0 ;
    long arg2 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Ol:hk_form_get_pyvisible",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (PyObject *)hk_form_get_pyvisible__SWIG_0(arg1,arg2);
    
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_form_get_pyvisible__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *arg1 = (hk_form *) 0 ;
    hk_string *arg2 = 0 ;
    PyObject *result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_form_get_pyvisible",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = (PyObject *)hk_form_get_pyvisible__SWIG_1(arg1,(hk_string const &)*arg2);
    
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_form_get_pyvisible(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_form, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_hk_form_get_pyvisible__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_form, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                return _wrap_hk_form_get_pyvisible__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'hk_form_get_pyvisible'");
    return NULL;
}


static PyObject * hk_form_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_hk_form, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_currentform(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *result;
    
    if(!PyArg_ParseTuple(args,(char *)":currentform")) goto fail;
    result = (hk_form *)currentform();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_form, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_hk_label(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *arg1 = (hk_form *) NULL ;
    hk_label *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"|O:new_hk_label",&obj0)) goto fail;
    if (obj0) {
        if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    }
    result = (hk_label *)new hk_label(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_label, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_hk_label(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_label *arg1 = (hk_label *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_hk_label",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_label,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_label_set_topline(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_label *arg1 = (hk_label *) 0 ;
    int arg2 = (int) 1 ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|iO:hk_label_set_topline",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_label,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_topline(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_label_set_bottomline(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_label *arg1 = (hk_label *) 0 ;
    int arg2 = (int) 1 ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|iO:hk_label_set_bottomline",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_label,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_bottomline(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_label_set_leftline(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_label *arg1 = (hk_label *) 0 ;
    int arg2 = (int) 1 ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|iO:hk_label_set_leftline",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_label,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_leftline(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_label_set_rightline(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_label *arg1 = (hk_label *) 0 ;
    int arg2 = (int) 1 ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|iO:hk_label_set_rightline",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_label,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_rightline(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_label_set_diagonalluro(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_label *arg1 = (hk_label *) 0 ;
    int arg2 = (int) 1 ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|iO:hk_label_set_diagonalluro",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_label,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_diagonalluro(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_label_set_diagonalloru(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_label *arg1 = (hk_label *) 0 ;
    int arg2 = (int) 1 ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|iO:hk_label_set_diagonalloru",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_label,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_diagonalloru(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_label_diagonalloru(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_label *arg1 = (hk_label *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_label_diagonalloru",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_label,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->diagonalloru();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_label_topline(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_label *arg1 = (hk_label *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_label_topline",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_label,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->topline();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_label_bottomline(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_label *arg1 = (hk_label *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_label_bottomline",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_label,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->bottomline();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_label_leftline(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_label *arg1 = (hk_label *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_label_leftline",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_label,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->leftline();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_label_rightline(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_label *arg1 = (hk_label *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_label_rightline",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_label,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->rightline();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_label_diagonalluro(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_label *arg1 = (hk_label *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_label_diagonalluro",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_label,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->diagonalluro();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_label_set_frame(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_label *arg1 = (hk_label *) 0 ;
    int arg2 = (int) 1 ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|iO:hk_label_set_frame",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_label,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_frame(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * hk_label_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_hk_label, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_hk_report(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_hk_report")) goto fail;
    result = (hk_report *)new hk_report();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_report, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_hk_report(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_hk_report",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_set_filename(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_report_set_filename",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_filename((hk_string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_filename(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_filename",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->filename();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_set_use_standard_storagepath(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    bool arg2 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:hk_report_set_use_standard_storagepath",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = PyInt_AsLong(obj1) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_use_standard_storagepath(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_use_standard_storagepath(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_use_standard_storagepath",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->use_standard_storagepath();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_outputfile(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_outputfile",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->outputfile();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_set_begin(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_report_set_begin",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_begin((hk_string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_begin(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_begin",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->begin();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_set_end(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_report_set_end",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_end((hk_string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_end(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_end",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->end();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_page_header(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_reportsection *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_page_header",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_reportsection *)(arg1)->page_header();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_reportsection, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_page_footer(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_reportsection *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_page_footer",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_reportsection *)(arg1)->page_footer();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_reportsection, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_report_header(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_reportsection *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_report_header",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_reportsection *)(arg1)->report_header();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_reportsection, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_report_footer(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_reportsection *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_report_footer",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_reportsection *)(arg1)->report_footer();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_reportsection, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_datasection(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_reportsection *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_datasection",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_reportsection *)(arg1)->datasection();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_reportsection, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_new_sectionpair(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    bool arg2 = (bool) true ;
    hk_reportsectionpair *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:hk_report_new_sectionpair",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = PyInt_AsLong(obj1) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (hk_reportsectionpair *)(arg1)->new_sectionpair(arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_reportsectionpair, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_new_sectionpair_at(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    unsigned int arg2 ;
    bool arg3 = (bool) true ;
    hk_reportsectionpair *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_report_new_sectionpair_at",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (hk_reportsectionpair *)(arg1)->new_sectionpair_at(arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_reportsectionpair, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_move_sectionpair(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    unsigned int arg2 ;
    int arg3 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOi:hk_report_move_sectionpair",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    result = (bool)(arg1)->move_sectionpair(arg2,arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_execute(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_execute",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->execute();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_while_executing(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_while_executing",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((hk_report const *)arg1)->while_executing();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_while_load_report(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_while_load_report",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((hk_report const *)arg1)->while_load_report();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_while_loading(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_while_loading",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->while_loading();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_set_mode(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    int arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:hk_report_set_mode",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->set_mode((hk_dsmodevisible::enum_mode )arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_set_recodefunction(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_report_set_recodefunction",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_recodefunction((hk_string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_recodefunction(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    recodefunctiontype *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_recodefunction",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (recodefunctiontype *)(arg1)->recodefunction();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_recodefunctiontype, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_recodefunctionstring(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_recodefunctionstring",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->recodefunctionstring();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_add_recodetype(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    recodefunctiontype *arg2 = (recodefunctiontype *) 0 ;
    hk_string temp1 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_report_add_recodetype",&obj0,&obj1)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = hk_string(PyString_AsString(obj0));
            arg1 = &temp1;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_recodefunctiontype,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    hk_report::add_recodetype((hk_string const &)*arg1,arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_recodelist(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    list<hk_string > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":hk_report_recodelist")) goto fail;
    result = (list<hk_string > *)hk_report::recodelist();
    
    {
        int s=result->size();
        resultobj=PyList_New(s);
        list<hk_string>::iterator it=result->begin();
        int i=0;
        while (it!=result->end())
        {
            PyObject* o= PyString_FromString((*it).c_str());
            PyList_SetItem(resultobj,i,o);
            ++it;
            ++i;
        }
        
        
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_new_page(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_new_page",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->new_page();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_set_pagedelimiter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_report_set_pagedelimiter",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_pagedelimiter((hk_string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_pagedelimiter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_pagedelimiter",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->pagedelimiter();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_sectionpairs(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    std::vector<hk_reportsectionpair * > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_sectionpairs",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (std::vector<hk_reportsectionpair * > *)(arg1)->sectionpairs();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorThk_reportsectionpair_p_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_set_multiplefiles(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    bool arg2 = (bool) true ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|OO:hk_report_set_multiplefiles",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = PyInt_AsLong(obj1) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_multiplefiles(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_multiplefiles(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_multiplefiles",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->multiplefiles();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_set_fileextension(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_report_set_fileextension",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_fileextension((hk_string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_fileextension(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_fileextension",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->fileextension();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_set_firstpagenumber(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    long arg2 ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Ol|O:hk_report_set_firstpagenumber",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_firstpagenumber(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_firstpagenumber(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_firstpagenumber",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (long)(arg1)->firstpagenumber();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_set_pagenamecolumn(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_report_set_pagenamecolumn",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_pagenamecolumn((hk_string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_pagenamecolumn(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_pagenamecolumn",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->pagenamecolumn();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_set_filebegin(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_report_set_filebegin",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_filebegin((hk_string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_filebegin(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_filebegin",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->filebegin();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_set_fileend(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_report_set_fileend",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_fileend((hk_string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_fileend(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_fileend",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->fileend();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_set_periodic(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    unsigned long arg2 ;
    hk_string const &arg3_defvalue = "" ;
    hk_string *arg3 = (hk_string *) &arg3_defvalue ;
    bool arg4 = (bool) false ;
    bool arg5 = (bool) true ;
    hk_string temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|OOO:hk_report_set_periodic",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned long) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    if (obj2) {
        {
            if (PyString_Check(obj2)) {
                temp3 = hk_string(PyString_AsString(obj2));
                arg3 = &temp3;
            } else {
                SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
            }
        }
    }
    if (obj3) {
        arg4 = PyInt_AsLong(obj3) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj4) {
        arg5 = PyInt_AsLong(obj4) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_periodic(arg2,(hk_string const &)*arg3,arg4,arg5);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_periodic_when(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    unsigned long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_periodic_when",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (unsigned long)(arg1)->periodic_when();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_periodic_what(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_periodic_what",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->periodic_what();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_periodic_newpage(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_periodic_newpage",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->periodic_newpage();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_outputstream(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    ostream *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_outputstream",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (ostream *)(arg1)->outputstream();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ostream, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_set_masterreport(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_report *arg2 = (hk_report *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_report_set_masterreport",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->set_masterreport(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_masterreport(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_report *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_masterreport",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_report *)(arg1)->masterreport();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_report, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_is_subreport(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_is_subreport",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((hk_report const *)arg1)->is_subreport();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_is_subpresentation(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_is_subpresentation",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->is_subpresentation();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_rowcount(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    unsigned long arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_report_rowcount",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned long) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->rowcount(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_current_rowcount(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    unsigned long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_current_rowcount",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (unsigned long)(arg1)->current_rowcount();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_font(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_font result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_font",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->font();
    
    {
        hk_font * resultptr;
        resultptr = new hk_font((hk_font &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_hk_font, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_pagenumber(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_pagenumber",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (long)(arg1)->pagenumber();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_absolutepagenumber(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_absolutepagenumber",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (long)(arg1)->absolutepagenumber();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_rownumber(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    unsigned long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_rownumber",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (unsigned long)(arg1)->rownumber();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_set_presentationdatasource(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    long arg2 ;
    bool arg3 = (bool) true ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Ol|O:hk_report_set_presentationdatasource",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (bool)(arg1)->set_presentationdatasource(arg2,arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_save_report(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_string const &arg2_defvalue = "" ;
    hk_string *arg2 = (hk_string *) &arg2_defvalue ;
    bool arg3 = (bool) true ;
    bool result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|OO:hk_report_save_report",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        {
            if (PyString_Check(obj1)) {
                temp2 = hk_string(PyString_AsString(obj1));
                arg2 = &temp2;
            } else {
                SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
            }
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (bool)(arg1)->save_report((hk_string const &)*arg2,arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_load_report(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_string const &arg2_defvalue = "" ;
    hk_string *arg2 = (hk_string *) &arg2_defvalue ;
    bool result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:hk_report_load_report",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        {
            if (PyString_Check(obj1)) {
                temp2 = hk_string(PyString_AsString(obj1));
                arg2 = &temp2;
            } else {
                SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
            }
        }
    }
    result = (bool)(arg1)->load_report((hk_string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_savedata(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    ostream *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_report_savedata",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_ostream,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    (arg1)->savedata(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_loaddata(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    xmlNodePtr arg2 ;
    xmlNodePtr *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_report_loaddata",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_xmlNodePtr,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    (arg1)->loaddata(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_default_reportdata(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_default_reportdata",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->default_reportdata();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_set_default_reportdata(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_report_set_default_reportdata",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_default_reportdata((hk_string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_default_beforereportdata(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_default_beforereportdata",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->default_beforereportdata();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_set_default_beforereportdata(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_report_set_default_beforereportdata",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_default_beforereportdata((hk_string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_default_afterreportdata(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_default_afterreportdata",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->default_afterreportdata();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_set_default_afterreportdata(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_report_set_default_afterreportdata",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_default_afterreportdata((hk_string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_default_reportprecision(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_default_reportprecision",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->default_reportprecision();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_set_default_reportprecision(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    int arg2 ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi|O:hk_report_set_default_reportprecision",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_default_reportprecision(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_default_use_reportseparator(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_default_use_reportseparator",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->default_use_reportseparator();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_set_default_use_reportseparator(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    bool arg2 ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_report_set_default_use_reportseparator",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_default_use_reportseparator(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_set_default_reportdataconfigurefunction(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_report_set_default_reportdataconfigurefunction",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_default_reportdataconfigurefunction((hk_string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_default_reportdataconfigurefunction(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_default_reportdataconfigurefunction",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->default_reportdataconfigurefunction();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_set_default_reportsectionbegin(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_report_set_default_reportsectionbegin",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_default_reportsectionbegin((hk_string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_default_reportsectionbegin(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_default_reportsectionbegin",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->default_reportsectionbegin();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_set_default_reportsectionend(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_report_set_default_reportsectionend",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_default_reportsectionend((hk_string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_default_reportsectionend(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_default_reportsectionend",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->default_reportsectionend();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_set_default_reportsectionbetweendata(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_report_set_default_reportsectionbetweendata",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_default_reportsectionbetweendata((hk_string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_default_reportsectionbetweendata(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_default_reportsectionbetweendata",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->default_reportsectionbetweendata();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_set_default_reportsectioncountfunction(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_report_set_default_reportsectioncountfunction",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_default_reportsectioncountfunction((hk_string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_default_reportsectioncountfunction(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_default_reportsectioncountfunction",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->default_reportsectioncountfunction();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_set_topline(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    bool arg2 = (bool) true ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|OO:hk_report_set_topline",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = PyInt_AsLong(obj1) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_topline(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_topline(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_topline",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->topline();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_set_bottomline(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    bool arg2 = (bool) true ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|OO:hk_report_set_bottomline",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = PyInt_AsLong(obj1) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_bottomline(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_bottomline(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_bottomline",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->bottomline();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_set_leftline(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    bool arg2 = (bool) true ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|OO:hk_report_set_leftline",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = PyInt_AsLong(obj1) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_leftline(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_leftline(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_leftline",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->leftline();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_set_rightline(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    bool arg2 = (bool) true ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|OO:hk_report_set_rightline",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = PyInt_AsLong(obj1) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_rightline(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_rightline(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_rightline",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->rightline();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_set_diagonalluro(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    bool arg2 = (bool) true ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|OO:hk_report_set_diagonalluro",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = PyInt_AsLong(obj1) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_diagonalluro(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_diagonalluro(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_diagonalluro",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->diagonalluro();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_set_diagonalloru(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    bool arg2 = (bool) true ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|OO:hk_report_set_diagonalloru",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = PyInt_AsLong(obj1) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_diagonalloru(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_diagonalloru(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_diagonalloru",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->diagonalloru();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_set_frame(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    bool arg2 = (bool) true ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|OO:hk_report_set_frame",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = PyInt_AsLong(obj1) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_frame(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_set_borders(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    unsigned int arg2 = (unsigned int) 200 ;
    unsigned int arg3 = (unsigned int) 200 ;
    unsigned int arg4 = (unsigned int) 200 ;
    unsigned int arg5 = (unsigned int) 300 ;
    bool arg6 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|OOOOO:hk_report_set_borders",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = (unsigned int) PyInt_AsLong(obj1);
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj2) {
        arg3 = (unsigned int) PyInt_AsLong(obj2);
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj3) {
        arg4 = (unsigned int) PyInt_AsLong(obj3);
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj4) {
        arg5 = (unsigned int) PyInt_AsLong(obj4);
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj5) {
        arg6 = PyInt_AsLong(obj5) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_borders(arg2,arg3,arg4,arg5,arg6);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_border_left(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_border_left",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (unsigned int)(arg1)->border_left();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_border_right(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_border_right",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (unsigned int)(arg1)->border_right();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_border_top(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_border_top",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (unsigned int)(arg1)->border_top();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_border_bottom(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_border_bottom",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (unsigned int)(arg1)->border_bottom();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_set_orientation(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    int arg2 = (int) hk_report::portrait ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|iO:hk_report_set_orientation",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_orientation((hk_report::orientationtype )arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_orientation(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_orientation",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->orientation();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_set_pageformat__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    int arg2 = (int) hk_report::A4 ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|iO:hk_report_set_pageformat",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_pageformat((hk_report::pageformattype )arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_set_pageformat__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    unsigned int arg2 ;
    unsigned int arg3 ;
    bool arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:hk_report_set_pageformat",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (unsigned int) PyInt_AsLong(obj2);
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = PyInt_AsLong(obj3) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->set_pageformat(arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_set_pageformat(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if ((argc >= 1) && (argc <= 3)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_report, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            if (argc <= 1) {
                return _wrap_hk_report_set_pageformat__SWIG_0(self,args);
            }
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                if (argc <= 2) {
                    return _wrap_hk_report_set_pageformat__SWIG_0(self,args);
                }
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_hk_report_set_pageformat__SWIG_0(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_report, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_hk_report_set_pageformat__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'hk_report_set_pageformat'");
    return NULL;
}


static PyObject *_wrap_hk_report_pageformat(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_pageformat",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->pageformat();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_formatwidth(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    int arg2 = (int) hk_report::A4 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|i:hk_report_formatwidth",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (unsigned int)(arg1)->formatwidth((hk_report::pageformattype )arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_formatheight(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    int arg2 = (int) hk_report::A4 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|i:hk_report_formatheight",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (unsigned int)(arg1)->formatheight((hk_report::pageformattype )arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_set_reportconfigurefunction(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:hk_report_set_reportconfigurefunction",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    arg3 = PyInt_AsLong(obj2) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->set_reportconfigurefunction((hk_string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_set_reporttype(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_report_set_reporttype",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_reporttype((hk_string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_reporttype(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_reporttype",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->reporttype();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_add_reporttype(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    reporttypefunction *arg2 = (reporttypefunction *) 0 ;
    hk_string temp1 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_report_add_reporttype",&obj0,&obj1)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = hk_string(PyString_AsString(obj0));
            arg1 = &temp1;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_reporttypefunction,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    hk_report::add_reporttype((hk_string const &)*arg1,arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_reporttypelist(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    list<hk_string > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":hk_report_reporttypelist")) goto fail;
    result = (list<hk_string > *)hk_report::reporttypelist();
    
    {
        int s=result->size();
        resultobj=PyList_New(s);
        list<hk_string>::iterator it=result->begin();
        int i=0;
        while (it!=result->end())
        {
            PyObject* o= PyString_FromString((*it).c_str());
            PyList_SetItem(resultobj,i,o);
            ++it;
            ++i;
        }
        
        
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_configure_page(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_configure_page",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->configure_page();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_neutralize_definition(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_report_neutralize_definition",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->neutralize_definition(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_init_report(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_init_report",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->init_report();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_add_configurefunctiontype(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    report_configurefunction *arg2 = (report_configurefunction *) 0 ;
    hk_string temp1 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_report_add_configurefunctiontype",&obj0,&obj1)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = hk_string(PyString_AsString(obj0));
            arg1 = &temp1;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_report_configurefunction,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    hk_report::add_configurefunctiontype((hk_string const &)*arg1,arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_configurefunctionlist(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    list<hk_string > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":hk_report_configurefunctionlist")) goto fail;
    result = (list<hk_string > *)hk_report::configurefunctionlist();
    
    {
        int s=result->size();
        resultobj=PyList_New(s);
        list<hk_string>::iterator it=result->begin();
        int i=0;
        while (it!=result->end())
        {
            PyObject* o= PyString_FromString((*it).c_str());
            PyList_SetItem(resultobj,i,o);
            ++it;
            ++i;
        }
        
        
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_remove_sectionpair(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_reportsectionpair *arg2 = (hk_reportsectionpair *) 0 ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_report_remove_sectionpair",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_reportsectionpair,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->remove_sectionpair(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_neededfonts(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    list<hk_string > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_neededfonts",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (list<hk_string > *)(arg1)->neededfonts();
    
    {
        int s=result->size();
        resultobj=PyList_New(s);
        list<hk_string>::iterator it=result->begin();
        int i=0;
        while (it!=result->end())
        {
            PyObject* o= PyString_FromString((*it).c_str());
            PyList_SetItem(resultobj,i,o);
            ++it;
            ++i;
        }
        
        
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_usedfonts(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    list<hk_string > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_usedfonts",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (list<hk_string > *)(arg1)->usedfonts();
    
    {
        int s=result->size();
        resultobj=PyList_New(s);
        list<hk_string>::iterator it=result->begin();
        int i=0;
        while (it!=result->end())
        {
            PyObject* o= PyString_FromString((*it).c_str());
            PyList_SetItem(resultobj,i,o);
            ++it;
            ++i;
        }
        
        
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_usedpsfonts(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    list<hk_string > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_usedpsfonts",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (list<hk_string > *)(arg1)->usedpsfonts();
    
    {
        int s=result->size();
        resultobj=PyList_New(s);
        list<hk_string>::iterator it=result->begin();
        int i=0;
        while (it!=result->end())
        {
            PyObject* o= PyString_FromString((*it).c_str());
            PyList_SetItem(resultobj,i,o);
            ++it;
            ++i;
        }
        
        
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_set_printcommand(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    hk_string temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_set_printcommand",&obj0)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = hk_string(PyString_AsString(obj0));
            arg1 = &temp1;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    hk_report::set_printcommand((hk_string const &)*arg1);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_printcommand(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string result;
    
    if(!PyArg_ParseTuple(args,(char *)":hk_report_printcommand")) goto fail;
    result = hk_report::printcommand();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_print_report(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    bool arg2 = (bool) true ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:hk_report_print_report",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = PyInt_AsLong(obj1) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (bool)(arg1)->print_report(arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_designwidth(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_designwidth",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (unsigned int)(arg1)->designwidth();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_designheight(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_designheight",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (unsigned int)(arg1)->designheight();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_horizontal2relativ(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    unsigned int arg2 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_report_horizontal2relativ",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    result = (unsigned int)(arg1)->horizontal2relativ(arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_vertical2relativ(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    unsigned int arg2 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_report_vertical2relativ",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    result = (unsigned int)(arg1)->vertical2relativ(arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_relativ2horizontal(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    unsigned int arg2 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_report_relativ2horizontal",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    result = (unsigned int)(arg1)->relativ2horizontal(arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_relativ2vertical(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    unsigned int arg2 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_report_relativ2vertical",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    result = (unsigned int)(arg1)->relativ2vertical(arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_bulk_operation(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:hk_report_bulk_operation",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->bulk_operation((hk_presentation::enum_bulkoperation )arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_setup_reportbasics(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    
    if(!PyArg_ParseTuple(args,(char *)":hk_report_setup_reportbasics")) goto fail;
    hk_report::setup_reportbasics();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_get_reportdatavisible__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    long arg2 ;
    hk_reportdata *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Ol:hk_report_get_reportdatavisible",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_reportdata *)(arg1)->get_reportdatavisible(arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_reportdata, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_get_reportdatavisible__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_string *arg2 = 0 ;
    hk_reportdata *result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_report_get_reportdatavisible",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = (hk_reportdata *)(arg1)->get_reportdatavisible((hk_string const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_reportdata, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_get_reportdatavisible(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_report, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_hk_report_get_reportdatavisible__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_report, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                return _wrap_hk_report_get_reportdatavisible__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'hk_report_get_reportdatavisible'");
    return NULL;
}


static PyObject *_wrap_hk_report_set_on_new_page_action(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_report_set_on_new_page_action",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_on_new_page_action((hk_string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_on_new_page_action(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_on_new_page_action",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->on_new_page_action();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_stop_execution(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_stop_execution",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->stop_execution();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_execution_stopped(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_execution_stopped",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->execution_stopped();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_filelocale(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_filelocale",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->filelocale();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_filecharset(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_filecharset",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->filecharset();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_set_filelocale(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_string *arg2 = 0 ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_report_set_filelocale",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    (arg1)->set_filelocale((hk_string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_set_filecharset(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_string *arg2 = 0 ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_report_set_filecharset",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    (arg1)->set_filecharset((hk_string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_set_useencodingtab(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_report_set_useencodingtab",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->set_useencodingtab(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_useencodingtab(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_useencodingtab",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->useencodingtab();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_encodingtab(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_encodingtab *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_encodingtab",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_encodingtab *)((hk_report const *)arg1)->encodingtab();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_encodingtab, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_set_print_full_pages_only(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    bool arg2 ;
    bool arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:hk_report_set_print_full_pages_only",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = PyInt_AsLong(obj2) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->set_print_full_pages_only(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_print_full_pages_only(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_print_full_pages_only",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->print_full_pages_only();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_set_fullpagereplacefunction(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_report_set_fullpagereplacefunction",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_fullpagereplacefunction((hk_string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_fullpagereplacefunction(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    recodefunctiontype *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_fullpagereplacefunction",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (recodefunctiontype *)(arg1)->fullpagereplacefunction();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_recodefunctiontype, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_fullpagereplacefunctionstring(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_fullpagereplacefunctionstring",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->fullpagereplacefunctionstring();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_add_fullpagereplacefunctiontype(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    recodefunctiontype *arg2 = (recodefunctiontype *) 0 ;
    hk_string temp1 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_report_add_fullpagereplacefunctiontype",&obj0,&obj1)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = hk_string(PyString_AsString(obj0));
            arg1 = &temp1;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_recodefunctiontype,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    hk_report::add_fullpagereplacefunctiontype((hk_string const &)*arg1,arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_fullpagereplacefunctionlist(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    list<hk_string > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":hk_report_fullpagereplacefunctionlist")) goto fail;
    result = (list<hk_string > *)hk_report::fullpagereplacefunctionlist();
    
    {
        int s=result->size();
        resultobj=PyList_New(s);
        list<hk_string>::iterator it=result->begin();
        int i=0;
        while (it!=result->end())
        {
            PyObject* o= PyString_FromString((*it).c_str());
            PyList_SetItem(resultobj,i,o);
            ++it;
            ++i;
        }
        
        
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_set_embedfonts(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    bool arg1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_report_set_embedfonts",&obj0)) goto fail;
    arg1 = PyInt_AsLong(obj0) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    hk_report::set_embedfonts(arg1);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_embedfonts(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    bool result;
    
    if(!PyArg_ParseTuple(args,(char *)":hk_report_embedfonts")) goto fail;
    result = (bool)hk_report::embedfonts();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_report_tag_value(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    int arg2 ;
    bool *arg3 = 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OiO:hk_report_tag_value",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_bool,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (arg1)->tag_value(arg2,*arg3);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * hk_report_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_hk_report, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_currentreport(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *result;
    
    if(!PyArg_ParseTuple(args,(char *)":currentreport")) goto fail;
    result = (hk_report *)currentreport();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_report, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_struct_countnumbers_sum_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct_countnumbers *arg1 = (struct_countnumbers *) 0 ;
    number arg2 ;
    number *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:struct_countnumbers_sum_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_struct_countnumbers,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_number,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    if (arg1) (arg1)->sum = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_struct_countnumbers_sum_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct_countnumbers *arg1 = (struct_countnumbers *) 0 ;
    number result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:struct_countnumbers_sum_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_struct_countnumbers,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result =  ((arg1)->sum);
    
    {
        number * resultptr;
        resultptr = new number((number &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_number, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_struct_countnumbers_min_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct_countnumbers *arg1 = (struct_countnumbers *) 0 ;
    number arg2 ;
    number *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:struct_countnumbers_min_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_struct_countnumbers,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_number,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    if (arg1) (arg1)->min = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_struct_countnumbers_min_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct_countnumbers *arg1 = (struct_countnumbers *) 0 ;
    number result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:struct_countnumbers_min_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_struct_countnumbers,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result =  ((arg1)->min);
    
    {
        number * resultptr;
        resultptr = new number((number &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_number, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_struct_countnumbers_max_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct_countnumbers *arg1 = (struct_countnumbers *) 0 ;
    number arg2 ;
    number *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:struct_countnumbers_max_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_struct_countnumbers,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_number,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    if (arg1) (arg1)->max = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_struct_countnumbers_max_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct_countnumbers *arg1 = (struct_countnumbers *) 0 ;
    number result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:struct_countnumbers_max_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_struct_countnumbers,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result =  ((arg1)->max);
    
    {
        number * resultptr;
        resultptr = new number((number &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_number, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_struct_countnumbers_value_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct_countnumbers *arg1 = (struct_countnumbers *) 0 ;
    number arg2 ;
    number *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:struct_countnumbers_value_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_struct_countnumbers,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_number,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    if (arg1) (arg1)->value = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_struct_countnumbers_value_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct_countnumbers *arg1 = (struct_countnumbers *) 0 ;
    number result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:struct_countnumbers_value_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_struct_countnumbers,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result =  ((arg1)->value);
    
    {
        number * resultptr;
        resultptr = new number((number &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_number, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_struct_countnumbers_count_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct_countnumbers *arg1 = (struct_countnumbers *) 0 ;
    unsigned long arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:struct_countnumbers_count_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_struct_countnumbers,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned long) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    if (arg1) (arg1)->count = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_struct_countnumbers_count_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct_countnumbers *arg1 = (struct_countnumbers *) 0 ;
    unsigned long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:struct_countnumbers_count_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_struct_countnumbers,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (unsigned long) ((arg1)->count);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_struct_countnumbers_squaresum_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct_countnumbers *arg1 = (struct_countnumbers *) 0 ;
    longnumber arg2 ;
    longnumber *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:struct_countnumbers_squaresum_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_struct_countnumbers,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_longnumber,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    if (arg1) (arg1)->squaresum = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_struct_countnumbers_squaresum_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct_countnumbers *arg1 = (struct_countnumbers *) 0 ;
    longnumber result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:struct_countnumbers_squaresum_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_struct_countnumbers,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result =  ((arg1)->squaresum);
    
    {
        longnumber * resultptr;
        resultptr = new longnumber((longnumber &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_longnumber, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_struct_countnumbers_colname_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct_countnumbers *arg1 = (struct_countnumbers *) 0 ;
    char *arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:struct_countnumbers_colname_set",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_struct_countnumbers,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (arg2) strncpy(arg1->colname,arg2,75);
        else arg1->colname[0] = 0;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_struct_countnumbers_colname_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct_countnumbers *arg1 = (struct_countnumbers *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:struct_countnumbers_colname_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_struct_countnumbers,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (char *)(char *) ((arg1)->colname);
    
    resultobj = PyString_FromString(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_struct_countnumbers(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct_countnumbers *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_struct_countnumbers")) goto fail;
    result = (struct_countnumbers *)new struct_countnumbers();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_struct_countnumbers, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_struct_countnumbers(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct_countnumbers *arg1 = (struct_countnumbers *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_struct_countnumbers",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_struct_countnumbers,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * struct_countnumbers_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_struct_countnumbers, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_hk_reportsection_set_unique(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    bool arg2 = (bool) true ;
    bool arg3 = (bool) false ;
    bool arg4 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|OOO:hk_reportsection_set_unique",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = PyInt_AsLong(obj1) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj3) {
        arg4 = PyInt_AsLong(obj3) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_unique(arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_unique(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportsection_unique",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->unique();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_new_data(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    hk_reportdata *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportsection_new_data",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_reportdata *)(arg1)->new_data();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_reportdata, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_data_at(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    unsigned int arg2 ;
    hk_reportdata *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_reportsection_data_at",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    result = (hk_reportdata *)(arg1)->data_at(arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_reportdata, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_datalist(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    std::vector<hk_reportdata * > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportsection_datalist",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (std::vector<hk_reportdata * > *)(arg1)->datalist();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorThk_reportdata_p_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_actual_string(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportsection_actual_string",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->actual_string();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_sectionbegin(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportsection_sectionbegin",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->sectionbegin();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_set_sectionbegin(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_reportsection_set_sectionbegin",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_sectionbegin((hk_string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_sectionend(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportsection_sectionend",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->sectionend();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_set_sectionend(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_reportsection_set_sectionend",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_sectionend((hk_string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_betweendata(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportsection_betweendata",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->betweendata();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_set_betweendata(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_reportsection_set_betweendata",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_betweendata((hk_string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_new_uniquevalue(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    bool arg2 = (bool) false ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:hk_reportsection_new_uniquevalue",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = PyInt_AsLong(obj1) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (bool)(arg1)->new_uniquevalue(arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_endsection(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportsection_endsection",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->endsection();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_set_automatic_create_data(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    bool arg2 = (bool) true ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|OO:hk_reportsection_set_automatic_create_data",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = PyInt_AsLong(obj1) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_automatic_create_data(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_new_page_after_section(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportsection_new_page_after_section",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->new_page_after_section();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_set_new_page_after_section(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    bool arg2 ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_reportsection_set_new_page_after_section",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_new_page_after_section(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_section_was_printed(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportsection_section_was_printed",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->section_was_printed();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_set_subreport(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    hk_string const &arg2_defvalue = "" ;
    hk_string *arg2 = (hk_string *) &arg2_defvalue ;
    bool arg3 = (bool) false ;
    bool arg4 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|OOO:hk_reportsection_set_subreport",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        {
            if (PyString_Check(obj1)) {
                temp2 = hk_string(PyString_AsString(obj1));
                arg2 = &temp2;
            } else {
                SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
            }
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj3) {
        arg4 = PyInt_AsLong(obj3) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_subreport((hk_string const &)*arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_subreportname(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportsection_subreportname",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->subreportname();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_subreport(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    hk_report *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportsection_subreport",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_report *)(arg1)->subreport();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_report, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_add_depending_fields(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    hk_string *arg2 = 0 ;
    hk_string *arg3 = 0 ;
    bool arg4 = (bool) true ;
    hk_string temp2 ;
    hk_string temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO|O:hk_reportsection_add_depending_fields",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    {
        if (PyString_Check(obj2)) {
            temp3 = hk_string(PyString_AsString(obj2));
            arg3 = &temp3;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj3) {
        arg4 = PyInt_AsLong(obj3) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->add_depending_fields((hk_string const &)*arg2,(hk_string const &)*arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_clear_depending_fields(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportsection_clear_depending_fields",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->clear_depending_fields();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_depending_on_thisreportfields(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    list<hk_string > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportsection_depending_on_thisreportfields",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (list<hk_string > *)(arg1)->depending_on_thisreportfields();
    
    {
        int s=result->size();
        resultobj=PyList_New(s);
        list<hk_string>::iterator it=result->begin();
        int i=0;
        while (it!=result->end())
        {
            PyObject* o= PyString_FromString((*it).c_str());
            PyList_SetItem(resultobj,i,o);
            ++it;
            ++i;
        }
        
        
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_depending_on_subreportfields(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    list<hk_string > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportsection_depending_on_subreportfields",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (list<hk_string > *)(arg1)->depending_on_subreportfields();
    
    {
        int s=result->size();
        resultobj=PyList_New(s);
        list<hk_string>::iterator it=result->begin();
        int i=0;
        while (it!=result->end())
        {
            PyObject* o= PyString_FromString((*it).c_str());
            PyList_SetItem(resultobj,i,o);
            ++it;
            ++i;
        }
        
        
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_print_subreport_before_data(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportsection_print_subreport_before_data",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->print_subreport_before_data();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_print_subreport(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportsection_print_subreport",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->print_subreport();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_set_replacefunction(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_reportsection_set_replacefunction",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_replacefunction((hk_string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_replace(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    hk_string *arg2 = 0 ;
    hk_string result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_reportsection_replace",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = (arg1)->replace((hk_string const &)*arg2);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_add_sectionreplacefunctiontype(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    section_replacefunctiontype *arg2 = (section_replacefunctiontype *) 0 ;
    hk_string temp1 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_reportsection_add_sectionreplacefunctiontype",&obj0,&obj1)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = hk_string(PyString_AsString(obj0));
            arg1 = &temp1;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_section_replacefunctiontype,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    hk_reportsection::add_sectionreplacefunctiontype((hk_string const &)*arg1,arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_sectionreplacefunctionlist(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    list<hk_string > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":hk_reportsection_sectionreplacefunctionlist")) goto fail;
    result = (list<hk_string > *)hk_reportsection::sectionreplacefunctionlist();
    
    {
        int s=result->size();
        resultobj=PyList_New(s);
        list<hk_string>::iterator it=result->begin();
        int i=0;
        while (it!=result->end())
        {
            PyObject* o= PyString_FromString((*it).c_str());
            PyList_SetItem(resultobj,i,o);
            ++it;
            ++i;
        }
        
        
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_reset_count(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportsection_reset_count",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->reset_count();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_font(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    hk_font result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportsection_font",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->font();
    
    {
        hk_font * resultptr;
        resultptr = new hk_font((hk_font &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_hk_font, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_counts_as(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    unsigned long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportsection_counts_as",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (unsigned long)(arg1)->counts_as();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_add_sectioncountfunctiontype(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    reportsectioncounttype *arg2 = (reportsectioncounttype *) 0 ;
    hk_string temp1 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_reportsection_add_sectioncountfunctiontype",&obj0,&obj1)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = hk_string(PyString_AsString(obj0));
            arg1 = &temp1;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_reportsectioncounttype,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    hk_reportsection::add_sectioncountfunctiontype((hk_string const &)*arg1,arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_sectioncountfunctionlist(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    list<hk_string > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":hk_reportsection_sectioncountfunctionlist")) goto fail;
    result = (list<hk_string > *)hk_reportsection::sectioncountfunctionlist();
    
    {
        int s=result->size();
        resultobj=PyList_New(s);
        list<hk_string>::iterator it=result->begin();
        int i=0;
        while (it!=result->end())
        {
            PyObject* o= PyString_FromString((*it).c_str());
            PyList_SetItem(resultobj,i,o);
            ++it;
            ++i;
        }
        
        
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_set_sectioncountfunction(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_reportsection_set_sectioncountfunction",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_sectioncountfunction((hk_string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_sectioncountfunctionstring(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportsection_sectioncountfunctionstring",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->sectioncountfunctionstring();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_sectioncountfunction(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    reportsectioncounttype *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportsection_sectioncountfunction",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (reportsectioncounttype *)(arg1)->sectioncountfunction();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_reportsectioncounttype, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_savedata(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    ostream *arg2 = 0 ;
    bool arg3 = (bool) false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_reportsection_savedata",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_ostream,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->savedata(*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_loaddata(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    xmlNodePtr arg2 ;
    bool arg3 = (bool) false ;
    xmlNodePtr *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_reportsection_loaddata",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_xmlNodePtr,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->loaddata(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_set_datasource(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    hk_datasource *arg2 = (hk_datasource *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_reportsection_set_datasource",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->set_datasource(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_set_presentationdatasource(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    long arg2 ;
    bool arg3 = (bool) true ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Ol|O:hk_reportsection_set_presentationdatasource",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (bool)(arg1)->set_presentationdatasource(arg2,arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_default_reportdata(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportsection_default_reportdata",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->default_reportdata();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_set_default_reportdata(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_reportsection_set_default_reportdata",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_default_reportdata((hk_string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_default_beforereportdata(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportsection_default_beforereportdata",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->default_beforereportdata();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_set_default_beforereportdata(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_reportsection_set_default_beforereportdata",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_default_beforereportdata((hk_string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_default_afterreportdata(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportsection_default_afterreportdata",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->default_afterreportdata();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_set_default_afterreportdata(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_reportsection_set_default_afterreportdata",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_default_afterreportdata((hk_string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_set_default_reportdataconfigurefunction(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_reportsection_set_default_reportdataconfigurefunction",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_default_reportdataconfigurefunction((hk_string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_default_reportdataconfigurefunction(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportsection_default_reportdataconfigurefunction",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->default_reportdataconfigurefunction();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_default_reportprecision(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportsection_default_reportprecision",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->default_reportprecision();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_set_default_reportprecision(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    int arg2 ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi|O:hk_reportsection_set_default_reportprecision",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_default_reportprecision(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_default_use_reportseparator(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportsection_default_use_reportseparator",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->default_use_reportseparator();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_set_default_use_reportseparator(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    bool arg2 ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_reportsection_set_default_use_reportseparator",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_default_use_reportseparator(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_neutralize_definition(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_reportsection_neutralize_definition",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->neutralize_definition(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_reset(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportsection_reset",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->reset();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_clear_countingfields(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportsection_clear_countingfields",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->clear_countingfields();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_remove_data(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    hk_reportdata *arg2 = (hk_reportdata *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_reportsection_remove_data",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->remove_data(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_report(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    hk_report *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportsection_report",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_report *)(arg1)->report();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_report, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_horizontal2relativ(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    unsigned int arg2 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_reportsection_horizontal2relativ",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    result = (unsigned int)(arg1)->horizontal2relativ(arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_vertical2relativ(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    unsigned int arg2 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_reportsection_vertical2relativ",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    result = (unsigned int)(arg1)->vertical2relativ(arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_relativ2horizontal(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    unsigned int arg2 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_reportsection_relativ2horizontal",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    result = (unsigned int)(arg1)->relativ2horizontal(arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_relativ2vertical(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    unsigned int arg2 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_reportsection_relativ2vertical",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    result = (unsigned int)(arg1)->relativ2vertical(arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_reportsectionpair(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    hk_reportsectionpair *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportsection_reportsectionpair",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_reportsectionpair *)(arg1)->reportsectionpair();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_reportsectionpair, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_set_offset(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    unsigned int arg2 ;
    bool arg3 = (bool) true ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_reportsection_set_offset",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (bool)(arg1)->set_offset(arg2,arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_offset(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportsection_offset",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (unsigned int)(arg1)->offset();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_bulk_operation(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:hk_reportsection_bulk_operation",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->bulk_operation((hk_presentation::enum_bulkoperation )arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_set_automaticcreatedatafunction(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    reportsectionautomaticcreatedatatype *arg2 = (reportsectionautomaticcreatedatatype *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_reportsection_set_automaticcreatedatafunction",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_reportsectionautomaticcreatedatatype,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->set_automaticcreatedatafunction(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_automaticcreatedatafunction(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    reportsectionautomaticcreatedatatype *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportsection_automaticcreatedatafunction",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (reportsectionautomaticcreatedatatype *)(arg1)->automaticcreatedatafunction();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_reportsectionautomaticcreatedatatype, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_get_reportdatavisible__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    long arg2 ;
    hk_reportdata *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Ol:hk_reportsection_get_reportdatavisible",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_reportdata *)(arg1)->get_reportdatavisible(arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_reportdata, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_get_reportdatavisible__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    hk_string *arg2 = 0 ;
    hk_reportdata *result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_reportsection_get_reportdatavisible",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = (hk_reportdata *)(arg1)->get_reportdatavisible((hk_string const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_reportdata, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_get_reportdatavisible(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_reportsection, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_hk_reportsection_get_reportdatavisible__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_reportsection, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                return _wrap_hk_reportsection_get_reportdatavisible__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'hk_reportsection_get_reportdatavisible'");
    return NULL;
}


static PyObject *_wrap_hk_reportsection_is_fully_printed(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportsection_is_fully_printed",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->is_fully_printed();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_set_print_section(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_reportsection_set_print_section",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->set_print_section(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsection_print_section(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportsection_print_section",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->print_section();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * hk_reportsection_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_hk_reportsection, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_hk_reportsectionpair(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsectionpair *arg1 = (hk_reportsectionpair *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_hk_reportsectionpair",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsectionpair,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsectionpair_headersection(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsectionpair *arg1 = (hk_reportsectionpair *) 0 ;
    hk_reportsection *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportsectionpair_headersection",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsectionpair,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_reportsection *)(arg1)->headersection();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_reportsection, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsectionpair_footersection(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsectionpair *arg1 = (hk_reportsectionpair *) 0 ;
    hk_reportsection *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportsectionpair_footersection",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsectionpair,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_reportsection *)(arg1)->footersection();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_reportsection, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsectionpair_set_sections(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsectionpair *arg1 = (hk_reportsectionpair *) 0 ;
    bool arg2 = (bool) true ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|OO:hk_reportsectionpair_set_sections",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsectionpair,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = PyInt_AsLong(obj1) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_sections(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsectionpair_init_sections(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsectionpair *arg1 = (hk_reportsectionpair *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportsectionpair_init_sections",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsectionpair,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->init_sections();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsectionpair_set_columnname(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsectionpair *arg1 = (hk_reportsectionpair *) 0 ;
    hk_string *arg2 = 0 ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_reportsectionpair_set_columnname",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsectionpair,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    (arg1)->set_columnname((hk_string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsectionpair_set_ascending_order(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsectionpair *arg1 = (hk_reportsectionpair *) 0 ;
    bool arg2 ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_reportsectionpair_set_ascending_order",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsectionpair,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_ascending_order(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsectionpair_ascending_order(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsectionpair *arg1 = (hk_reportsectionpair *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportsectionpair_ascending_order",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsectionpair,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((hk_reportsectionpair const *)arg1)->ascending_order();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsectionpair_columnname(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsectionpair *arg1 = (hk_reportsectionpair *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportsectionpair_columnname",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsectionpair,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((hk_reportsectionpair const *)arg1)->columnname();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsectionpair_reset(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsectionpair *arg1 = (hk_reportsectionpair *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportsectionpair_reset",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsectionpair,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->reset();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsectionpair_clear_countingfields(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsectionpair *arg1 = (hk_reportsectionpair *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportsectionpair_clear_countingfields",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsectionpair,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->clear_countingfields();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsectionpair_savedata(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsectionpair *arg1 = (hk_reportsectionpair *) 0 ;
    ostream *arg2 = 0 ;
    bool arg3 = (bool) false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_reportsectionpair_savedata",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsectionpair,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_ostream,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->savedata(*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsectionpair_loaddata(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsectionpair *arg1 = (hk_reportsectionpair *) 0 ;
    xmlNodePtr arg2 ;
    bool arg3 = (bool) false ;
    xmlNodePtr *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_reportsectionpair_loaddata",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsectionpair,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_xmlNodePtr,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->loaddata(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsectionpair_set_presentationdatasource(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsectionpair *arg1 = (hk_reportsectionpair *) 0 ;
    long arg2 ;
    bool arg3 = (bool) true ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Ol|O:hk_reportsectionpair_set_presentationdatasource",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsectionpair,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (bool)(arg1)->set_presentationdatasource(arg2,arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsectionpair_presentationdatasource(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsectionpair *arg1 = (hk_reportsectionpair *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportsectionpair_presentationdatasource",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsectionpair,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (long)(arg1)->presentationdatasource();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsectionpair_neutralize_definition(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsectionpair *arg1 = (hk_reportsectionpair *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_reportsectionpair_neutralize_definition",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsectionpair,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->neutralize_definition(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportsectionpair_bulk_operation(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsectionpair *arg1 = (hk_reportsectionpair *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:hk_reportsectionpair_bulk_operation",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsectionpair,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->bulk_operation((hk_presentation::enum_bulkoperation )arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * hk_reportsectionpair_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_hk_reportsectionpair, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_hk_reportdata_set_data(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_reportdata_set_data",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_data((hk_string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_data(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportdata_data",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->data();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_set_beforedata(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_reportdata_set_beforedata",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_beforedata((hk_string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_set_afterdata(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_reportdata_set_afterdata",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_afterdata((hk_string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_beforedata(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportdata_beforedata",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->beforedata();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_afterdata(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportdata_afterdata",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->afterdata();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_actual_string(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportdata_actual_string",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->actual_string();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_count(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportdata_count",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->count();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_set_runningcount(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    bool arg2 = (bool) true ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|OO:hk_reportdata_set_runningcount",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = PyInt_AsLong(obj1) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_runningcount(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_runningcount(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportdata_runningcount",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->runningcount();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_font(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    hk_font result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportdata_font",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->font();
    
    {
        hk_font * resultptr;
        resultptr = new hk_font((hk_font &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_hk_font, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_set_datacountfunction(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:hk_reportdata_set_datacountfunction",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    arg3 = PyInt_AsLong(obj2) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->set_datacountfunction((hk_string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_datacountfunctionstring(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportdata_datacountfunctionstring",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->datacountfunctionstring();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_datacountfunction(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    reportdatacounttype *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportdata_datacountfunction",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (reportdatacounttype *)(arg1)->datacountfunction();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_reportdatacounttype, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_set_topline(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    bool arg2 = (bool) true ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|OO:hk_reportdata_set_topline",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = PyInt_AsLong(obj1) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_topline(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_set_bottomline(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    bool arg2 = (bool) true ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|OO:hk_reportdata_set_bottomline",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = PyInt_AsLong(obj1) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_bottomline(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_set_leftline(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    bool arg2 = (bool) true ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|OO:hk_reportdata_set_leftline",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = PyInt_AsLong(obj1) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_leftline(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_set_rightline(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    bool arg2 = (bool) true ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|OO:hk_reportdata_set_rightline",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = PyInt_AsLong(obj1) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_rightline(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_set_diagonalluro(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    bool arg2 = (bool) true ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|OO:hk_reportdata_set_diagonalluro",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = PyInt_AsLong(obj1) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_diagonalluro(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_set_diagonalloru(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    bool arg2 = (bool) true ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|OO:hk_reportdata_set_diagonalloru",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = PyInt_AsLong(obj1) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_diagonalloru(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_diagonalloru(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportdata_diagonalloru",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->diagonalloru();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_topline(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportdata_topline",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->topline();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_bottomline(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportdata_bottomline",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->bottomline();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_leftline(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportdata_leftline",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->leftline();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_rightline(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportdata_rightline",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->rightline();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_diagonalluro(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportdata_diagonalluro",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->diagonalluro();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_set_frame(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    bool arg2 = (bool) true ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|OO:hk_reportdata_set_frame",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = PyInt_AsLong(obj1) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_frame(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_set_linebreak(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    bool arg2 = (bool) true ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|OO:hk_reportdata_set_linebreak",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = PyInt_AsLong(obj1) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_linebreak(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_linebreak(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportdata_linebreak",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->linebreak();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_set_dynamic_height(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    bool arg2 ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_reportdata_set_dynamic_height",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_dynamic_height(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_dynamic_height(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportdata_dynamic_height",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((hk_reportdata const *)arg1)->dynamic_height();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_set_configurefunction(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_reportdata_set_configurefunction",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_configurefunction((hk_string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_configurefunction(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    data_configurefunctiontype *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportdata_configurefunction",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (data_configurefunctiontype *)(arg1)->configurefunction();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_data_configurefunctiontype, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_configurefunctionstring(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportdata_configurefunctionstring",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->configurefunctionstring();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_savedata(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    ostream *arg2 = 0 ;
    bool arg3 = (bool) false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_reportdata_savedata",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_ostream,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->savedata(*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_loaddata(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    xmlNodePtr arg2 ;
    bool arg3 = (bool) false ;
    xmlNodePtr *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_reportdata_loaddata",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_xmlNodePtr,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->loaddata(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_neutralize_definition(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_reportdata_neutralize_definition",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->neutralize_definition(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_add_configurefunctiontype(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    data_configurefunctiontype *arg2 = (data_configurefunctiontype *) 0 ;
    hk_string temp1 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_reportdata_add_configurefunctiontype",&obj0,&obj1)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = hk_string(PyString_AsString(obj0));
            arg1 = &temp1;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_data_configurefunctiontype,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    hk_reportdata::add_configurefunctiontype((hk_string const &)*arg1,arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_configurefunctionlist(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    list<hk_string > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":hk_reportdata_configurefunctionlist")) goto fail;
    result = (list<hk_string > *)hk_reportdata::configurefunctionlist();
    
    {
        int s=result->size();
        resultobj=PyList_New(s);
        list<hk_string>::iterator it=result->begin();
        int i=0;
        while (it!=result->end())
        {
            PyObject* o= PyString_FromString((*it).c_str());
            PyList_SetItem(resultobj,i,o);
            ++it;
            ++i;
        }
        
        
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_add_datacountfunctiontype(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    reportdatacounttype *arg2 = (reportdatacounttype *) 0 ;
    hk_string temp1 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_reportdata_add_datacountfunctiontype",&obj0,&obj1)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = hk_string(PyString_AsString(obj0));
            arg1 = &temp1;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_reportdatacounttype,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    hk_reportdata::add_datacountfunctiontype((hk_string const &)*arg1,arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_datacountfunctionlist(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    list<hk_string > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":hk_reportdata_datacountfunctionlist")) goto fail;
    result = (list<hk_string > *)hk_reportdata::datacountfunctionlist();
    
    {
        int s=result->size();
        resultobj=PyList_New(s);
        list<hk_string>::iterator it=result->begin();
        int i=0;
        while (it!=result->end())
        {
            PyObject* o= PyString_FromString((*it).c_str());
            PyList_SetItem(resultobj,i,o);
            ++it;
            ++i;
        }
        
        
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_set_replacefunction(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_reportdata_set_replacefunction",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_replacefunction((hk_string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_add_datareplacefunctiontype(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    data_replacefunctiontype *arg2 = (data_replacefunctiontype *) 0 ;
    hk_string temp1 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_reportdata_add_datareplacefunctiontype",&obj0,&obj1)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = hk_string(PyString_AsString(obj0));
            arg1 = &temp1;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_data_replacefunctiontype,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    hk_reportdata::add_datareplacefunctiontype((hk_string const &)*arg1,arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_datareplacefunctionlist(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    list<hk_string > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":hk_reportdata_datareplacefunctionlist")) goto fail;
    result = (list<hk_string > *)hk_reportdata::datareplacefunctionlist();
    
    {
        int s=result->size();
        resultobj=PyList_New(s);
        list<hk_string>::iterator it=result->begin();
        int i=0;
        while (it!=result->end())
        {
            PyObject* o= PyString_FromString((*it).c_str());
            PyList_SetItem(resultobj,i,o);
            ++it;
            ++i;
        }
        
        
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_reset_count(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportdata_reset_count",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->reset_count();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_report(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    hk_report *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportdata_report",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_report *)(arg1)->report();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_report, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_section(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    hk_reportsection *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportdata_section",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_reportsection *)(arg1)->section();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_reportsection, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_lower_widget(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    bool arg2 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:hk_reportdata_lower_widget",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = PyInt_AsLong(obj1) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->lower_widget(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_raise_widget(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    bool arg2 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:hk_reportdata_raise_widget",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = PyInt_AsLong(obj1) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->raise_widget(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_set_on_print_action(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_reportdata_set_on_print_action",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_on_print_action((hk_string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_on_print_action(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportdata_on_print_action",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->on_print_action();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_value_in_lines(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    list<hk_string > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportdata_value_in_lines",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (list<hk_string > *)(arg1)->value_in_lines();
    
    {
        int s=result->size();
        resultobj=PyList_New(s);
        list<hk_string>::iterator it=result->begin();
        int i=0;
        while (it!=result->end())
        {
            PyObject* o= PyString_FromString((*it).c_str());
            PyList_SetItem(resultobj,i,o);
            ++it;
            ++i;
        }
        
        
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_height(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportdata_height",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (unsigned int)(arg1)->height();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_data_fully_printed(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportdata_data_fully_printed",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->data_fully_printed();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_reset_data_fully_printed(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportdata_reset_data_fully_printed",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->reset_data_fully_printed();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_pagescount(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportdata_pagescount",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->pagescount();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_tag_value(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    int arg2 ;
    bool *arg3 = 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OiO:hk_reportdata_tag_value",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_bool,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (arg1)->tag_value(arg2,*arg3);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_column_value(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    hk_string *arg2 = 0 ;
    bool *arg3 = 0 ;
    hk_string result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:hk_reportdata_column_value",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_bool,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (arg1)->column_value((hk_string const &)*arg2,*arg3);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_set_is_image(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    bool arg2 ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_reportdata_set_is_image",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_is_image(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportdata_is_image(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportdata_is_image",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->is_image();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * hk_reportdata_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_hk_reportdata, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_currentreportdata(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *result;
    
    if(!PyArg_ParseTuple(args,(char *)":currentreportdata")) goto fail;
    result = (hk_reportdata *)currentreportdata();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_reportdata, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_hk_actionquery(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_actionquery *arg1 = (hk_actionquery *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_hk_actionquery",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_actionquery,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_actionquery_type(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_actionquery *arg1 = (hk_actionquery *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_actionquery_type",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_actionquery,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->type();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_actionquery_set_sql__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_actionquery *arg1 = (hk_actionquery *) 0 ;
    char *arg2 ;
    unsigned long arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OsO:hk_actionquery_set_sql",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_actionquery,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg3 = (unsigned long) PyInt_AsLong(obj2);
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->set_sql((char const *)arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_actionquery_set_sql__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_actionquery *arg1 = (hk_actionquery *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) false ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_actionquery_set_sql",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_actionquery,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_sql((hk_string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_actionquery_set_sql(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if ((argc >= 2) && (argc <= 3)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_actionquery, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                if (argc <= 2) {
                    return _wrap_hk_actionquery_set_sql__SWIG_1(self,args);
                }
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_hk_actionquery_set_sql__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_actionquery, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_hk_actionquery_set_sql__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'hk_actionquery_set_sql'");
    return NULL;
}


static PyObject *_wrap_hk_actionquery_sql(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_actionquery *arg1 = (hk_actionquery *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_actionquery_sql",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_actionquery,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (char *)(arg1)->sql();
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_actionquery_length(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_actionquery *arg1 = (hk_actionquery *) 0 ;
    unsigned long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_actionquery_length",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_actionquery,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (unsigned long)(arg1)->length();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_actionquery_execute(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_actionquery *arg1 = (hk_actionquery *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_actionquery_execute",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_actionquery,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->execute();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * hk_actionquery_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_hk_actionquery, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_hk_dsgrid(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *arg1 = (hk_form *) NULL ;
    hk_dsgrid *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"|O:new_hk_dsgrid",&obj0)) goto fail;
    if (obj0) {
        if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    }
    result = (hk_dsgrid *)new hk_dsgrid(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_dsgrid, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_hk_dsgrid(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgrid *arg1 = (hk_dsgrid *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_hk_dsgrid",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgrid,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgrid_gridcolumn__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgrid *arg1 = (hk_dsgrid *) 0 ;
    unsigned int arg2 ;
    hk_dsgridcolumn *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_dsgrid_gridcolumn",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgrid,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    result = (hk_dsgridcolumn *)(arg1)->gridcolumn(arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_dsgridcolumn, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgrid_gridcolumn__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgrid *arg1 = (hk_dsgrid *) 0 ;
    hk_string *arg2 = 0 ;
    hk_dsgridcolumn *result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_dsgrid_gridcolumn",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgrid,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = (hk_dsgridcolumn *)(arg1)->gridcolumn((hk_string const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_dsgridcolumn, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgrid_gridcolumn(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_dsgrid, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_hk_dsgrid_gridcolumn__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_dsgrid, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                return _wrap_hk_dsgrid_gridcolumn__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'hk_dsgrid_gridcolumn'");
    return NULL;
}


static PyObject *_wrap_hk_dsgrid_columnscount(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgrid *arg1 = (hk_dsgrid *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsgrid_columnscount",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgrid,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (unsigned int)(arg1)->columnscount();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgrid_set_gridcolumnwidth(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgrid *arg1 = (hk_dsgrid *) 0 ;
    unsigned int arg2 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOi:hk_dsgrid_set_gridcolumnwidth",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgrid,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->set_gridcolumnwidth(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgrid_change_columnposition(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgrid *arg1 = (hk_dsgrid *) 0 ;
    unsigned int arg2 ;
    unsigned int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:hk_dsgrid_change_columnposition",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgrid,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (unsigned int) PyInt_AsLong(obj2);
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->change_columnposition(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgrid_set_gridcolumns__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgrid *arg1 = (hk_dsgrid *) 0 ;
    std::vector<hk_dsgridcolumn > *arg2 = 0 ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_dsgrid_set_gridcolumns",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgrid,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_std__vectorThk_dsgridcolumn_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_gridcolumns(*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgrid_set_gridcolumns__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgrid *arg1 = (hk_dsgrid *) 0 ;
    list<hk_string > *arg2 = 0 ;
    list<hk_string > strlist2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_dsgrid_set_gridcolumns",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgrid,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (!PySequence_Check(obj1))
        {
            PyErr_SetString(PyExc_ValueError,hk_class::hk_translate("Expected a sequence").c_str());
            return NULL;
        }
        int i=PySequence_Length(obj1);
        int count=0;
        while (count < i)
        {
            PyObject *o=PySequence_GetItem(obj1,count);
            if (!PyString_Check(o))
            {
                PyErr_SetString(PyExc_ValueError,hk_class::hk_translate("Sequence elements must be strings").c_str());
                return NULL;
            }
            strlist2.insert(strlist2.end(),(hk_string)PyString_AsString(o));
            ++count;
        }
        arg2=&strlist2;
    }
    (arg1)->set_gridcolumns(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgrid_set_gridcolumns(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if ((argc >= 2) && (argc <= 3)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_dsgrid, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorThk_dsgridcolumn_t, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                if (argc <= 2) {
                    return _wrap_hk_dsgrid_set_gridcolumns__SWIG_0(self,args);
                }
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_hk_dsgrid_set_gridcolumns__SWIG_0(self,args);
                }
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_dsgrid, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_listThk_string_t, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_hk_dsgrid_set_gridcolumns__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'hk_dsgrid_set_gridcolumns'");
    return NULL;
}


static PyObject *_wrap_hk_dsgrid_clear_gridcolumn(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgrid *arg1 = (hk_dsgrid *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsgrid_clear_gridcolumn",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgrid,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->clear_gridcolumn();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgrid_set_hold_rowdefinition(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgrid *arg1 = (hk_dsgrid *) 0 ;
    bool arg2 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:hk_dsgrid_set_hold_rowdefinition",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgrid,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = PyInt_AsLong(obj1) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_hold_rowdefinition(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgrid_set_enablingbehaviour(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgrid *arg1 = (hk_dsgrid *) 0 ;
    bool arg2 ;
    bool arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:hk_dsgrid_set_enablingbehaviour",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgrid,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = PyInt_AsLong(obj2) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->set_enablingbehaviour(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgrid_savedata__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgrid *arg1 = (hk_dsgrid *) 0 ;
    ostream *arg2 = 0 ;
    bool arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:hk_dsgrid_savedata",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgrid,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_ostream,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    arg3 = PyInt_AsLong(obj2) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->savedata(*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgrid_savedata__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgrid *arg1 = (hk_dsgrid *) 0 ;
    ostream *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_dsgrid_savedata",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgrid,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_ostream,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    (arg1)->savedata(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgrid_savedata(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_dsgrid, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_ostream, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_hk_dsgrid_savedata__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_dsgrid, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_ostream, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_hk_dsgrid_savedata__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'hk_dsgrid_savedata'");
    return NULL;
}


static PyObject *_wrap_hk_dsgrid_loaddata(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgrid *arg1 = (hk_dsgrid *) 0 ;
    xmlNodePtr arg2 ;
    xmlNodePtr *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_dsgrid_loaddata",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgrid,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_xmlNodePtr,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    (arg1)->loaddata(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgrid_set_datasource(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgrid *arg1 = (hk_dsgrid *) 0 ;
    hk_datasource *arg2 = (hk_datasource *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_dsgrid_set_datasource",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgrid,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->set_datasource(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgrid_visible_columns(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgrid *arg1 = (hk_dsgrid *) 0 ;
    list<hk_string > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsgrid_visible_columns",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgrid,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (list<hk_string > *)(arg1)->visible_columns();
    
    {
        int s=result->size();
        resultobj=PyList_New(s);
        list<hk_string>::iterator it=result->begin();
        int i=0;
        while (it!=result->end())
        {
            PyObject* o= PyString_FromString((*it).c_str());
            PyList_SetItem(resultobj,i,o);
            ++it;
            ++i;
        }
        
        
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgrid_nonvisible_columns(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgrid *arg1 = (hk_dsgrid *) 0 ;
    list<hk_string > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsgrid_nonvisible_columns",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgrid,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (list<hk_string > *)(arg1)->nonvisible_columns();
    
    {
        int s=result->size();
        resultobj=PyList_New(s);
        list<hk_string>::iterator it=result->begin();
        int i=0;
        while (it!=result->end())
        {
            PyObject* o= PyString_FromString((*it).c_str());
            PyList_SetItem(resultobj,i,o);
            ++it;
            ++i;
        }
        
        
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgrid_save_table(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgrid *arg1 = (hk_dsgrid *) 0 ;
    hk_string const &arg2_defvalue = "" ;
    hk_string *arg2 = (hk_string *) &arg2_defvalue ;
    bool arg3 = (bool) true ;
    bool result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|OO:hk_dsgrid_save_table",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgrid,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        {
            if (PyString_Check(obj1)) {
                temp2 = hk_string(PyString_AsString(obj1));
                arg2 = &temp2;
            } else {
                SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
            }
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (bool)(arg1)->save_table((hk_string const &)*arg2,arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgrid_load_table(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgrid *arg1 = (hk_dsgrid *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsgrid_load_table",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgrid,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->load_table();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgrid_save_view(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgrid *arg1 = (hk_dsgrid *) 0 ;
    hk_string const &arg2_defvalue = "" ;
    hk_string *arg2 = (hk_string *) &arg2_defvalue ;
    bool arg3 = (bool) true ;
    bool result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|OO:hk_dsgrid_save_view",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgrid,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        {
            if (PyString_Check(obj1)) {
                temp2 = hk_string(PyString_AsString(obj1));
                arg2 = &temp2;
            } else {
                SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
            }
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (bool)(arg1)->save_view((hk_string const &)*arg2,arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgrid_load_view(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgrid *arg1 = (hk_dsgrid *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsgrid_load_view",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgrid,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->load_view();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgrid_set_rowheight(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgrid *arg1 = (hk_dsgrid *) 0 ;
    int arg2 ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi|O:hk_dsgrid_set_rowheight",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgrid,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_rowheight(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgrid_rowheight(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgrid *arg1 = (hk_dsgrid *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsgrid_rowheight",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgrid,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->rowheight();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * hk_dsgrid_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_hk_dsgrid, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_default_cellwidth_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable default_cellwidth is read-only.");
    return 1;
}


static PyObject *_wrap_default_cellwidth_get() {
    PyObject *pyobj;
    
    pyobj = PyInt_FromLong((long)default_cellwidth);
    return pyobj;
}


static int _wrap_default_cellheight_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable default_cellheight is read-only.");
    return 1;
}


static PyObject *_wrap_default_cellheight_get() {
    PyObject *pyobj;
    
    pyobj = PyInt_FromLong((long)default_cellheight);
    return pyobj;
}


static PyObject *_wrap_new_hk_dsgridcolumn(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgridcolumn *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_hk_dsgridcolumn")) goto fail;
    result = (hk_dsgridcolumn *)new hk_dsgridcolumn();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_dsgridcolumn, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_hk_dsgridcolumn(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgridcolumn *arg1 = (hk_dsgridcolumn *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_hk_dsgridcolumn",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgridcolumn,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgridcolumn_set_displayname(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgridcolumn *arg1 = (hk_dsgridcolumn *) 0 ;
    hk_string arg2 ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_dsgridcolumn_set_displayname",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgridcolumn,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1))
        arg2 = hk_string(PyString_AsString(obj1));
        else
        SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_displayname(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgridcolumn_displayname(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgridcolumn *arg1 = (hk_dsgridcolumn *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsgridcolumn_displayname",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgridcolumn,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->displayname();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgridcolumn_set_columntype(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgridcolumn *arg1 = (hk_dsgridcolumn *) 0 ;
    int arg2 ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi|O:hk_dsgridcolumn_set_columntype",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgridcolumn,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_columntype((hk_dsgridcolumn::enum_columntype )arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgridcolumn_columntype(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgridcolumn *arg1 = (hk_dsgridcolumn *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsgridcolumn_columntype",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgridcolumn,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->columntype();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgridcolumn_set_columnwidth(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgridcolumn *arg1 = (hk_dsgridcolumn *) 0 ;
    int arg2 ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi|O:hk_dsgridcolumn_set_columnwidth",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgridcolumn,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_columnwidth(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgridcolumn_columnwidth(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgridcolumn *arg1 = (hk_dsgridcolumn *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsgridcolumn_columnwidth",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgridcolumn,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->columnwidth();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgridcolumn_savedata(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgridcolumn *arg1 = (hk_dsgridcolumn *) 0 ;
    ostream *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_dsgridcolumn_savedata",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgridcolumn,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_ostream,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    (arg1)->savedata(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgridcolumn_loaddata(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgridcolumn *arg1 = (hk_dsgridcolumn *) 0 ;
    xmlNodePtr arg2 ;
    xmlNodePtr *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_dsgridcolumn_loaddata",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgridcolumn,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_xmlNodePtr,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    (arg1)->loaddata(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgridcolumn_set_listdatasource(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgridcolumn *arg1 = (hk_dsgridcolumn *) 0 ;
    hk_string *arg2 = 0 ;
    int arg3 = (int) dt_table ;
    bool arg4 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|iO:hk_dsgridcolumn_set_listdatasource",&obj0,&obj1,&arg3,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgridcolumn,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj3) {
        arg4 = PyInt_AsLong(obj3) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_listdatasource((hk_string const &)*arg2,(datasourcetype )arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgridcolumn_listdatasource(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgridcolumn *arg1 = (hk_dsgridcolumn *) 0 ;
    hk_datasource *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsgridcolumn_listdatasource",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgridcolumn,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_datasource *)(arg1)->listdatasource();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_datasource, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgridcolumn_listdatasourcename(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgridcolumn *arg1 = (hk_dsgridcolumn *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsgridcolumn_listdatasourcename",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgridcolumn,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->listdatasourcename();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgridcolumn_listdatasourcetype(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgridcolumn *arg1 = (hk_dsgridcolumn *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsgridcolumn_listdatasourcetype",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgridcolumn,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)((hk_dsgridcolumn const *)arg1)->listdatasourcetype();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgridcolumn_set_viewcolumnname(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgridcolumn *arg1 = (hk_dsgridcolumn *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_dsgridcolumn_set_viewcolumnname",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgridcolumn,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_viewcolumnname((hk_string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgridcolumn_viewcolumnname(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgridcolumn *arg1 = (hk_dsgridcolumn *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsgridcolumn_viewcolumnname",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgridcolumn,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->viewcolumnname();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgridcolumn_set_listcolumnname(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgridcolumn *arg1 = (hk_dsgridcolumn *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_dsgridcolumn_set_listcolumnname",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgridcolumn,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_listcolumnname((hk_string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgridcolumn_listcolumnname(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgridcolumn *arg1 = (hk_dsgridcolumn *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsgridcolumn_listcolumnname",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgridcolumn,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->listcolumnname();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgridcolumn_set_listpresentationdatasource(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgridcolumn *arg1 = (hk_dsgridcolumn *) 0 ;
    long arg2 ;
    bool arg3 = (bool) true ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Ol|O:hk_dsgridcolumn_set_listpresentationdatasource",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgridcolumn,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (bool)(arg1)->set_listpresentationdatasource(arg2,arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgridcolumn_listpresentationdatasource(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgridcolumn *arg1 = (hk_dsgridcolumn *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsgridcolumn_listpresentationdatasource",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgridcolumn,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (long)(arg1)->listpresentationdatasource();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgridcolumn_value_at(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgridcolumn *arg1 = (hk_dsgridcolumn *) 0 ;
    unsigned long arg2 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_dsgridcolumn_value_at",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgridcolumn,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned long) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    result = (arg1)->value_at(arg2);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgridcolumn_set_datasource(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgridcolumn *arg1 = (hk_dsgridcolumn *) 0 ;
    hk_datasource *arg2 = (hk_datasource *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_dsgridcolumn_set_datasource",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgridcolumn,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->set_datasource(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgridcolumn_combobox(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgridcolumn *arg1 = (hk_dsgridcolumn *) 0 ;
    hk_dscombobox *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsgridcolumn_combobox",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgridcolumn,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_dscombobox *)(arg1)->combobox();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_dscombobox, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgridcolumn_find(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgridcolumn *arg1 = (hk_dsgridcolumn *) 0 ;
    unsigned int arg2 ;
    unsigned int arg3 ;
    hk_string *arg4 = 0 ;
    bool arg5 = (bool) false ;
    bool arg6 = (bool) false ;
    bool arg7 = (bool) false ;
    unsigned int result;
    hk_string temp4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO|OOO:hk_dsgridcolumn_find",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgridcolumn,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (unsigned int) PyInt_AsLong(obj2);
    if (PyErr_Occurred()) SWIG_fail;
    {
        if (PyString_Check(obj3)) {
            temp4 = hk_string(PyString_AsString(obj3));
            arg4 = &temp4;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj4) {
        arg5 = PyInt_AsLong(obj4) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj5) {
        arg6 = PyInt_AsLong(obj5) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj6) {
        arg7 = PyInt_AsLong(obj6) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (unsigned int)(arg1)->find(arg2,arg3,(hk_string const &)*arg4,arg5,arg6,arg7);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgridcolumn_is_findstring(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgridcolumn *arg1 = (hk_dsgridcolumn *) 0 ;
    unsigned int arg2 ;
    hk_string *arg3 = 0 ;
    bool arg4 = (bool) false ;
    bool arg5 = (bool) false ;
    bool result;
    hk_string temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO|OO:hk_dsgridcolumn_is_findstring",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgridcolumn,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    {
        if (PyString_Check(obj2)) {
            temp3 = hk_string(PyString_AsString(obj2));
            arg3 = &temp3;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj3) {
        arg4 = PyInt_AsLong(obj3) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj4) {
        arg5 = PyInt_AsLong(obj4) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (bool)(arg1)->is_findstring(arg2,(hk_string const &)*arg3,arg4,arg5);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgridcolumn_action_on_click(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgridcolumn *arg1 = (hk_dsgridcolumn *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsgridcolumn_action_on_click",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgridcolumn,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->action_on_click();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgridcolumn_action_on_doubleclick(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgridcolumn *arg1 = (hk_dsgridcolumn *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsgridcolumn_action_on_doubleclick",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgridcolumn,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->action_on_doubleclick();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgridcolumn_action_on_close(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgridcolumn *arg1 = (hk_dsgridcolumn *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsgridcolumn_action_on_close",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgridcolumn,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->action_on_close();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgridcolumn_action_on_open(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgridcolumn *arg1 = (hk_dsgridcolumn *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsgridcolumn_action_on_open",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgridcolumn,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->action_on_open();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgridcolumn_action_before_store_changed_data(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgridcolumn *arg1 = (hk_dsgridcolumn *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsgridcolumn_action_before_store_changed_data",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgridcolumn,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->action_before_store_changed_data();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgridcolumn_action_after_store_changed_data(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgridcolumn *arg1 = (hk_dsgridcolumn *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsgridcolumn_action_after_store_changed_data",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgridcolumn,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->action_after_store_changed_data();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgridcolumn_action_before_row_change(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgridcolumn *arg1 = (hk_dsgridcolumn *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsgridcolumn_action_before_row_change",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgridcolumn,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->action_before_row_change();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgridcolumn_action_after_row_change(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgridcolumn *arg1 = (hk_dsgridcolumn *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsgridcolumn_action_after_row_change",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgridcolumn,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->action_after_row_change();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgridcolumn_action_before_delete(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgridcolumn *arg1 = (hk_dsgridcolumn *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsgridcolumn_action_before_delete",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgridcolumn,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->action_before_delete();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgridcolumn_action_after_delete(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgridcolumn *arg1 = (hk_dsgridcolumn *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsgridcolumn_action_after_delete",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgridcolumn,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->action_after_delete();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgridcolumn_action_before_insert(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgridcolumn *arg1 = (hk_dsgridcolumn *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsgridcolumn_action_before_insert",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgridcolumn,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->action_before_insert();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgridcolumn_action_after_insert(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgridcolumn *arg1 = (hk_dsgridcolumn *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsgridcolumn_action_after_insert",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgridcolumn,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->action_after_insert();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgridcolumn_action_on_getfocus(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgridcolumn *arg1 = (hk_dsgridcolumn *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsgridcolumn_action_on_getfocus",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgridcolumn,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->action_on_getfocus();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgridcolumn_action_on_loosefocus(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgridcolumn *arg1 = (hk_dsgridcolumn *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsgridcolumn_action_on_loosefocus",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgridcolumn,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->action_on_loosefocus();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgridcolumn_action_on_key(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgridcolumn *arg1 = (hk_dsgridcolumn *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsgridcolumn_action_on_key",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgridcolumn,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->action_on_key();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgridcolumn_action_on_select(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgridcolumn *arg1 = (hk_dsgridcolumn *) 0 ;
    hk_dscombobox *arg2 = (hk_dscombobox *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_dsgridcolumn_action_on_select",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgridcolumn,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_dscombobox,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->action_on_select(arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgridcolumn_on_select_action(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgridcolumn *arg1 = (hk_dsgridcolumn *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dsgridcolumn_on_select_action",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgridcolumn,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->on_select_action();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dsgridcolumn_set_on_select_action(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dsgridcolumn *arg1 = (hk_dsgridcolumn *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    bool arg4 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|OO:hk_dsgridcolumn_set_on_select_action",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dsgridcolumn,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj3) {
        arg4 = PyInt_AsLong(obj3) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_on_select_action((hk_string const &)*arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * hk_dsgridcolumn_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_hk_dsgridcolumn, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_hk_dscombobox(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_form *arg1 = (hk_form *) NULL ;
    hk_dscombobox *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"|O:new_hk_dscombobox",&obj0)) goto fail;
    if (obj0) {
        if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_form,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    }
    result = (hk_dscombobox *)new hk_dscombobox(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_dscombobox, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_hk_dscombobox(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dscombobox *arg1 = (hk_dscombobox *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_hk_dscombobox",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dscombobox,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dscombobox_set_listdatasource(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dscombobox *arg1 = (hk_dscombobox *) 0 ;
    hk_datasource *arg2 = (hk_datasource *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_dscombobox_set_listdatasource",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dscombobox,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->set_listdatasource(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dscombobox_listdatasource(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dscombobox *arg1 = (hk_dscombobox *) 0 ;
    hk_datasource *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dscombobox_listdatasource",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dscombobox,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_datasource *)(arg1)->listdatasource();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_datasource, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dscombobox_set_datasource(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dscombobox *arg1 = (hk_dscombobox *) 0 ;
    hk_datasource *arg2 = (hk_datasource *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_dscombobox_set_datasource",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dscombobox,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_datasource,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->set_datasource(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dscombobox_set_viewcolumnname(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dscombobox *arg1 = (hk_dscombobox *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_dscombobox_set_viewcolumnname",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dscombobox,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_viewcolumnname((hk_string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dscombobox_viewcolumnname(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dscombobox *arg1 = (hk_dscombobox *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dscombobox_viewcolumnname",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dscombobox,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->viewcolumnname();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dscombobox_set_listcolumnname(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dscombobox *arg1 = (hk_dscombobox *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_dscombobox_set_listcolumnname",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dscombobox,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_listcolumnname((hk_string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dscombobox_listcolumnname(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dscombobox *arg1 = (hk_dscombobox *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dscombobox_listcolumnname",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dscombobox,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->listcolumnname();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dscombobox_savedata(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dscombobox *arg1 = (hk_dscombobox *) 0 ;
    ostream *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_dscombobox_savedata",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dscombobox,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_ostream,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    (arg1)->savedata(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dscombobox_loaddata(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dscombobox *arg1 = (hk_dscombobox *) 0 ;
    xmlNodePtr arg2 ;
    xmlNodePtr *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_dscombobox_loaddata",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dscombobox,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_xmlNodePtr,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    (arg1)->loaddata(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dscombobox_set_listpresentationdatasource(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dscombobox *arg1 = (hk_dscombobox *) 0 ;
    long arg2 ;
    bool arg3 = (bool) true ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Ol|O:hk_dscombobox_set_listpresentationdatasource",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dscombobox,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (bool)(arg1)->set_listpresentationdatasource(arg2,arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dscombobox_listpresentationdatasource(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dscombobox *arg1 = (hk_dscombobox *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dscombobox_listpresentationdatasource",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dscombobox,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (long)(arg1)->listpresentationdatasource();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dscombobox_load_listitems(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dscombobox *arg1 = (hk_dscombobox *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dscombobox_load_listitems",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dscombobox,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->load_listitems();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dscombobox_set_mode(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dscombobox *arg1 = (hk_dscombobox *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:hk_dscombobox_set_mode",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dscombobox,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->set_mode((hk_dscombobox::enum_mode )arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dscombobox_mode(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dscombobox *arg1 = (hk_dscombobox *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dscombobox_mode",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dscombobox,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->mode();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dscombobox_value_at(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dscombobox *arg1 = (hk_dscombobox *) 0 ;
    unsigned long arg2 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_dscombobox_value_at",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dscombobox,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned long) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    result = (arg1)->value_at(arg2);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dscombobox_viewcolumn(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dscombobox *arg1 = (hk_dscombobox *) 0 ;
    hk_column *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dscombobox_viewcolumn",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dscombobox,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_column *)(arg1)->viewcolumn();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_column, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dscombobox_listcolumn(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dscombobox *arg1 = (hk_dscombobox *) 0 ;
    hk_column *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dscombobox_listcolumn",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dscombobox,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_column *)(arg1)->listcolumn();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_column, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dscombobox_set_gridcolumn(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dscombobox *arg1 = (hk_dscombobox *) 0 ;
    hk_dsgridcolumn *arg2 = (hk_dsgridcolumn *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_dscombobox_set_gridcolumn",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dscombobox,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_dsgridcolumn,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->set_gridcolumn(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dscombobox_gridcolumn(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dscombobox *arg1 = (hk_dscombobox *) 0 ;
    hk_dsgridcolumn *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dscombobox_gridcolumn",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dscombobox,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_dsgridcolumn *)((hk_dscombobox const *)arg1)->gridcolumn();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_dsgridcolumn, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dscombobox_set_use_textlist(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dscombobox *arg1 = (hk_dscombobox *) 0 ;
    bool arg2 ;
    bool arg3 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_dscombobox_set_use_textlist",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dscombobox,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_use_textlist(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dscombobox_use_textlist(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dscombobox *arg1 = (hk_dscombobox *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dscombobox_use_textlist",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dscombobox,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((hk_dscombobox const *)arg1)->use_textlist();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dscombobox_set_textlist(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dscombobox *arg1 = (hk_dscombobox *) 0 ;
    list<hk_string > *arg2 = 0 ;
    bool arg3 = (bool) true ;
    list<hk_string > strlist2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_dscombobox_set_textlist",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dscombobox,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (!PySequence_Check(obj1))
        {
            PyErr_SetString(PyExc_ValueError,hk_class::hk_translate("Expected a sequence").c_str());
            return NULL;
        }
        int i=PySequence_Length(obj1);
        int count=0;
        while (count < i)
        {
            PyObject *o=PySequence_GetItem(obj1,count);
            if (!PyString_Check(o))
            {
                PyErr_SetString(PyExc_ValueError,hk_class::hk_translate("Sequence elements must be strings").c_str());
                return NULL;
            }
            strlist2.insert(strlist2.end(),(hk_string)PyString_AsString(o));
            ++count;
        }
        arg2=&strlist2;
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_textlist(*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dscombobox_add_text(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dscombobox *arg1 = (hk_dscombobox *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_dscombobox_add_text",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dscombobox,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->add_text((hk_string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dscombobox_textlist(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dscombobox *arg1 = (hk_dscombobox *) 0 ;
    list<hk_string > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dscombobox_textlist",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dscombobox,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (list<hk_string > *)((hk_dscombobox const *)arg1)->textlist();
    
    {
        int s=result->size();
        resultobj=PyList_New(s);
        list<hk_string>::iterator it=result->begin();
        int i=0;
        while (it!=result->end())
        {
            PyObject* o= PyString_FromString((*it).c_str());
            PyList_SetItem(resultobj,i,o);
            ++it;
            ++i;
        }
        
        
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dscombobox_action_on_select(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dscombobox *arg1 = (hk_dscombobox *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dscombobox_action_on_select",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dscombobox,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->action_on_select();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dscombobox_on_select_action(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dscombobox *arg1 = (hk_dscombobox *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_dscombobox_on_select_action",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dscombobox,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->on_select_action();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_dscombobox_set_on_select_action(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_dscombobox *arg1 = (hk_dscombobox *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    bool arg4 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|OO:hk_dscombobox_set_on_select_action",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_dscombobox,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj3) {
        arg4 = PyInt_AsLong(obj3) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_on_select_action((hk_string const &)*arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * hk_dscombobox_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_hk_dscombobox, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_hk_subform(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_presentation *arg1 = (hk_presentation *) 0 ;
    hk_subform *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_hk_subform",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_presentation,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_subform *)new hk_subform(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_subform, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_hk_subform(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_subform *arg1 = (hk_subform *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_hk_subform",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_subform,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_subform_set_name(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_subform *arg1 = (hk_subform *) 0 ;
    hk_string *arg2 = 0 ;
    bool arg3 = (bool) true ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_subform_set_name",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_subform,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_name((hk_string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_subform_name(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_subform *arg1 = (hk_subform *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_subform_name",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_subform,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((hk_subform const *)arg1)->name();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_subform_subform(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_subform *arg1 = (hk_subform *) 0 ;
    hk_form *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_subform_subform",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_subform,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_form *)(arg1)->subform();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_form, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_subform_add_depending_fields(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_subform *arg1 = (hk_subform *) 0 ;
    hk_string *arg2 = 0 ;
    hk_string *arg3 = 0 ;
    bool arg4 = (bool) true ;
    hk_string temp2 ;
    hk_string temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO|O:hk_subform_add_depending_fields",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_subform,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    {
        if (PyString_Check(obj2)) {
            temp3 = hk_string(PyString_AsString(obj2));
            arg3 = &temp3;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj3) {
        arg4 = PyInt_AsLong(obj3) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->add_depending_fields((hk_string const &)*arg2,(hk_string const &)*arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_subform_clear_depending_fields(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_subform *arg1 = (hk_subform *) 0 ;
    bool arg2 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:hk_subform_clear_depending_fields",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_subform,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = PyInt_AsLong(obj1) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->clear_depending_fields(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_subform_activate_subform(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_subform *arg1 = (hk_subform *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_subform_activate_subform",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_subform,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->activate_subform();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_subform_depending_on_fields(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_subform *arg1 = (hk_subform *) 0 ;
    list<dependingclass > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_subform_depending_on_fields",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_subform,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (list<dependingclass > *)(arg1)->depending_on_fields();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_listTdependingt, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_subform_savedata__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_subform *arg1 = (hk_subform *) 0 ;
    ostream *arg2 = 0 ;
    bool arg3 ;
    bool arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:hk_subform_savedata",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_subform,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_ostream,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    arg3 = PyInt_AsLong(obj2) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = PyInt_AsLong(obj3) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->savedata(*arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_subform_savedata__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_subform *arg1 = (hk_subform *) 0 ;
    ostream *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_subform_savedata",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_subform,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_ostream,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    (arg1)->savedata(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_subform_savedata(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_subform, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_ostream, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_hk_subform_savedata__SWIG_1(self,args);
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_subform, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_ostream, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_hk_subform_savedata__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'hk_subform_savedata'");
    return NULL;
}


static PyObject *_wrap_hk_subform_loaddata(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_subform *arg1 = (hk_subform *) 0 ;
    xmlNodePtr arg2 ;
    xmlNodePtr *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_subform_loaddata",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_subform,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_xmlNodePtr,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    (arg1)->loaddata(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * hk_subform_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_hk_subform, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_hk_url__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_url *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_hk_url")) goto fail;
    result = (hk_url *)new hk_url();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_url, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_hk_url__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    hk_url *result;
    hk_string temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_hk_url",&obj0)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = hk_string(PyString_AsString(obj0));
            arg1 = &temp1;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = (hk_url *)new hk_url((hk_string const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_url, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_hk_url(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_hk_url__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            _v = PyString_Check(argv[0]) ? 1 : 0;
        }
        if (_v) {
            return _wrap_new_hk_url__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_hk_url'");
    return NULL;
}


static PyObject *_wrap_hk_url_is_valid(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_url *arg1 = (hk_url *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_url_is_valid",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_url,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((hk_url const *)arg1)->is_valid();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_url_is_local(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_url *arg1 = (hk_url *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_url_is_local",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_url,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((hk_url const *)arg1)->is_local();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_url_url(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_url *arg1 = (hk_url *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_url_url",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_url,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((hk_url const *)arg1)->url();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_url_filename(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_url *arg1 = (hk_url *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_url_filename",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_url,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((hk_url const *)arg1)->filename();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_url_directory(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_url *arg1 = (hk_url *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_url_directory",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_url,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((hk_url const *)arg1)->directory();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_url_extension(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_url *arg1 = (hk_url *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_url_extension",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_url,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((hk_url const *)arg1)->extension();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_hk_url(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_url *arg1 = (hk_url *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_hk_url",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_url,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * hk_url_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_hk_url, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_hk_datetime__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datetime *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_hk_datetime")) goto fail;
    result = (hk_datetime *)new hk_datetime();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_datetime, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_hk_datetime__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datetime *arg1 = 0 ;
    hk_datetime *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_hk_datetime",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datetime,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (hk_datetime *)new hk_datetime((hk_datetime const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_datetime, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_hk_datetime(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_hk_datetime__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_hk_datetime, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_hk_datetime__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_hk_datetime'");
    return NULL;
}


static PyObject *_wrap_delete_hk_datetime(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datetime *arg1 = (hk_datetime *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_hk_datetime",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datetime,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datetime_set_date(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datetime *arg1 = (hk_datetime *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oiii:hk_datetime_set_date",&obj0,&arg2,&arg3,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datetime,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->set_date(arg2,arg3,arg4);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datetime_set_time(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datetime *arg1 = (hk_datetime *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oiii:hk_datetime_set_time",&obj0,&arg2,&arg3,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datetime,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->set_time(arg2,arg3,arg4);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datetime_set_datetime(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datetime *arg1 = (hk_datetime *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    int arg6 ;
    int arg7 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oiiiiii:hk_datetime_set_datetime",&obj0,&arg2,&arg3,&arg4,&arg5,&arg6,&arg7)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datetime,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->set_datetime(arg2,arg3,arg4,arg5,arg6,arg7);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datetime_set_date_asstring(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datetime *arg1 = (hk_datetime *) 0 ;
    hk_string *arg2 = 0 ;
    bool result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_datetime_set_date_asstring",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datetime,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = (bool)(arg1)->set_date_asstring((hk_string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datetime_set_time_asstring(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datetime *arg1 = (hk_datetime *) 0 ;
    hk_string *arg2 = 0 ;
    bool result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_datetime_set_time_asstring",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datetime,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = (bool)(arg1)->set_time_asstring((hk_string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datetime_set_datetime_asstring(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datetime *arg1 = (hk_datetime *) 0 ;
    hk_string *arg2 = 0 ;
    bool result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_datetime_set_datetime_asstring",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datetime,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = (bool)(arg1)->set_datetime_asstring((hk_string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datetime_date_asstring(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datetime *arg1 = (hk_datetime *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datetime_date_asstring",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datetime,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((hk_datetime const *)arg1)->date_asstring();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datetime_time_asstring(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datetime *arg1 = (hk_datetime *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datetime_time_asstring",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datetime,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((hk_datetime const *)arg1)->time_asstring();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datetime_datetime_asstring(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datetime *arg1 = (hk_datetime *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datetime_datetime_asstring",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datetime,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((hk_datetime const *)arg1)->datetime_asstring();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datetime_set_dateformat(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datetime *arg1 = (hk_datetime *) 0 ;
    hk_string *arg2 = 0 ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_datetime_set_dateformat",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datetime,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    (arg1)->set_dateformat((hk_string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datetime_set_timeformat(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datetime *arg1 = (hk_datetime *) 0 ;
    hk_string *arg2 = 0 ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_datetime_set_timeformat",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datetime,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    (arg1)->set_timeformat((hk_string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datetime_set_datetimeformat(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datetime *arg1 = (hk_datetime *) 0 ;
    hk_string *arg2 = 0 ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_datetime_set_datetimeformat",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datetime,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    (arg1)->set_datetimeformat((hk_string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datetime_day(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datetime *arg1 = (hk_datetime *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datetime_day",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datetime,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)((hk_datetime const *)arg1)->day();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datetime_month(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datetime *arg1 = (hk_datetime *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datetime_month",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datetime,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)((hk_datetime const *)arg1)->month();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datetime_year(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datetime *arg1 = (hk_datetime *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datetime_year",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datetime,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)((hk_datetime const *)arg1)->year();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datetime_hour(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datetime *arg1 = (hk_datetime *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datetime_hour",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datetime,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)((hk_datetime const *)arg1)->hour();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datetime_minute(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datetime *arg1 = (hk_datetime *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datetime_minute",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datetime,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)((hk_datetime const *)arg1)->minute();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datetime_second(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datetime *arg1 = (hk_datetime *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datetime_second",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datetime,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)((hk_datetime const *)arg1)->second();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datetime_set_now(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datetime *arg1 = (hk_datetime *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_datetime_set_now",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datetime,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->set_now();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datetime___eq__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datetime *arg1 = (hk_datetime *) 0 ;
    hk_datetime *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_datetime___eq__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datetime,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_datetime,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (bool)(arg1)->operator ==((hk_datetime const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datetime___ne__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datetime *arg1 = (hk_datetime *) 0 ;
    hk_datetime *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_datetime___ne__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datetime,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_datetime,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (bool)(arg1)->operator !=((hk_datetime const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datetime___gt__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datetime *arg1 = (hk_datetime *) 0 ;
    hk_datetime *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_datetime___gt__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datetime,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_datetime,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (bool)(arg1)->operator >((hk_datetime const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datetime___ge__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datetime *arg1 = (hk_datetime *) 0 ;
    hk_datetime *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_datetime___ge__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datetime,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_datetime,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (bool)(arg1)->operator >=((hk_datetime const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datetime___lt__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datetime *arg1 = (hk_datetime *) 0 ;
    hk_datetime *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_datetime___lt__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datetime,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_datetime,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (bool)(arg1)->operator <((hk_datetime const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datetime___le__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datetime *arg1 = (hk_datetime *) 0 ;
    hk_datetime *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_datetime___le__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datetime,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_datetime,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (bool)(arg1)->operator <=((hk_datetime const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_datetime_difference(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_datetime *arg1 = (hk_datetime *) 0 ;
    hk_datetime *arg2 = 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_datetime_difference",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_datetime,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_datetime,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (double)(arg1)->difference((hk_datetime const &)*arg2);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * hk_datetime_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_hk_datetime, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_transfer_date(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    hk_string *arg2 = 0 ;
    hk_string *arg3 = 0 ;
    hk_string result;
    hk_string temp1 ;
    hk_string temp2 ;
    hk_string temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:transfer_date",&obj0,&obj1,&obj2)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = hk_string(PyString_AsString(obj0));
            arg1 = &temp1;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    {
        if (PyString_Check(obj2)) {
            temp3 = hk_string(PyString_AsString(obj2));
            arg3 = &temp3;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = transfer_date((hk_string const &)*arg1,(hk_string const &)*arg2,(hk_string const &)*arg3);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_transfer_time(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    hk_string *arg2 = 0 ;
    hk_string *arg3 = 0 ;
    hk_string result;
    hk_string temp1 ;
    hk_string temp2 ;
    hk_string temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:transfer_time",&obj0,&obj1,&obj2)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = hk_string(PyString_AsString(obj0));
            arg1 = &temp1;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    {
        if (PyString_Check(obj2)) {
            temp3 = hk_string(PyString_AsString(obj2));
            arg3 = &temp3;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = transfer_time((hk_string const &)*arg1,(hk_string const &)*arg2,(hk_string const &)*arg3);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_transfer_datetime(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    hk_string *arg2 = 0 ;
    hk_string *arg3 = 0 ;
    hk_string result;
    hk_string temp1 ;
    hk_string temp2 ;
    hk_string temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:transfer_datetime",&obj0,&obj1,&obj2)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = hk_string(PyString_AsString(obj0));
            arg1 = &temp1;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    {
        if (PyString_Check(obj2)) {
            temp3 = hk_string(PyString_AsString(obj2));
            arg3 = &temp3;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = transfer_datetime((hk_string const &)*arg1,(hk_string const &)*arg2,(hk_string const &)*arg3);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_colstruct(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    colstruct *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_colstruct")) goto fail;
    result = (colstruct *)new colstruct();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_colstruct, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_colstruct_colname_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    colstruct *arg1 = (colstruct *) 0 ;
    hk_string *arg2 = (hk_string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:colstruct_colname_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_colstruct,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_string,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->colname = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_colstruct_colname_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    colstruct *arg1 = (colstruct *) 0 ;
    hk_string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:colstruct_colname_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_colstruct,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_string *)& ((arg1)->colname);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_colstruct_col_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    colstruct *arg1 = (colstruct *) 0 ;
    hk_column *arg2 = (hk_column *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:colstruct_col_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_colstruct,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_column,SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN )) == -1) SWIG_fail;
    if (arg1) (arg1)->col = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_colstruct_col_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    colstruct *arg1 = (colstruct *) 0 ;
    hk_column *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:colstruct_col_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_colstruct,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (hk_column *) ((arg1)->col);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_column, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_colstruct_currentvalue_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    colstruct *arg1 = (colstruct *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:colstruct_currentvalue_set",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_colstruct,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->currentvalue = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_colstruct_currentvalue_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    colstruct *arg1 = (colstruct *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:colstruct_currentvalue_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_colstruct,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int) ((arg1)->currentvalue);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_colstruct(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    colstruct *arg1 = (colstruct *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_colstruct",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_colstruct,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * colstruct_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_colstruct, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_hk_importcsv(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_importcsv *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_hk_importcsv")) goto fail;
    result = (hk_importcsv *)new hk_importcsv();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_importcsv, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_hk_importcsv(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_importcsv *arg1 = (hk_importcsv *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_hk_importcsv",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_importcsv,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_importcsv_execute(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_importcsv *arg1 = (hk_importcsv *) 0 ;
    int arg2 = (int) hk_class::interactive ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|i:hk_importcsv_execute",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_importcsv,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->execute((hk_class::enum_interaction )arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_importcsv_set_filedefinition(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_importcsv *arg1 = (hk_importcsv *) 0 ;
hk_string const &arg2_defvalue = "\"" ;
hk_string *arg2 = (hk_string *) &arg2_defvalue ;
hk_string const &arg3_defvalue = "," ;
hk_string *arg3 = (hk_string *) &arg3_defvalue ;
hk_string const &arg4_defvalue = "\n" ;
hk_string *arg4 = (hk_string *) &arg4_defvalue ;
hk_string const &arg5_defvalue = "" ;
hk_string *arg5 = (hk_string *) &arg5_defvalue ;
hk_string const &arg6_defvalue = "" ;
hk_string *arg6 = (hk_string *) &arg6_defvalue ;
hk_string const &arg7_defvalue = "" ;
hk_string *arg7 = (hk_string *) &arg7_defvalue ;
hk_string const &arg8_defvalue = "" ;
hk_string *arg8 = (hk_string *) &arg8_defvalue ;
hk_string const &arg9_defvalue = "" ;
hk_string *arg9 = (hk_string *) &arg9_defvalue ;
hk_string temp2 ;
hk_string temp3 ;
hk_string temp4 ;
hk_string temp5 ;
hk_string temp6 ;
hk_string temp7 ;
hk_string temp8 ;
hk_string temp9 ;
PyObject * obj0 = 0 ;
PyObject * obj1 = 0 ;
PyObject * obj2 = 0 ;
PyObject * obj3 = 0 ;
PyObject * obj4 = 0 ;
PyObject * obj5 = 0 ;
PyObject * obj6 = 0 ;
PyObject * obj7 = 0 ;
PyObject * obj8 = 0 ;

    if(!PyArg_ParseTuple(args,(char *)"O|OOOOOOOO:hk_importcsv_set_filedefinition",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) goto fail;
if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_importcsv,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
if (obj1) {
{
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
}
if (obj2) {
{
        if (PyString_Check(obj2)) {
            temp3 = hk_string(PyString_AsString(obj2));
            arg3 = &temp3;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
}
if (obj3) {
{
        if (PyString_Check(obj3)) {
            temp4 = hk_string(PyString_AsString(obj3));
            arg4 = &temp4;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
}
if (obj4) {
{
        if (PyString_Check(obj4)) {
            temp5 = hk_string(PyString_AsString(obj4));
            arg5 = &temp5;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
}
if (obj5) {
{
        if (PyString_Check(obj5)) {
            temp6 = hk_string(PyString_AsString(obj5));
            arg6 = &temp6;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
}
if (obj6) {
{
        if (PyString_Check(obj6)) {
            temp7 = hk_string(PyString_AsString(obj6));
            arg7 = &temp7;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
}
if (obj7) {
{
        if (PyString_Check(obj7)) {
            temp8 = hk_string(PyString_AsString(obj7));
            arg8 = &temp8;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
}
if (obj8) {
{
        if (PyString_Check(obj8)) {
            temp9 = hk_string(PyString_AsString(obj8));
            arg9 = &temp9;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
}
(arg1)->set_filedefinition((hk_string const &)*arg2,(hk_string const &)*arg3,(hk_string const &)*arg4,(hk_string const &)*arg5,(hk_string const &)*arg6,(hk_string const &)*arg7,(hk_string const &)*arg8,(hk_string const &)*arg9);

Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
fail:
return NULL;
}


static PyObject *_wrap_hk_importcsv_set_filename(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_importcsv *arg1 = (hk_importcsv *) 0 ;
    hk_string *arg2 = 0 ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_importcsv_set_filename",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_importcsv,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    (arg1)->set_filename((hk_string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_importcsv_set_firstrow_contains_fieldnames(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_importcsv *arg1 = (hk_importcsv *) 0 ;
    bool arg2 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:hk_importcsv_set_firstrow_contains_fieldnames",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_importcsv,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = PyInt_AsLong(obj1) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_firstrow_contains_fieldnames(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_importcsv_set_append_rows(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_importcsv *arg1 = (hk_importcsv *) 0 ;
    bool arg2 = (bool) false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:hk_importcsv_set_append_rows",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_importcsv,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = PyInt_AsLong(obj1) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_append_rows(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_importcsv_set_create_new_table(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_importcsv *arg1 = (hk_importcsv *) 0 ;
    bool arg2 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:hk_importcsv_set_create_new_table",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_importcsv,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = PyInt_AsLong(obj1) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_create_new_table(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_importcsv_add_columnname(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_importcsv *arg1 = (hk_importcsv *) 0 ;
    hk_string *arg2 = 0 ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_importcsv_add_columnname",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_importcsv,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    (arg1)->add_columnname((hk_string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_importcsv_clear_columnlist(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_importcsv *arg1 = (hk_importcsv *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_importcsv_clear_columnlist",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_importcsv,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->clear_columnlist();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_importcsv_set_detect_autoinc(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_importcsv *arg1 = (hk_importcsv *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_importcsv_set_detect_autoinc",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_importcsv,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->set_detect_autoinc(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_importcsv_detect_autoinc(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_importcsv *arg1 = (hk_importcsv *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_importcsv_detect_autoinc",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_importcsv,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((hk_importcsv const *)arg1)->detect_autoinc();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_importcsv_textdelimiter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_importcsv *arg1 = (hk_importcsv *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_importcsv_textdelimiter",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_importcsv,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->textdelimiter();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_importcsv_betweenfield(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_importcsv *arg1 = (hk_importcsv *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_importcsv_betweenfield",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_importcsv,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->betweenfield();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_importcsv_rowdelimiter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_importcsv *arg1 = (hk_importcsv *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_importcsv_rowdelimiter",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_importcsv,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->rowdelimiter();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_importcsv_datetimeformat(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_importcsv *arg1 = (hk_importcsv *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_importcsv_datetimeformat",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_importcsv,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->datetimeformat();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_importcsv_dateformat(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_importcsv *arg1 = (hk_importcsv *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_importcsv_dateformat",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_importcsv,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->dateformat();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_importcsv_timeformat(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_importcsv *arg1 = (hk_importcsv *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_importcsv_timeformat",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_importcsv,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->timeformat();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_importcsv_filelocale(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_importcsv *arg1 = (hk_importcsv *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_importcsv_filelocale",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_importcsv,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->filelocale();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_importcsv_filecharset(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_importcsv *arg1 = (hk_importcsv *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_importcsv_filecharset",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_importcsv,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->filecharset();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_importcsv_set_overwrite_table(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_importcsv *arg1 = (hk_importcsv *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_importcsv_set_overwrite_table",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_importcsv,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->set_overwrite_table(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_importcsv_overwrite_table(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_importcsv *arg1 = (hk_importcsv *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_importcsv_overwrite_table",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_importcsv,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->overwrite_table();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_importcsv_create_valuelist(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_importcsv *arg1 = (hk_importcsv *) 0 ;
    hk_string *arg2 = 0 ;
    std::vector<hk_string > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_importcsv_create_valuelist",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_importcsv,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_string,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (std::vector<hk_string > *)(arg1)->create_valuelist(*arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorThk_string_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_importcsv_get_line(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_importcsv *arg1 = (hk_importcsv *) 0 ;
    ifstream *arg2 = 0 ;
    hk_string *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:hk_importcsv_get_line",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_importcsv,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_ifstream,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_hk_string,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    (arg1)->get_line(*arg2,*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * hk_importcsv_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_hk_importcsv, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_hk_reporthtml(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reporthtml *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_hk_reporthtml")) goto fail;
    result = (hk_reporthtml *)new hk_reporthtml();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_reporthtml, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_hk_reporthtml(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reporthtml *arg1 = (hk_reporthtml *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_hk_reporthtml",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reporthtml,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reporthtml_set_tabletag(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reporthtml *arg1 = (hk_reporthtml *) 0 ;
    hk_string const &arg2_defvalue = "" ;
    hk_string *arg2 = (hk_string *) &arg2_defvalue ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:hk_reporthtml_set_tabletag",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reporthtml,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        {
            if (PyString_Check(obj1)) {
                temp2 = hk_string(PyString_AsString(obj1));
                arg2 = &temp2;
            } else {
                SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
            }
        }
    }
    (arg1)->set_tabletag((hk_string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reporthtml_set_beforetable(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reporthtml *arg1 = (hk_reporthtml *) 0 ;
    hk_string const &arg2_defvalue = "%VALUE%" ;
    hk_string *arg2 = (hk_string *) &arg2_defvalue ;
    hk_string const &arg3_defvalue = "" ;
    hk_string *arg3 = (hk_string *) &arg3_defvalue ;
    hk_string temp2 ;
    hk_string temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|OO:hk_reporthtml_set_beforetable",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reporthtml,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        {
            if (PyString_Check(obj1)) {
                temp2 = hk_string(PyString_AsString(obj1));
                arg2 = &temp2;
            } else {
                SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
            }
        }
    }
    if (obj2) {
        {
            if (PyString_Check(obj2)) {
                temp3 = hk_string(PyString_AsString(obj2));
                arg3 = &temp3;
            } else {
                SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
            }
        }
    }
    (arg1)->set_beforetable((hk_string const &)*arg2,(hk_string const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reporthtml_set_aftertable(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reporthtml *arg1 = (hk_reporthtml *) 0 ;
    hk_string const &arg2_defvalue = "%VALUE%" ;
    hk_string *arg2 = (hk_string *) &arg2_defvalue ;
    hk_string const &arg3_defvalue = "" ;
    hk_string *arg3 = (hk_string *) &arg3_defvalue ;
    hk_string temp2 ;
    hk_string temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|OO:hk_reporthtml_set_aftertable",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reporthtml,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        {
            if (PyString_Check(obj1)) {
                temp2 = hk_string(PyString_AsString(obj1));
                arg2 = &temp2;
            } else {
                SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
            }
        }
    }
    if (obj2) {
        {
            if (PyString_Check(obj2)) {
                temp3 = hk_string(PyString_AsString(obj2));
                arg3 = &temp3;
            } else {
                SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
            }
        }
    }
    (arg1)->set_aftertable((hk_string const &)*arg2,(hk_string const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reporthtml_set_trtag(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reporthtml *arg1 = (hk_reporthtml *) 0 ;
    hk_string *arg2 = 0 ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_reporthtml_set_trtag",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reporthtml,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    (arg1)->set_trtag((hk_string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reporthtml_set_thtag(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reporthtml *arg1 = (hk_reporthtml *) 0 ;
    hk_string *arg2 = 0 ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_reporthtml_set_thtag",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reporthtml,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    (arg1)->set_thtag((hk_string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reporthtml_set_tdtag(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reporthtml *arg1 = (hk_reporthtml *) 0 ;
    hk_string *arg2 = 0 ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_reporthtml_set_tdtag",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reporthtml,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    (arg1)->set_tdtag((hk_string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reporthtml_set_beforehtmltag(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reporthtml *arg1 = (hk_reporthtml *) 0 ;
    hk_string *arg2 = 0 ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_reporthtml_set_beforehtmltag",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reporthtml,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    (arg1)->set_beforehtmltag((hk_string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reporthtml_set_betweenheadtags(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reporthtml *arg1 = (hk_reporthtml *) 0 ;
    hk_string *arg2 = 0 ;
    hk_string const &arg3_defvalue = "" ;
    hk_string *arg3 = (hk_string *) &arg3_defvalue ;
    hk_string temp2 ;
    hk_string temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:hk_reporthtml_set_betweenheadtags",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reporthtml,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if (obj2) {
        {
            if (PyString_Check(obj2)) {
                temp3 = hk_string(PyString_AsString(obj2));
                arg3 = &temp3;
            } else {
                SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
            }
        }
    }
    (arg1)->set_betweenheadtags((hk_string const &)*arg2,(hk_string const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reporthtml_set_groupcolumn(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reporthtml *arg1 = (hk_reporthtml *) 0 ;
    hk_string *arg2 = 0 ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_reporthtml_set_groupcolumn",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reporthtml,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    (arg1)->set_groupcolumn((hk_string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reporthtml_set_multiplefiles(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reporthtml *arg1 = (hk_reporthtml *) 0 ;
    bool arg2 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:hk_reporthtml_set_multiplefiles",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reporthtml,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = PyInt_AsLong(obj1) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_multiplefiles(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reporthtml_set_title(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reporthtml *arg1 = (hk_reporthtml *) 0 ;
    hk_string *arg2 = 0 ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_reporthtml_set_title",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reporthtml,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    (arg1)->set_title((hk_string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reporthtml_set_author(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reporthtml *arg1 = (hk_reporthtml *) 0 ;
    hk_string *arg2 = 0 ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_reporthtml_set_author",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reporthtml,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    (arg1)->set_author((hk_string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * hk_reporthtml_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_hk_reporthtml, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_recode_html(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    hk_report *arg2 = (hk_report *) 0 ;
    hk_string result;
    hk_string temp1 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:recode_html",&obj0,&obj1)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = hk_string(PyString_AsString(obj0));
            arg1 = &temp1;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = recode_html((hk_string const &)*arg1,arg2);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_recode_postscript(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    hk_report *arg2 = (hk_report *) 0 ;
    hk_string result;
    hk_string temp1 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:recode_postscript",&obj0,&obj1)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = hk_string(PyString_AsString(obj0));
            arg1 = &temp1;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = recode_postscript((hk_string const &)*arg1,arg2);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_fullpagereplace_postscript(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    hk_report *arg2 = (hk_report *) 0 ;
    hk_string result;
    hk_string temp1 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:fullpagereplace_postscript",&obj0,&obj1)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = hk_string(PyString_AsString(obj0));
            arg1 = &temp1;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = fullpagereplace_postscript((hk_string const &)*arg1,arg2);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_recode_utf8(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    hk_report *arg2 = (hk_report *) 0 ;
    hk_string result;
    hk_string temp1 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:recode_utf8",&obj0,&obj1)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = hk_string(PyString_AsString(obj0));
            arg1 = &temp1;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = recode_utf8((hk_string const &)*arg1,arg2);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_recount_postscript(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    unsigned long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:recount_postscript",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (unsigned long)recount_postscript(arg1);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_configure_postscriptdata(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:configure_postscriptdata",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    configure_postscriptdata(arg1);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_configure_postscriptreport(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    int arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:configure_postscriptreport",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)configure_postscriptreport(arg1,arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_set_reporttype_postscript(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_report *arg1 = (hk_report *) 0 ;
    bool arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:set_reporttype_postscript",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    result = (bool)set_reporttype_postscript(arg1,arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_replacepsdatafunction(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    hk_string *arg2 = 0 ;
    hk_string result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:replacepsdatafunction",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = replacepsdatafunction(arg1,(hk_string const &)*arg2);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_hk_reportcsv(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportcsv *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_hk_reportcsv")) goto fail;
    result = (hk_reportcsv *)new hk_reportcsv();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_reportcsv, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_hk_reportcsv(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportcsv *arg1 = (hk_reportcsv *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_hk_reportcsv",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportcsv,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportcsv_set_groupcolumn(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportcsv *arg1 = (hk_reportcsv *) 0 ;
    hk_string *arg2 = 0 ;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_reportcsv_set_groupcolumn",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportcsv,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    (arg1)->set_groupcolumn((hk_string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportcsv_set_multiplefiles(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportcsv *arg1 = (hk_reportcsv *) 0 ;
    bool arg2 = (bool) true ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:hk_reportcsv_set_multiplefiles",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportcsv,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = PyInt_AsLong(obj1) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->set_multiplefiles(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportcsv_set_filedefinition(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportcsv *arg1 = (hk_reportcsv *) 0 ;
hk_string const &arg2_defvalue = "\"" ;
hk_string *arg2 = (hk_string *) &arg2_defvalue ;
hk_string const &arg3_defvalue = "," ;
hk_string *arg3 = (hk_string *) &arg3_defvalue ;
hk_string const &arg4_defvalue = "\n" ;
hk_string *arg4 = (hk_string *) &arg4_defvalue ;
hk_string const &arg5_defvalue = "" ;
hk_string *arg5 = (hk_string *) &arg5_defvalue ;
hk_string const &arg6_defvalue = "" ;
hk_string *arg6 = (hk_string *) &arg6_defvalue ;
hk_string const &arg7_defvalue = "" ;
hk_string *arg7 = (hk_string *) &arg7_defvalue ;
hk_string const &arg8_defvalue = "" ;
hk_string *arg8 = (hk_string *) &arg8_defvalue ;
hk_string const &arg9_defvalue = "" ;
hk_string *arg9 = (hk_string *) &arg9_defvalue ;
hk_string temp2 ;
hk_string temp3 ;
hk_string temp4 ;
hk_string temp5 ;
hk_string temp6 ;
hk_string temp7 ;
hk_string temp8 ;
hk_string temp9 ;
PyObject * obj0 = 0 ;
PyObject * obj1 = 0 ;
PyObject * obj2 = 0 ;
PyObject * obj3 = 0 ;
PyObject * obj4 = 0 ;
PyObject * obj5 = 0 ;
PyObject * obj6 = 0 ;
PyObject * obj7 = 0 ;
PyObject * obj8 = 0 ;

    if(!PyArg_ParseTuple(args,(char *)"O|OOOOOOOO:hk_reportcsv_set_filedefinition",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) goto fail;
if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportcsv,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
if (obj1) {
{
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
}
if (obj2) {
{
        if (PyString_Check(obj2)) {
            temp3 = hk_string(PyString_AsString(obj2));
            arg3 = &temp3;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
}
if (obj3) {
{
        if (PyString_Check(obj3)) {
            temp4 = hk_string(PyString_AsString(obj3));
            arg4 = &temp4;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
}
if (obj4) {
{
        if (PyString_Check(obj4)) {
            temp5 = hk_string(PyString_AsString(obj4));
            arg5 = &temp5;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
}
if (obj5) {
{
        if (PyString_Check(obj5)) {
            temp6 = hk_string(PyString_AsString(obj5));
            arg6 = &temp6;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
}
if (obj6) {
{
        if (PyString_Check(obj6)) {
            temp7 = hk_string(PyString_AsString(obj6));
            arg7 = &temp7;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
}
if (obj7) {
{
        if (PyString_Check(obj7)) {
            temp8 = hk_string(PyString_AsString(obj7));
            arg8 = &temp8;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
}
if (obj8) {
{
        if (PyString_Check(obj8)) {
            temp9 = hk_string(PyString_AsString(obj8));
            arg9 = &temp9;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
}
(arg1)->set_filedefinition((hk_string const &)*arg2,(hk_string const &)*arg3,(hk_string const &)*arg4,(hk_string const &)*arg5,(hk_string const &)*arg6,(hk_string const &)*arg7,(hk_string const &)*arg8,(hk_string const &)*arg9);

Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
fail:
return NULL;
}


static PyObject *_wrap_hk_reportcsv_set_withheader(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportcsv *arg1 = (hk_reportcsv *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_reportcsv_set_withheader",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportcsv,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->set_withheader(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportcsv_textdelimiter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportcsv *arg1 = (hk_reportcsv *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportcsv_textdelimiter",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportcsv,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->textdelimiter();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportcsv_between(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportcsv *arg1 = (hk_reportcsv *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportcsv_between",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportcsv,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->between();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * hk_reportcsv_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_hk_reportcsv, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_encodefilecharsetfunction(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    hk_string *arg2 = 0 ;
    hk_string result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:encodefilecharsetfunction",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = encodefilecharsetfunction(arg1,(hk_string const &)*arg2);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_automatic_create_csvfields(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportsection *arg1 = (hk_reportsection *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:automatic_create_csvfields",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportsection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    automatic_create_csvfields(arg1);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_zmm2ps(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    unsigned long arg1 ;
    unsigned long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:zmm2ps",&obj0)) goto fail;
    arg1 = (unsigned long) PyInt_AsLong(obj0);
    if (PyErr_Occurred()) SWIG_fail;
    result = (unsigned long)zmm2ps(arg1);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ps2zmm(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    unsigned long arg1 ;
    unsigned long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ps2zmm",&obj0)) goto fail;
    arg1 = (unsigned long) PyInt_AsLong(obj0);
    if (PyErr_Occurred()) SWIG_fail;
    result = (unsigned long)ps2zmm(arg1);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_hk_reportxml(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportxml *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_hk_reportxml")) goto fail;
    result = (hk_reportxml *)new hk_reportxml();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_reportxml, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_hk_reportxml(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportxml *arg1 = (hk_reportxml *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_hk_reportxml",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportxml,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportxml_set_maindocumenttag(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportxml *arg1 = (hk_reportxml *) 0 ;
    hk_string *arg2 = 0 ;
    bool result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_reportxml_set_maindocumenttag",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportxml,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = (bool)(arg1)->set_maindocumenttag((hk_string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportxml_maindocumenttag(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportxml *arg1 = (hk_reportxml *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportxml_maindocumenttag",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportxml,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->maindocumenttag();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportxml_set_rowtag(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportxml *arg1 = (hk_reportxml *) 0 ;
    hk_string *arg2 = 0 ;
    bool result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_reportxml_set_rowtag",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportxml,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = (bool)(arg1)->set_rowtag((hk_string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportxml_rowtag(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportxml *arg1 = (hk_reportxml *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportxml_rowtag",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportxml,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->rowtag();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportxml_set_includetableschema(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportxml *arg1 = (hk_reportxml *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_reportxml_set_includetableschema",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportxml,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->set_includetableschema(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportxml_set_excelxml(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportxml *arg1 = (hk_reportxml *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:hk_reportxml_set_excelxml",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportxml,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->set_excelxml(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportxml_excelxml(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportxml *arg1 = (hk_reportxml *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportxml_excelxml",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportxml,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->excelxml();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportxml_includetableschema(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportxml *arg1 = (hk_reportxml *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportxml_includetableschema",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportxml,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->includetableschema();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportxml_set_fieldname_as_attribute(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportxml *arg1 = (hk_reportxml *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:hk_reportxml_set_fieldname_as_attribute",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportxml,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->set_fieldname_as_attribute((hk_reportxml::enum_fieldtag )arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_reportxml_fieldname_as_attribute(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportxml *arg1 = (hk_reportxml *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_reportxml_fieldname_as_attribute",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportxml,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->fieldname_as_attribute();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * hk_reportxml_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_hk_reportxml, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_fullpagereplace_excelxml(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    hk_report *arg2 = (hk_report *) 0 ;
    hk_string result;
    hk_string temp1 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:fullpagereplace_excelxml",&obj0,&obj1)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = hk_string(PyString_AsString(obj0));
            arg1 = &temp1;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_hk_report,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = fullpagereplace_excelxml((hk_string const &)*arg1,arg2);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_replaceexcelxmldatafunction(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    hk_string *arg2 = 0 ;
    hk_string result;
    hk_string temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:replaceexcelxmldatafunction",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = hk_string(PyString_AsString(obj1));
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = replaceexcelxmldatafunction(arg1,(hk_string const &)*arg2);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_configure_excelxmldata(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_reportdata *arg1 = (hk_reportdata *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:configure_excelxmldata",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_reportdata,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    configure_excelxmldata(arg1);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_hk_mimetype(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_mimetype *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_hk_mimetype")) goto fail;
    result = (hk_mimetype *)new hk_mimetype();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_hk_mimetype, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_mimetype_mimetype__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    struct_raw_data *arg1 = (struct_raw_data *) 0 ;
    hk_string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_mimetype_mimetype",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_struct_raw_data,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = hk_mimetype::mimetype(arg1);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_mimetype_mimetype__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    hk_string result;
    hk_string temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_mimetype_mimetype",&obj0)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = hk_string(PyString_AsString(obj0));
            arg1 = &temp1;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    result = hk_mimetype::mimetype((hk_string const &)*arg1);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_mimetype_mimetype(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_struct_raw_data, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_hk_mimetype_mimetype__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            _v = PyString_Check(argv[0]) ? 1 : 0;
        }
        if (_v) {
            return _wrap_hk_mimetype_mimetype__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'hk_mimetype_mimetype'");
    return NULL;
}


static PyObject *_wrap_hk_mimetype_set_mimetypedatabasefile(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string *arg1 = 0 ;
    hk_string temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:hk_mimetype_set_mimetypedatabasefile",&obj0)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = hk_string(PyString_AsString(obj0));
            arg1 = &temp1;
        } else {
            SWIG_exception(SWIG_TypeError, hk_class::hk_translate("hk_string expected").c_str());
        }
    }
    hk_mimetype::set_mimetypedatabasefile((hk_string const &)*arg1);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_hk_mimetype_mimetypedatabasefile(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_string result;
    
    if(!PyArg_ParseTuple(args,(char *)":hk_mimetype_mimetypedatabasefile")) goto fail;
    result = hk_mimetype::mimetypedatabasefile();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_hk_mimetype(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    hk_mimetype *arg1 = (hk_mimetype *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_hk_mimetype",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_hk_mimetype,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * hk_mimetype_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_hk_mimetype, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyMethodDef SwigMethods[] = {
	 { (char *)"is_numerictype", _wrap_is_numerictype, METH_VARARGS },
	 { (char *)"is_integertype", _wrap_is_integertype, METH_VARARGS },
	 { (char *)"is_realtype", _wrap_is_realtype, METH_VARARGS },
	 { (char *)"inch2cm", _wrap_inch2cm, METH_VARARGS },
	 { (char *)"cm2inch", _wrap_cm2inch, METH_VARARGS },
	 { (char *)"dependingclass_dependingfield_set", _wrap_dependingclass_dependingfield_set, METH_VARARGS },
	 { (char *)"dependingclass_dependingfield_get", _wrap_dependingclass_dependingfield_get, METH_VARARGS },
	 { (char *)"dependingclass_masterfield_set", _wrap_dependingclass_masterfield_set, METH_VARARGS },
	 { (char *)"dependingclass_masterfield_get", _wrap_dependingclass_masterfield_get, METH_VARARGS },
	 { (char *)"new_dependingclass", _wrap_new_dependingclass, METH_VARARGS },
	 { (char *)"delete_dependingclass", _wrap_delete_dependingclass, METH_VARARGS },
	 { (char *)"dependingclass_swigregister", dependingclass_swigregister, METH_VARARGS },
	 { (char *)"new_struct_raw_data", _wrap_new_struct_raw_data, METH_VARARGS },
	 { (char *)"struct_raw_data_length_set", _wrap_struct_raw_data_length_set, METH_VARARGS },
	 { (char *)"struct_raw_data_length_get", _wrap_struct_raw_data_length_get, METH_VARARGS },
	 { (char *)"struct_raw_data_data_set", _wrap_struct_raw_data_data_set, METH_VARARGS },
	 { (char *)"struct_raw_data_data_get", _wrap_struct_raw_data_data_get, METH_VARARGS },
	 { (char *)"delete_struct_raw_data", _wrap_delete_struct_raw_data, METH_VARARGS },
	 { (char *)"struct_raw_data_swigregister", struct_raw_data_swigregister, METH_VARARGS },
	 { (char *)"new_referentialclass", _wrap_new_referentialclass, METH_VARARGS },
	 { (char *)"referentialclass_p_name_set", _wrap_referentialclass_p_name_set, METH_VARARGS },
	 { (char *)"referentialclass_p_name_get", _wrap_referentialclass_p_name_get, METH_VARARGS },
	 { (char *)"referentialclass_p_masterdatasource_set", _wrap_referentialclass_p_masterdatasource_set, METH_VARARGS },
	 { (char *)"referentialclass_p_masterdatasource_get", _wrap_referentialclass_p_masterdatasource_get, METH_VARARGS },
	 { (char *)"referentialclass_p_fields_set", _wrap_referentialclass_p_fields_set, METH_VARARGS },
	 { (char *)"referentialclass_p_fields_get", _wrap_referentialclass_p_fields_get, METH_VARARGS },
	 { (char *)"referentialclass_p_deletecascade_set", _wrap_referentialclass_p_deletecascade_set, METH_VARARGS },
	 { (char *)"referentialclass_p_deletecascade_get", _wrap_referentialclass_p_deletecascade_get, METH_VARARGS },
	 { (char *)"referentialclass_p_updatecascade_set", _wrap_referentialclass_p_updatecascade_set, METH_VARARGS },
	 { (char *)"referentialclass_p_updatecascade_get", _wrap_referentialclass_p_updatecascade_get, METH_VARARGS },
	 { (char *)"delete_referentialclass", _wrap_delete_referentialclass, METH_VARARGS },
	 { (char *)"referentialclass_swigregister", referentialclass_swigregister, METH_VARARGS },
	 { (char *)"load_file", _wrap_load_file, METH_VARARGS },
	 { (char *)"save_file", _wrap_save_file, METH_VARARGS },
	 { (char *)"save_textfile", _wrap_save_textfile, METH_VARARGS },
	 { (char *)"file_exists", _wrap_file_exists, METH_VARARGS },
	 { (char *)"data2hex", _wrap_data2hex, METH_VARARGS },
	 { (char *)"hex2data", _wrap_hex2data, METH_VARARGS },
	 { (char *)"smallstringconversion", _wrap_smallstringconversion, METH_VARARGS },
	 { (char *)"l2u", _wrap_l2u, METH_VARARGS },
	 { (char *)"u2l", _wrap_u2l, METH_VARARGS },
	 { (char *)"string2upper", _wrap_string2upper, METH_VARARGS },
	 { (char *)"string2lower", _wrap_string2lower, METH_VARARGS },
	 { (char *)"format_number", _wrap_format_number, METH_VARARGS },
	 { (char *)"format_standard_number", _wrap_format_standard_number, METH_VARARGS },
	 { (char *)"localestring2double", _wrap_localestring2double, METH_VARARGS },
	 { (char *)"localestring2int", _wrap_localestring2int, METH_VARARGS },
	 { (char *)"localestring2uint", _wrap_localestring2uint, METH_VARARGS },
	 { (char *)"standardstring2double", _wrap_standardstring2double, METH_VARARGS },
	 { (char *)"longint2string", _wrap_longint2string, METH_VARARGS },
	 { (char *)"ulongint2string", _wrap_ulongint2string, METH_VARARGS },
	 { (char *)"replace_all", _wrap_replace_all, METH_VARARGS },
	 { (char *)"trimleft", _wrap_trimleft, METH_VARARGS },
	 { (char *)"trimright", _wrap_trimright, METH_VARARGS },
	 { (char *)"trim", _wrap_trim, METH_VARARGS },
	 { (char *)"bin2hex", _wrap_bin2hex, METH_VARARGS },
	 { (char *)"hex2bin", _wrap_hex2bin, METH_VARARGS },
	 { (char *)"hk_class_show_warningmessage", _wrap_hk_class_show_warningmessage, METH_VARARGS },
	 { (char *)"hk_class_hk_translate", _wrap_hk_class_hk_translate, METH_VARARGS },
	 { (char *)"hk_class_show_yesnodialog", _wrap_hk_class_show_yesnodialog, METH_VARARGS },
	 { (char *)"hk_class_show_stringvaluedialog", _wrap_hk_class_show_stringvaluedialog, METH_VARARGS },
	 { (char *)"hk_class_set_filedialog", _wrap_hk_class_set_filedialog, METH_VARARGS },
	 { (char *)"hk_class_show_filedialog", _wrap_hk_class_show_filedialog, METH_VARARGS },
	 { (char *)"hk_class_save_preferences", _wrap_hk_class_save_preferences, METH_VARARGS },
	 { (char *)"hk_class_set_directorydialog", _wrap_hk_class_set_directorydialog, METH_VARARGS },
	 { (char *)"hk_class_show_directorydialog", _wrap_hk_class_show_directorydialog, METH_VARARGS },
	 { (char *)"hk_class_set_default_automatic_data_update", _wrap_hk_class_set_default_automatic_data_update, METH_VARARGS },
	 { (char *)"hk_class_default_automatic_data_update", _wrap_hk_class_default_automatic_data_update, METH_VARARGS },
	 { (char *)"hk_class_swigregister", hk_class_swigregister, METH_VARARGS },
	 { (char *)"show_warningmessage", _wrap_show_warningmessage, METH_VARARGS },
	 { (char *)"show_yesnodialog", _wrap_show_yesnodialog, METH_VARARGS },
	 { (char *)"show_filedialog", _wrap_show_filedialog, METH_VARARGS },
	 { (char *)"show_stringvaluedialog", _wrap_show_stringvaluedialog, METH_VARARGS },
	 { (char *)"show_directorydialog", _wrap_show_directorydialog, METH_VARARGS },
	 { (char *)"delete_hk_connection", _wrap_delete_hk_connection, METH_VARARGS },
	 { (char *)"hk_connection_set_host", _wrap_hk_connection_set_host, METH_VARARGS },
	 { (char *)"hk_connection_host", _wrap_hk_connection_host, METH_VARARGS },
	 { (char *)"hk_connection_set_user", _wrap_hk_connection_set_user, METH_VARARGS },
	 { (char *)"hk_connection_user", _wrap_hk_connection_user, METH_VARARGS },
	 { (char *)"hk_connection_set_password", _wrap_hk_connection_set_password, METH_VARARGS },
	 { (char *)"hk_connection_set_tcp_port", _wrap_hk_connection_set_tcp_port, METH_VARARGS },
	 { (char *)"hk_connection_tcp_port", _wrap_hk_connection_tcp_port, METH_VARARGS },
	 { (char *)"hk_connection_default_tcp_port", _wrap_hk_connection_default_tcp_port, METH_VARARGS },
	 { (char *)"hk_connection_set_defaultdatabase", _wrap_hk_connection_set_defaultdatabase, METH_VARARGS },
	 { (char *)"hk_connection_defaultdatabase", _wrap_hk_connection_defaultdatabase, METH_VARARGS },
	 { (char *)"hk_connection_connect", _wrap_hk_connection_connect, METH_VARARGS },
	 { (char *)"hk_connection_disconnect", _wrap_hk_connection_disconnect, METH_VARARGS },
	 { (char *)"hk_connection_is_connected", _wrap_hk_connection_is_connected, METH_VARARGS },
	 { (char *)"hk_connection_dblist", _wrap_hk_connection_dblist, METH_VARARGS },
	 { (char *)"hk_connection_new_database", _wrap_hk_connection_new_database, METH_VARARGS },
	 { (char *)"hk_connection_create_database", _wrap_hk_connection_create_database, METH_VARARGS },
	 { (char *)"hk_connection_delete_database", _wrap_hk_connection_delete_database, METH_VARARGS },
	 { (char *)"hk_connection_database_exists", _wrap_hk_connection_database_exists, METH_VARARGS },
	 { (char *)"hk_connection_drivermanager", _wrap_hk_connection_drivermanager, METH_VARARGS },
	 { (char *)"hk_connection_check_capabilities", _wrap_hk_connection_check_capabilities, METH_VARARGS },
	 { (char *)"hk_connection_rename_database", _wrap_hk_connection_rename_database, METH_VARARGS },
	 { (char *)"hk_connection_server_supports", _wrap_hk_connection_server_supports, METH_VARARGS },
	 { (char *)"hk_connection_server_needs", _wrap_hk_connection_server_needs, METH_VARARGS },
	 { (char *)"hk_connection_set_newpassword", _wrap_hk_connection_set_newpassword, METH_VARARGS },
	 { (char *)"hk_connection_show_newpassworddialog", _wrap_hk_connection_show_newpassworddialog, METH_VARARGS },
	 { (char *)"hk_connection_show_passworddialog", _wrap_hk_connection_show_passworddialog, METH_VARARGS },
	 { (char *)"hk_connection_drivername", _wrap_hk_connection_drivername, METH_VARARGS },
	 { (char *)"hk_connection_set_booleanemulation", _wrap_hk_connection_set_booleanemulation, METH_VARARGS },
	 { (char *)"hk_connection_booleanemulation", _wrap_hk_connection_booleanemulation, METH_VARARGS },
	 { (char *)"hk_connection_copy_database", _wrap_hk_connection_copy_database, METH_VARARGS },
	 { (char *)"hk_connection_last_servermessage", _wrap_hk_connection_last_servermessage, METH_VARARGS },
	 { (char *)"hk_connection_databasepath", _wrap_hk_connection_databasepath, METH_VARARGS },
	 { (char *)"hk_connection_mimetype", _wrap_hk_connection_mimetype, METH_VARARGS },
	 { (char *)"hk_connection_maxfieldnamesize", _wrap_hk_connection_maxfieldnamesize, METH_VARARGS },
	 { (char *)"hk_connection_swigregister", hk_connection_swigregister, METH_VARARGS },
	 { (char *)"new_hk_drivermanager", _wrap_new_hk_drivermanager, METH_VARARGS },
	 { (char *)"delete_hk_drivermanager", _wrap_delete_hk_drivermanager, METH_VARARGS },
	 { (char *)"hk_drivermanager_driverlist", _wrap_hk_drivermanager_driverlist, METH_VARARGS },
	 { (char *)"hk_drivermanager_new_connection", _wrap_hk_drivermanager_new_connection, METH_VARARGS },
	 { (char *)"hk_drivermanager_find_existing_connection", _wrap_hk_drivermanager_find_existing_connection, METH_VARARGS },
	 { (char *)"hk_drivermanager_show_driverselectdialog", _wrap_hk_drivermanager_show_driverselectdialog, METH_VARARGS },
	 { (char *)"hk_drivermanager_set_path", _wrap_hk_drivermanager_set_path, METH_VARARGS },
	 { (char *)"hk_drivermanager_path", _wrap_hk_drivermanager_path, METH_VARARGS },
	 { (char *)"hk_drivermanager_swigregister", hk_drivermanager_swigregister, METH_VARARGS },
	 { (char *)"hk_database_tablelist", _wrap_hk_database_tablelist, METH_VARARGS },
	 { (char *)"hk_database_querylist", _wrap_hk_database_querylist, METH_VARARGS },
	 { (char *)"hk_database_formlist", _wrap_hk_database_formlist, METH_VARARGS },
	 { (char *)"hk_database_reportlist", _wrap_hk_database_reportlist, METH_VARARGS },
	 { (char *)"hk_database_viewlist", _wrap_hk_database_viewlist, METH_VARARGS },
	 { (char *)"hk_database_tableviewlist", _wrap_hk_database_tableviewlist, METH_VARARGS },
	 { (char *)"hk_database_new_table", _wrap_hk_database_new_table, METH_VARARGS },
	 { (char *)"hk_database_new_resultquery", _wrap_hk_database_new_resultquery, METH_VARARGS },
	 { (char *)"hk_database_new_view", _wrap_hk_database_new_view, METH_VARARGS },
	 { (char *)"hk_database_new_actionquery", _wrap_hk_database_new_actionquery, METH_VARARGS },
	 { (char *)"hk_database_load_datasource", _wrap_hk_database_load_datasource, METH_VARARGS },
	 { (char *)"hk_database_delete_table", _wrap_hk_database_delete_table, METH_VARARGS },
	 { (char *)"hk_database_delete_view", _wrap_hk_database_delete_view, METH_VARARGS },
	 { (char *)"hk_database_table_exists", _wrap_hk_database_table_exists, METH_VARARGS },
	 { (char *)"hk_database_query_exists", _wrap_hk_database_query_exists, METH_VARARGS },
	 { (char *)"hk_database_view_exists", _wrap_hk_database_view_exists, METH_VARARGS },
	 { (char *)"hk_database_form_exists", _wrap_hk_database_form_exists, METH_VARARGS },
	 { (char *)"hk_database_report_exists", _wrap_hk_database_report_exists, METH_VARARGS },
	 { (char *)"hk_database_load", _wrap_hk_database_load, METH_VARARGS },
	 { (char *)"hk_database_save", _wrap_hk_database_save, METH_VARARGS },
	 { (char *)"hk_database_connection", _wrap_hk_database_connection, METH_VARARGS },
	 { (char *)"hk_database_new_formvisible", _wrap_hk_database_new_formvisible, METH_VARARGS },
	 { (char *)"hk_database_new_dialogformvisible", _wrap_hk_database_new_dialogformvisible, METH_VARARGS },
	 { (char *)"hk_database_new_reportvisible", _wrap_hk_database_new_reportvisible, METH_VARARGS },
	 { (char *)"hk_database_new_tablevisible", _wrap_hk_database_new_tablevisible, METH_VARARGS },
	 { (char *)"hk_database_new_queryvisible", _wrap_hk_database_new_queryvisible, METH_VARARGS },
	 { (char *)"hk_database_set_storagemode", _wrap_hk_database_set_storagemode, METH_VARARGS },
	 { (char *)"hk_database_storagemode", _wrap_hk_database_storagemode, METH_VARARGS },
	 { (char *)"hk_database_loadmode", _wrap_hk_database_loadmode, METH_VARARGS },
	 { (char *)"hk_database_create_centralstoragetable", _wrap_hk_database_create_centralstoragetable, METH_VARARGS },
	 { (char *)"hk_database_has_centralstoragetable", _wrap_hk_database_has_centralstoragetable, METH_VARARGS },
	 { (char *)"hk_database_load_local", _wrap_hk_database_load_local, METH_VARARGS },
	 { (char *)"hk_database_load_central", _wrap_hk_database_load_central, METH_VARARGS },
	 { (char *)"hk_database_save_local", _wrap_hk_database_save_local, METH_VARARGS },
	 { (char *)"hk_database_save_central", _wrap_hk_database_save_central, METH_VARARGS },
	 { (char *)"hk_database_delete_localfile", _wrap_hk_database_delete_localfile, METH_VARARGS },
	 { (char *)"hk_database_delete_centralfile", _wrap_hk_database_delete_centralfile, METH_VARARGS },
	 { (char *)"hk_database_filelist", _wrap_hk_database_filelist, METH_VARARGS },
	 { (char *)"hk_database_local_filelist", _wrap_hk_database_local_filelist, METH_VARARGS },
	 { (char *)"hk_database_central_filelist", _wrap_hk_database_central_filelist, METH_VARARGS },
	 { (char *)"hk_database_database_path", _wrap_hk_database_database_path, METH_VARARGS },
	 { (char *)"hk_database_save_configuration", _wrap_hk_database_save_configuration, METH_VARARGS },
	 { (char *)"hk_database_disable", _wrap_hk_database_disable, METH_VARARGS },
	 { (char *)"hk_database_existing_presentation", _wrap_hk_database_existing_presentation, METH_VARARGS },
	 { (char *)"hk_database_existing_form", _wrap_hk_database_existing_form, METH_VARARGS },
	 { (char *)"hk_database_existing_report", _wrap_hk_database_existing_report, METH_VARARGS },
	 { (char *)"hk_database_set_name", _wrap_hk_database_set_name, METH_VARARGS },
	 { (char *)"hk_database_name", _wrap_hk_database_name, METH_VARARGS },
	 { (char *)"hk_database_copy_table", _wrap_hk_database_copy_table, METH_VARARGS },
	 { (char *)"hk_database_copy_view", _wrap_hk_database_copy_view, METH_VARARGS },
	 { (char *)"hk_database_rename_table", _wrap_hk_database_rename_table, METH_VARARGS },
	 { (char *)"hk_database_rename_file", _wrap_hk_database_rename_file, METH_VARARGS },
	 { (char *)"hk_database_set_databasecharset", _wrap_hk_database_set_databasecharset, METH_VARARGS },
	 { (char *)"hk_database_databasecharset", _wrap_hk_database_databasecharset, METH_VARARGS },
	 { (char *)"hk_database_set_automatic_data_update", _wrap_hk_database_set_automatic_data_update, METH_VARARGS },
	 { (char *)"hk_database_is_automatic_data_update", _wrap_hk_database_is_automatic_data_update, METH_VARARGS },
	 { (char *)"hk_database_swigregister", hk_database_swigregister, METH_VARARGS },
	 { (char *)"hk_data_name", _wrap_hk_data_name, METH_VARARGS },
	 { (char *)"hk_data_set_name", _wrap_hk_data_set_name, METH_VARARGS },
	 { (char *)"hk_data_type", _wrap_hk_data_type, METH_VARARGS },
	 { (char *)"hk_data_identifierdelimiter", _wrap_hk_data_identifierdelimiter, METH_VARARGS },
	 { (char *)"hk_data_textdelimiter", _wrap_hk_data_textdelimiter, METH_VARARGS },
	 { (char *)"hk_data_print_sqlstatements", _wrap_hk_data_print_sqlstatements, METH_VARARGS },
	 { (char *)"hk_data_set_print_sqlstatements", _wrap_hk_data_set_print_sqlstatements, METH_VARARGS },
	 { (char *)"hk_data_swigregister", hk_data_swigregister, METH_VARARGS },
	 { (char *)"hk_datasource_name", _wrap_hk_datasource_name, METH_VARARGS },
	 { (char *)"hk_datasource_set_name", _wrap_hk_datasource_set_name, METH_VARARGS },
	 { (char *)"hk_datasource_set_sql", _wrap_hk_datasource_set_sql, METH_VARARGS },
	 { (char *)"hk_datasource_sql", _wrap_hk_datasource_sql, METH_VARARGS },
	 { (char *)"hk_datasource_backendsql", _wrap_hk_datasource_backendsql, METH_VARARGS },
	 { (char *)"hk_datasource_is_rawsql", _wrap_hk_datasource_is_rawsql, METH_VARARGS },
	 { (char *)"hk_datasource_goto_row", _wrap_hk_datasource_goto_row, METH_VARARGS },
	 { (char *)"hk_datasource_goto_first", _wrap_hk_datasource_goto_first, METH_VARARGS },
	 { (char *)"hk_datasource_goto_last", _wrap_hk_datasource_goto_last, METH_VARARGS },
	 { (char *)"hk_datasource_goto_next", _wrap_hk_datasource_goto_next, METH_VARARGS },
	 { (char *)"hk_datasource_goto_previous", _wrap_hk_datasource_goto_previous, METH_VARARGS },
	 { (char *)"hk_datasource_row_position", _wrap_hk_datasource_row_position, METH_VARARGS },
	 { (char *)"hk_datasource_max_rows", _wrap_hk_datasource_max_rows, METH_VARARGS },
	 { (char *)"hk_datasource_enable", _wrap_hk_datasource_enable, METH_VARARGS },
	 { (char *)"hk_datasource_disable", _wrap_hk_datasource_disable, METH_VARARGS },
	 { (char *)"hk_datasource_set_enabled", _wrap_hk_datasource_set_enabled, METH_VARARGS },
	 { (char *)"hk_datasource_is_enabled", _wrap_hk_datasource_is_enabled, METH_VARARGS },
	 { (char *)"hk_datasource_column_by_name", _wrap_hk_datasource_column_by_name, METH_VARARGS },
	 { (char *)"hk_datasource_store_changed_data", _wrap_hk_datasource_store_changed_data, METH_VARARGS },
	 { (char *)"hk_datasource_set_automatic_data_update", _wrap_hk_datasource_set_automatic_data_update, METH_VARARGS },
	 { (char *)"hk_datasource_is_automatic_data_update", _wrap_hk_datasource_is_automatic_data_update, METH_VARARGS },
	 { (char *)"hk_datasource_mode", _wrap_hk_datasource_mode, METH_VARARGS },
	 { (char *)"hk_datasource_setmode_insertrow", _wrap_hk_datasource_setmode_insertrow, METH_VARARGS },
	 { (char *)"hk_datasource_delete_actualrow", _wrap_hk_datasource_delete_actualrow, METH_VARARGS },
	 { (char *)"hk_datasource_delete_rows", _wrap_hk_datasource_delete_rows, METH_VARARGS },
	 { (char *)"hk_datasource_setmode_normal", _wrap_hk_datasource_setmode_normal, METH_VARARGS },
	 { (char *)"hk_datasource_setmode_createtable", _wrap_hk_datasource_setmode_createtable, METH_VARARGS },
	 { (char *)"hk_datasource_setmode_altertable", _wrap_hk_datasource_setmode_altertable, METH_VARARGS },
	 { (char *)"hk_datasource_new_column", _wrap_hk_datasource_new_column, METH_VARARGS },
	 { (char *)"hk_datasource_alter_column", _wrap_hk_datasource_alter_column, METH_VARARGS },
	 { (char *)"hk_datasource_delete_column", _wrap_hk_datasource_delete_column, METH_VARARGS },
	 { (char *)"hk_datasource_create_table_now", _wrap_hk_datasource_create_table_now, METH_VARARGS },
	 { (char *)"hk_datasource_alter_table_now", _wrap_hk_datasource_alter_table_now, METH_VARARGS },
	 { (char *)"hk_datasource_set_accessmode", _wrap_hk_datasource_set_accessmode, METH_VARARGS },
	 { (char *)"hk_datasource_accessmode", _wrap_hk_datasource_accessmode, METH_VARARGS },
	 { (char *)"hk_datasource_is_readonly", _wrap_hk_datasource_is_readonly, METH_VARARGS },
	 { (char *)"hk_datasource_set_readonly", _wrap_hk_datasource_set_readonly, METH_VARARGS },
	 { (char *)"hk_datasource_drop_index", _wrap_hk_datasource_drop_index, METH_VARARGS },
	 { (char *)"hk_datasource_create_index", _wrap_hk_datasource_create_index, METH_VARARGS },
	 { (char *)"hk_datasource_alter_index", _wrap_hk_datasource_alter_index, METH_VARARGS },
	 { (char *)"hk_datasource_database", _wrap_hk_datasource_database, METH_VARARGS },
	 { (char *)"hk_datasource_set_ignore_changed_data", _wrap_hk_datasource_set_ignore_changed_data, METH_VARARGS },
	 { (char *)"hk_datasource_ignore_changed_data", _wrap_hk_datasource_ignore_changed_data, METH_VARARGS },
	 { (char *)"hk_datasource_set_filter", _wrap_hk_datasource_set_filter, METH_VARARGS },
	 { (char *)"hk_datasource_filter", _wrap_hk_datasource_filter, METH_VARARGS },
	 { (char *)"hk_datasource_set_temporaryfilter", _wrap_hk_datasource_set_temporaryfilter, METH_VARARGS },
	 { (char *)"hk_datasource_temporaryfilter", _wrap_hk_datasource_temporaryfilter, METH_VARARGS },
	 { (char *)"hk_datasource_set_use_temporaryfilter", _wrap_hk_datasource_set_use_temporaryfilter, METH_VARARGS },
	 { (char *)"hk_datasource_use_temporaryfilter", _wrap_hk_datasource_use_temporaryfilter, METH_VARARGS },
	 { (char *)"hk_datasource_clear_filter", _wrap_hk_datasource_clear_filter, METH_VARARGS },
	 { (char *)"hk_datasource_set_sorting", _wrap_hk_datasource_set_sorting, METH_VARARGS },
	 { (char *)"hk_datasource_sorting", _wrap_hk_datasource_sorting, METH_VARARGS },
	 { (char *)"hk_datasource_set_temporarysorting", _wrap_hk_datasource_set_temporarysorting, METH_VARARGS },
	 { (char *)"hk_datasource_temporarysorting", _wrap_hk_datasource_temporarysorting, METH_VARARGS },
	 { (char *)"hk_datasource_set_use_temporarysorting", _wrap_hk_datasource_set_use_temporarysorting, METH_VARARGS },
	 { (char *)"hk_datasource_use_temporarysorting", _wrap_hk_datasource_use_temporarysorting, METH_VARARGS },
	 { (char *)"hk_datasource_clear_sorting", _wrap_hk_datasource_clear_sorting, METH_VARARGS },
	 { (char *)"hk_datasource_datasource_used", _wrap_hk_datasource_datasource_used, METH_VARARGS },
	 { (char *)"hk_datasource_referenceslist", _wrap_hk_datasource_referenceslist, METH_VARARGS },
	 { (char *)"hk_datasource_add_reference", _wrap_hk_datasource_add_reference, METH_VARARGS },
	 { (char *)"hk_datasource_drop_reference", _wrap_hk_datasource_drop_reference, METH_VARARGS },
	 { (char *)"hk_datasource_has_changed", _wrap_hk_datasource_has_changed, METH_VARARGS },
	 { (char *)"hk_datasource_dateformat", _wrap_hk_datasource_dateformat, METH_VARARGS },
	 { (char *)"hk_datasource_datetimeformat", _wrap_hk_datasource_datetimeformat, METH_VARARGS },
	 { (char *)"hk_datasource_timeformat", _wrap_hk_datasource_timeformat, METH_VARARGS },
	 { (char *)"hk_datasource_dependingmode", _wrap_hk_datasource_dependingmode, METH_VARARGS },
	 { (char *)"hk_datasource_set_depending_on", _wrap_hk_datasource_set_depending_on, METH_VARARGS },
	 { (char *)"hk_datasource_depending_on", _wrap_hk_datasource_depending_on, METH_VARARGS },
	 { (char *)"hk_datasource_set_depending_on_is_left_join", _wrap_hk_datasource_set_depending_on_is_left_join, METH_VARARGS },
	 { (char *)"hk_datasource_depending_on_is_left_join", _wrap_hk_datasource_depending_on_is_left_join, METH_VARARGS },
	 { (char *)"hk_datasource_depending_on_react_on_data_changes", _wrap_hk_datasource_depending_on_react_on_data_changes, METH_VARARGS },
	 { (char *)"hk_datasource_depending_on_thisfields", _wrap_hk_datasource_depending_on_thisfields, METH_VARARGS },
	 { (char *)"hk_datasource_depending_on_masterfields", _wrap_hk_datasource_depending_on_masterfields, METH_VARARGS },
	 { (char *)"hk_datasource_set_depending_on_presentationdatasource", _wrap_hk_datasource_set_depending_on_presentationdatasource, METH_VARARGS },
	 { (char *)"hk_datasource_depending_on_presentationdatasource", _wrap_hk_datasource_depending_on_presentationdatasource, METH_VARARGS },
	 { (char *)"hk_datasource_add_depending_fields", _wrap_hk_datasource_add_depending_fields, METH_VARARGS },
	 { (char *)"hk_datasource_clear_depending_fields", _wrap_hk_datasource_clear_depending_fields, METH_VARARGS },
	 { (char *)"hk_datasource_columnlist", _wrap_hk_datasource_columnlist, METH_VARARGS },
	 { (char *)"hk_datasource_indexlist", _wrap_hk_datasource_indexlist, METH_VARARGS },
	 { (char *)"hk_datasource_show_currentrow", _wrap_hk_datasource_show_currentrow, METH_VARARGS },
	 { (char *)"hk_datasource_indices", _wrap_hk_datasource_indices, METH_VARARGS },
	 { (char *)"delete_hk_datasource", _wrap_delete_hk_datasource, METH_VARARGS },
	 { (char *)"hk_datasource_swigregister", hk_datasource_swigregister, METH_VARARGS },
	 { (char *)"hk_column_name", _wrap_hk_column_name, METH_VARARGS },
	 { (char *)"hk_column_set_name", _wrap_hk_column_set_name, METH_VARARGS },
	 { (char *)"hk_column_is_readonly", _wrap_hk_column_is_readonly, METH_VARARGS },
	 { (char *)"hk_column_set_readonly", _wrap_hk_column_set_readonly, METH_VARARGS },
	 { (char *)"hk_column_columntype", _wrap_hk_column_columntype, METH_VARARGS },
	 { (char *)"hk_column_set_columntype", _wrap_hk_column_set_columntype, METH_VARARGS },
	 { (char *)"hk_column_size", _wrap_hk_column_size, METH_VARARGS },
	 { (char *)"hk_column_set_size", _wrap_hk_column_set_size, METH_VARARGS },
	 { (char *)"hk_column_columntype_name", _wrap_hk_column_columntype_name, METH_VARARGS },
	 { (char *)"hk_column_is_primary", _wrap_hk_column_is_primary, METH_VARARGS },
	 { (char *)"hk_column_set_primary", _wrap_hk_column_set_primary, METH_VARARGS },
	 { (char *)"hk_column_is_notnull", _wrap_hk_column_is_notnull, METH_VARARGS },
	 { (char *)"hk_column_get_delimiter", _wrap_hk_column_get_delimiter, METH_VARARGS },
	 { (char *)"hk_column_set_notnull", _wrap_hk_column_set_notnull, METH_VARARGS },
	 { (char *)"hk_column_has_changed", _wrap_hk_column_has_changed, METH_VARARGS },
	 { (char *)"hk_column_asstring", _wrap_hk_column_asstring, METH_VARARGS },
	 { (char *)"hk_column_set_asstring", _wrap_hk_column_set_asstring, METH_VARARGS },
	 { (char *)"hk_column_transformed_asstring", _wrap_hk_column_transformed_asstring, METH_VARARGS },
	 { (char *)"hk_column_transformed_asstring_at", _wrap_hk_column_transformed_asstring_at, METH_VARARGS },
	 { (char *)"hk_column_changed_data_asstring", _wrap_hk_column_changed_data_asstring, METH_VARARGS },
	 { (char *)"hk_column_set_asbinary", _wrap_hk_column_set_asbinary, METH_VARARGS },
	 { (char *)"hk_column_asbinary", _wrap_hk_column_asbinary, METH_VARARGS },
	 { (char *)"hk_column_asbinary_at", _wrap_hk_column_asbinary_at, METH_VARARGS },
	 { (char *)"hk_column_set_asbool", _wrap_hk_column_set_asbool, METH_VARARGS },
	 { (char *)"hk_column_asbool", _wrap_hk_column_asbool, METH_VARARGS },
	 { (char *)"hk_column_asbool_at", _wrap_hk_column_asbool_at, METH_VARARGS },
	 { (char *)"hk_column_changed_data_asbool", _wrap_hk_column_changed_data_asbool, METH_VARARGS },
	 { (char *)"hk_column_set_asinteger", _wrap_hk_column_set_asinteger, METH_VARARGS },
	 { (char *)"hk_column_asinteger", _wrap_hk_column_asinteger, METH_VARARGS },
	 { (char *)"hk_column_asinteger_at", _wrap_hk_column_asinteger_at, METH_VARARGS },
	 { (char *)"hk_column_changed_data_asinteger", _wrap_hk_column_changed_data_asinteger, METH_VARARGS },
	 { (char *)"hk_column_set_asdouble", _wrap_hk_column_set_asdouble, METH_VARARGS },
	 { (char *)"hk_column_asdouble", _wrap_hk_column_asdouble, METH_VARARGS },
	 { (char *)"hk_column_asdouble_at", _wrap_hk_column_asdouble_at, METH_VARARGS },
	 { (char *)"hk_column_changed_data_asdouble", _wrap_hk_column_changed_data_asdouble, METH_VARARGS },
	 { (char *)"hk_column_fieldnumber", _wrap_hk_column_fieldnumber, METH_VARARGS },
	 { (char *)"hk_column_asstring_at", _wrap_hk_column_asstring_at, METH_VARARGS },
	 { (char *)"hk_column_is_nullvalue", _wrap_hk_column_is_nullvalue, METH_VARARGS },
	 { (char *)"hk_column_changed_data_is_nullvalue", _wrap_hk_column_changed_data_is_nullvalue, METH_VARARGS },
	 { (char *)"hk_column_is_nullvalue_at", _wrap_hk_column_is_nullvalue_at, METH_VARARGS },
	 { (char *)"hk_column_set_asnullvalue", _wrap_hk_column_set_asnullvalue, METH_VARARGS },
	 { (char *)"hk_column_count", _wrap_hk_column_count, METH_VARARGS },
	 { (char *)"hk_column_sum", _wrap_hk_column_sum, METH_VARARGS },
	 { (char *)"hk_column_find", _wrap_hk_column_find, METH_VARARGS },
	 { (char *)"hk_column_is_findstring", _wrap_hk_column_is_findstring, METH_VARARGS },
	 { (char *)"hk_column_changed_data", _wrap_hk_column_changed_data, METH_VARARGS },
	 { (char *)"hk_column_transformed_changed_data", _wrap_hk_column_transformed_changed_data, METH_VARARGS },
	 { (char *)"hk_column_reset_changed_data", _wrap_hk_column_reset_changed_data, METH_VARARGS },
	 { (char *)"hk_column_set_boolvalues", _wrap_hk_column_set_boolvalues, METH_VARARGS },
	 { (char *)"hk_column_bool_truevalue", _wrap_hk_column_bool_truevalue, METH_VARARGS },
	 { (char *)"hk_column_bool_falsevalue", _wrap_hk_column_bool_falsevalue, METH_VARARGS },
	 { (char *)"hk_column_set_dateformat", _wrap_hk_column_set_dateformat, METH_VARARGS },
	 { (char *)"hk_column_dateformat", _wrap_hk_column_dateformat, METH_VARARGS },
	 { (char *)"hk_column_set_timeformat", _wrap_hk_column_set_timeformat, METH_VARARGS },
	 { (char *)"hk_column_timeformat", _wrap_hk_column_timeformat, METH_VARARGS },
	 { (char *)"hk_column_set_datetimeformat", _wrap_hk_column_set_datetimeformat, METH_VARARGS },
	 { (char *)"hk_column_datetimeformat", _wrap_hk_column_datetimeformat, METH_VARARGS },
	 { (char *)"hk_column_save_to_file", _wrap_hk_column_save_to_file, METH_VARARGS },
	 { (char *)"hk_column_load_from_file", _wrap_hk_column_load_from_file, METH_VARARGS },
	 { (char *)"hk_column_save_columndefinition", _wrap_hk_column_save_columndefinition, METH_VARARGS },
	 { (char *)"hk_column_load_columndefinition", _wrap_hk_column_load_columndefinition, METH_VARARGS },
	 { (char *)"hk_column_datasource", _wrap_hk_column_datasource, METH_VARARGS },
	 { (char *)"hk_column_set_allow_autoincwrite", _wrap_hk_column_set_allow_autoincwrite, METH_VARARGS },
	 { (char *)"hk_column_allow_autoincwrite", _wrap_hk_column_allow_autoincwrite, METH_VARARGS },
	 { (char *)"hk_column_in_definitionmode", _wrap_hk_column_in_definitionmode, METH_VARARGS },
	 { (char *)"hk_column_curval_asstring", _wrap_hk_column_curval_asstring, METH_VARARGS },
	 { (char *)"hk_column_curval_asdouble", _wrap_hk_column_curval_asdouble, METH_VARARGS },
	 { (char *)"hk_column_curval_asinteger", _wrap_hk_column_curval_asinteger, METH_VARARGS },
	 { (char *)"hk_column_curval_asbool", _wrap_hk_column_curval_asbool, METH_VARARGS },
	 { (char *)"hk_column_set_definitionmode", _wrap_hk_column_set_definitionmode, METH_VARARGS },
	 { (char *)"hk_column_tableorigin", _wrap_hk_column_tableorigin, METH_VARARGS },
	 { (char *)"hk_column_swigregister", hk_column_swigregister, METH_VARARGS },
	 { (char *)"new_hk_visible", _wrap_new_hk_visible, METH_VARARGS },
	 { (char *)"delete_hk_visible", _wrap_delete_hk_visible, METH_VARARGS },
	 { (char *)"hk_visible_set_x", _wrap_hk_visible_set_x, METH_VARARGS },
	 { (char *)"hk_visible_set_y", _wrap_hk_visible_set_y, METH_VARARGS },
	 { (char *)"hk_visible_set_width", _wrap_hk_visible_set_width, METH_VARARGS },
	 { (char *)"hk_visible_set_height", _wrap_hk_visible_set_height, METH_VARARGS },
	 { (char *)"hk_visible_x", _wrap_hk_visible_x, METH_VARARGS },
	 { (char *)"hk_visible_y", _wrap_hk_visible_y, METH_VARARGS },
	 { (char *)"hk_visible_width", _wrap_hk_visible_width, METH_VARARGS },
	 { (char *)"hk_visible_height", _wrap_hk_visible_height, METH_VARARGS },
	 { (char *)"hk_visible_set_size", _wrap_hk_visible_set_size, METH_VARARGS },
	 { (char *)"hk_visible_set_position", _wrap_hk_visible_set_position, METH_VARARGS },
	 { (char *)"hk_visible_set_label", _wrap_hk_visible_set_label, METH_VARARGS },
	 { (char *)"hk_visible_label", _wrap_hk_visible_label, METH_VARARGS },
	 { (char *)"hk_visible_set_identifier", _wrap_hk_visible_set_identifier, METH_VARARGS },
	 { (char *)"hk_visible_identifier", _wrap_hk_visible_identifier, METH_VARARGS },
	 { (char *)"hk_visible_type", _wrap_hk_visible_type, METH_VARARGS },
	 { (char *)"hk_visible_set_font", _wrap_hk_visible_set_font, METH_VARARGS },
	 { (char *)"hk_visible_font", _wrap_hk_visible_font, METH_VARARGS },
	 { (char *)"hk_visible_set_foregroundcolour", _wrap_hk_visible_set_foregroundcolour, METH_VARARGS },
	 { (char *)"hk_visible_foregroundcolour", _wrap_hk_visible_foregroundcolour, METH_VARARGS },
	 { (char *)"hk_visible_set_backgroundcolour", _wrap_hk_visible_set_backgroundcolour, METH_VARARGS },
	 { (char *)"hk_visible_backgroundcolour", _wrap_hk_visible_backgroundcolour, METH_VARARGS },
	 { (char *)"hk_visible_set_neverregisterchange", _wrap_hk_visible_set_neverregisterchange, METH_VARARGS },
	 { (char *)"hk_visible_neverregisterchange", _wrap_hk_visible_neverregisterchange, METH_VARARGS },
	 { (char *)"hk_visible_savedata", _wrap_hk_visible_savedata, METH_VARARGS },
	 { (char *)"hk_visible_loaddata", _wrap_hk_visible_loaddata, METH_VARARGS },
	 { (char *)"hk_visible_presentationnumber", _wrap_hk_visible_presentationnumber, METH_VARARGS },
	 { (char *)"hk_visible_set_datetimeformat", _wrap_hk_visible_set_datetimeformat, METH_VARARGS },
	 { (char *)"hk_visible_datetimeformat", _wrap_hk_visible_datetimeformat, METH_VARARGS },
	 { (char *)"hk_visible_dateformat", _wrap_hk_visible_dateformat, METH_VARARGS },
	 { (char *)"hk_visible_timeformat", _wrap_hk_visible_timeformat, METH_VARARGS },
	 { (char *)"hk_visible_set_counts_as", _wrap_hk_visible_set_counts_as, METH_VARARGS },
	 { (char *)"hk_visible_counts_as", _wrap_hk_visible_counts_as, METH_VARARGS },
	 { (char *)"hk_visible_replace", _wrap_hk_visible_replace, METH_VARARGS },
	 { (char *)"hk_visible_presentation", _wrap_hk_visible_presentation, METH_VARARGS },
	 { (char *)"hk_visible_set_load_presentationnumber", _wrap_hk_visible_set_load_presentationnumber, METH_VARARGS },
	 { (char *)"hk_visible_load_presentationnumber", _wrap_hk_visible_load_presentationnumber, METH_VARARGS },
	 { (char *)"hk_visible_set_alignment", _wrap_hk_visible_set_alignment, METH_VARARGS },
	 { (char *)"hk_visible_alignment", _wrap_hk_visible_alignment, METH_VARARGS },
	 { (char *)"hk_visible_set_defaulttextalignment", _wrap_hk_visible_set_defaulttextalignment, METH_VARARGS },
	 { (char *)"hk_visible_defaulttextalignment", _wrap_hk_visible_defaulttextalignment, METH_VARARGS },
	 { (char *)"hk_visible_set_defaultnumberalignment", _wrap_hk_visible_set_defaultnumberalignment, METH_VARARGS },
	 { (char *)"hk_visible_defaultnumberalignment", _wrap_hk_visible_defaultnumberalignment, METH_VARARGS },
	 { (char *)"hk_visible_set_open_maximized_windows", _wrap_hk_visible_set_open_maximized_windows, METH_VARARGS },
	 { (char *)"hk_visible_open_maximized_windows", _wrap_hk_visible_open_maximized_windows, METH_VARARGS },
	 { (char *)"hk_visible_set_tooltip", _wrap_hk_visible_set_tooltip, METH_VARARGS },
	 { (char *)"hk_visible_tooltip", _wrap_hk_visible_tooltip, METH_VARARGS },
	 { (char *)"hk_visible_show_widget", _wrap_hk_visible_show_widget, METH_VARARGS },
	 { (char *)"hk_visible_hide_widget", _wrap_hk_visible_hide_widget, METH_VARARGS },
	 { (char *)"hk_visible_close_widget", _wrap_hk_visible_close_widget, METH_VARARGS },
	 { (char *)"hk_visible_lower_widget", _wrap_hk_visible_lower_widget, METH_VARARGS },
	 { (char *)"hk_visible_raise_widget", _wrap_hk_visible_raise_widget, METH_VARARGS },
	 { (char *)"hk_visible_set_on_click_action", _wrap_hk_visible_set_on_click_action, METH_VARARGS },
	 { (char *)"hk_visible_on_click_action", _wrap_hk_visible_on_click_action, METH_VARARGS },
	 { (char *)"hk_visible_set_on_doubleclick_action", _wrap_hk_visible_set_on_doubleclick_action, METH_VARARGS },
	 { (char *)"hk_visible_on_doubleclick_action", _wrap_hk_visible_on_doubleclick_action, METH_VARARGS },
	 { (char *)"hk_visible_set_on_open_action", _wrap_hk_visible_set_on_open_action, METH_VARARGS },
	 { (char *)"hk_visible_on_open_action", _wrap_hk_visible_on_open_action, METH_VARARGS },
	 { (char *)"hk_visible_set_on_close_action", _wrap_hk_visible_set_on_close_action, METH_VARARGS },
	 { (char *)"hk_visible_on_close_action", _wrap_hk_visible_on_close_action, METH_VARARGS },
	 { (char *)"hk_visible_set_on_getfocus_action", _wrap_hk_visible_set_on_getfocus_action, METH_VARARGS },
	 { (char *)"hk_visible_on_getfocus_action", _wrap_hk_visible_on_getfocus_action, METH_VARARGS },
	 { (char *)"hk_visible_set_on_loosefocus_action", _wrap_hk_visible_set_on_loosefocus_action, METH_VARARGS },
	 { (char *)"hk_visible_on_loosefocus_action", _wrap_hk_visible_on_loosefocus_action, METH_VARARGS },
	 { (char *)"hk_visible_set_on_key_action", _wrap_hk_visible_set_on_key_action, METH_VARARGS },
	 { (char *)"hk_visible_on_key_action", _wrap_hk_visible_on_key_action, METH_VARARGS },
	 { (char *)"hk_visible_set_key", _wrap_hk_visible_set_key, METH_VARARGS },
	 { (char *)"hk_visible_key", _wrap_hk_visible_key, METH_VARARGS },
	 { (char *)"hk_visible_set_enabled", _wrap_hk_visible_set_enabled, METH_VARARGS },
	 { (char *)"hk_visible_is_enabled", _wrap_hk_visible_is_enabled, METH_VARARGS },
	 { (char *)"hk_visible_action_on_click", _wrap_hk_visible_action_on_click, METH_VARARGS },
	 { (char *)"hk_visible_action_on_doubleclick", _wrap_hk_visible_action_on_doubleclick, METH_VARARGS },
	 { (char *)"hk_visible_action_on_close", _wrap_hk_visible_action_on_close, METH_VARARGS },
	 { (char *)"hk_visible_action_on_open", _wrap_hk_visible_action_on_open, METH_VARARGS },
	 { (char *)"hk_visible_action_on_getfocus", _wrap_hk_visible_action_on_getfocus, METH_VARARGS },
	 { (char *)"hk_visible_action_on_loosefocus", _wrap_hk_visible_action_on_loosefocus, METH_VARARGS },
	 { (char *)"hk_visible_action_on_key", _wrap_hk_visible_action_on_key, METH_VARARGS },
	 { (char *)"hk_visible_in_tabvisible", _wrap_hk_visible_in_tabvisible, METH_VARARGS },
	 { (char *)"hk_visible_set_buddylabel", _wrap_hk_visible_set_buddylabel, METH_VARARGS },
	 { (char *)"hk_visible_buddylabel", _wrap_hk_visible_buddylabel, METH_VARARGS },
	 { (char *)"hk_visible_set_movebuddylabel", _wrap_hk_visible_set_movebuddylabel, METH_VARARGS },
	 { (char *)"hk_visible_move_buddylabel", _wrap_hk_visible_move_buddylabel, METH_VARARGS },
	 { (char *)"hk_visible_tag_number", _wrap_hk_visible_tag_number, METH_VARARGS },
	 { (char *)"hk_visible_column_value", _wrap_hk_visible_column_value, METH_VARARGS },
	 { (char *)"hk_visible_tag_value", _wrap_hk_visible_tag_value, METH_VARARGS },
	 { (char *)"hk_visible_register_tag", _wrap_hk_visible_register_tag, METH_VARARGS },
	 { (char *)"hk_visible_swigregister", hk_visible_swigregister, METH_VARARGS },
	 { (char *)"currentvisible", _wrap_currentvisible, METH_VARARGS },
	 { (char *)"cast_button", _wrap_cast_button, METH_VARARGS },
	 { (char *)"cast_dslineedit", _wrap_cast_dslineedit, METH_VARARGS },
	 { (char *)"cast_dsmemo", _wrap_cast_dsmemo, METH_VARARGS },
	 { (char *)"cast_dsgrid", _wrap_cast_dsgrid, METH_VARARGS },
	 { (char *)"cast_dscombobox", _wrap_cast_dscombobox, METH_VARARGS },
	 { (char *)"cast_dsboolean", _wrap_cast_dsboolean, METH_VARARGS },
	 { (char *)"cast_dsvisible", _wrap_cast_dsvisible, METH_VARARGS },
	 { (char *)"cast_subform", _wrap_cast_subform, METH_VARARGS },
	 { (char *)"cast_form", _wrap_cast_form, METH_VARARGS },
	 { (char *)"cast_dsimage", _wrap_cast_dsimage, METH_VARARGS },
	 { (char *)"cast_dsdate", _wrap_cast_dsdate, METH_VARARGS },
	 { (char *)"cast_report", _wrap_cast_report, METH_VARARGS },
	 { (char *)"new_hk_dsvisible", _wrap_new_hk_dsvisible, METH_VARARGS },
	 { (char *)"delete_hk_dsvisible", _wrap_delete_hk_dsvisible, METH_VARARGS },
	 { (char *)"hk_dsvisible_set_datasource", _wrap_hk_dsvisible_set_datasource, METH_VARARGS },
	 { (char *)"hk_dsvisible_set_presentationdatasource", _wrap_hk_dsvisible_set_presentationdatasource, METH_VARARGS },
	 { (char *)"hk_dsvisible_presentationdatasource", _wrap_hk_dsvisible_presentationdatasource, METH_VARARGS },
	 { (char *)"hk_dsvisible_datasource", _wrap_hk_dsvisible_datasource, METH_VARARGS },
	 { (char *)"hk_dsvisible_savedata", _wrap_hk_dsvisible_savedata, METH_VARARGS },
	 { (char *)"hk_dsvisible_loaddata", _wrap_hk_dsvisible_loaddata, METH_VARARGS },
	 { (char *)"hk_dsvisible_set_readonly", _wrap_hk_dsvisible_set_readonly, METH_VARARGS },
	 { (char *)"hk_dsvisible_is_readonly", _wrap_hk_dsvisible_is_readonly, METH_VARARGS },
	 { (char *)"hk_dsvisible_set_before_row_change_action", _wrap_hk_dsvisible_set_before_row_change_action, METH_VARARGS },
	 { (char *)"hk_dsvisible_before_row_change_action", _wrap_hk_dsvisible_before_row_change_action, METH_VARARGS },
	 { (char *)"hk_dsvisible_set_after_row_change_action", _wrap_hk_dsvisible_set_after_row_change_action, METH_VARARGS },
	 { (char *)"hk_dsvisible_after_row_change_action", _wrap_hk_dsvisible_after_row_change_action, METH_VARARGS },
	 { (char *)"hk_dsvisible_set_before_update_action", _wrap_hk_dsvisible_set_before_update_action, METH_VARARGS },
	 { (char *)"hk_dsvisible_before_update_action", _wrap_hk_dsvisible_before_update_action, METH_VARARGS },
	 { (char *)"hk_dsvisible_set_after_update_action", _wrap_hk_dsvisible_set_after_update_action, METH_VARARGS },
	 { (char *)"hk_dsvisible_after_update_action", _wrap_hk_dsvisible_after_update_action, METH_VARARGS },
	 { (char *)"hk_dsvisible_set_before_delete_action", _wrap_hk_dsvisible_set_before_delete_action, METH_VARARGS },
	 { (char *)"hk_dsvisible_before_delete_action", _wrap_hk_dsvisible_before_delete_action, METH_VARARGS },
	 { (char *)"hk_dsvisible_set_after_delete_action", _wrap_hk_dsvisible_set_after_delete_action, METH_VARARGS },
	 { (char *)"hk_dsvisible_after_delete_action", _wrap_hk_dsvisible_after_delete_action, METH_VARARGS },
	 { (char *)"hk_dsvisible_set_before_insert_action", _wrap_hk_dsvisible_set_before_insert_action, METH_VARARGS },
	 { (char *)"hk_dsvisible_before_insert_action", _wrap_hk_dsvisible_before_insert_action, METH_VARARGS },
	 { (char *)"hk_dsvisible_set_after_insert_action", _wrap_hk_dsvisible_set_after_insert_action, METH_VARARGS },
	 { (char *)"hk_dsvisible_after_insert_action", _wrap_hk_dsvisible_after_insert_action, METH_VARARGS },
	 { (char *)"hk_dsvisible_tag_value", _wrap_hk_dsvisible_tag_value, METH_VARARGS },
	 { (char *)"hk_dsvisible_action_before_store_changed_data", _wrap_hk_dsvisible_action_before_store_changed_data, METH_VARARGS },
	 { (char *)"hk_dsvisible_action_after_store_changed_data", _wrap_hk_dsvisible_action_after_store_changed_data, METH_VARARGS },
	 { (char *)"hk_dsvisible_action_before_row_change", _wrap_hk_dsvisible_action_before_row_change, METH_VARARGS },
	 { (char *)"hk_dsvisible_action_after_row_change", _wrap_hk_dsvisible_action_after_row_change, METH_VARARGS },
	 { (char *)"hk_dsvisible_action_before_delete", _wrap_hk_dsvisible_action_before_delete, METH_VARARGS },
	 { (char *)"hk_dsvisible_action_after_delete", _wrap_hk_dsvisible_action_after_delete, METH_VARARGS },
	 { (char *)"hk_dsvisible_action_before_insert", _wrap_hk_dsvisible_action_before_insert, METH_VARARGS },
	 { (char *)"hk_dsvisible_action_after_insert", _wrap_hk_dsvisible_action_after_insert, METH_VARARGS },
	 { (char *)"hk_dsvisible_swigregister", hk_dsvisible_swigregister, METH_VARARGS },
	 { (char *)"currentdsvisible", _wrap_currentdsvisible, METH_VARARGS },
	 { (char *)"currentgrid", _wrap_currentgrid, METH_VARARGS },
	 { (char *)"new_hk_dsdatavisible", _wrap_new_hk_dsdatavisible, METH_VARARGS },
	 { (char *)"delete_hk_dsdatavisible", _wrap_delete_hk_dsdatavisible, METH_VARARGS },
	 { (char *)"hk_dsdatavisible_set_columnname", _wrap_hk_dsdatavisible_set_columnname, METH_VARARGS },
	 { (char *)"hk_dsdatavisible_column", _wrap_hk_dsdatavisible_column, METH_VARARGS },
	 { (char *)"hk_dsdatavisible_columnname", _wrap_hk_dsdatavisible_columnname, METH_VARARGS },
	 { (char *)"hk_dsdatavisible_set_datasource", _wrap_hk_dsdatavisible_set_datasource, METH_VARARGS },
	 { (char *)"hk_dsdatavisible_datasource", _wrap_hk_dsdatavisible_datasource, METH_VARARGS },
	 { (char *)"hk_dsdatavisible_savedata", _wrap_hk_dsdatavisible_savedata, METH_VARARGS },
	 { (char *)"hk_dsdatavisible_loaddata", _wrap_hk_dsdatavisible_loaddata, METH_VARARGS },
	 { (char *)"hk_dsdatavisible_use_defaultvalue", _wrap_hk_dsdatavisible_use_defaultvalue, METH_VARARGS },
	 { (char *)"hk_dsdatavisible_set_defaultvalue", _wrap_hk_dsdatavisible_set_defaultvalue, METH_VARARGS },
	 { (char *)"hk_dsdatavisible_raw_defaultvalue", _wrap_hk_dsdatavisible_raw_defaultvalue, METH_VARARGS },
	 { (char *)"hk_dsdatavisible_defaultvalue", _wrap_hk_dsdatavisible_defaultvalue, METH_VARARGS },
	 { (char *)"hk_dsdatavisible_reset_default", _wrap_hk_dsdatavisible_reset_default, METH_VARARGS },
	 { (char *)"hk_dsdatavisible_set_numberformat", _wrap_hk_dsdatavisible_set_numberformat, METH_VARARGS },
	 { (char *)"hk_dsdatavisible_use_numberseparator", _wrap_hk_dsdatavisible_use_numberseparator, METH_VARARGS },
	 { (char *)"hk_dsdatavisible_commadigits", _wrap_hk_dsdatavisible_commadigits, METH_VARARGS },
	 { (char *)"hk_dsdatavisible_precision", _wrap_hk_dsdatavisible_precision, METH_VARARGS },
	 { (char *)"hk_dsdatavisible_set_defaultnumberformat", _wrap_hk_dsdatavisible_set_defaultnumberformat, METH_VARARGS },
	 { (char *)"hk_dsdatavisible_defaultuse_numberseparator", _wrap_hk_dsdatavisible_defaultuse_numberseparator, METH_VARARGS },
	 { (char *)"hk_dsdatavisible_defaultprecision", _wrap_hk_dsdatavisible_defaultprecision, METH_VARARGS },
	 { (char *)"hk_dsdatavisible_value_at", _wrap_hk_dsdatavisible_value_at, METH_VARARGS },
	 { (char *)"hk_dsdatavisible_value", _wrap_hk_dsdatavisible_value, METH_VARARGS },
	 { (char *)"hk_dsdatavisible_set_value", _wrap_hk_dsdatavisible_set_value, METH_VARARGS },
	 { (char *)"hk_dsdatavisible_find", _wrap_hk_dsdatavisible_find, METH_VARARGS },
	 { (char *)"hk_dsdatavisible_set_on_valuechanged_action", _wrap_hk_dsdatavisible_set_on_valuechanged_action, METH_VARARGS },
	 { (char *)"hk_dsdatavisible_on_valuechanged_action", _wrap_hk_dsdatavisible_on_valuechanged_action, METH_VARARGS },
	 { (char *)"hk_dsdatavisible_action_on_valuechanged", _wrap_hk_dsdatavisible_action_on_valuechanged, METH_VARARGS },
	 { (char *)"hk_dsdatavisible_tag_value", _wrap_hk_dsdatavisible_tag_value, METH_VARARGS },
	 { (char *)"hk_dsdatavisible_set_filtervalue", _wrap_hk_dsdatavisible_set_filtervalue, METH_VARARGS },
	 { (char *)"hk_dsdatavisible_filtervalue", _wrap_hk_dsdatavisible_filtervalue, METH_VARARGS },
	 { (char *)"hk_dsdatavisible_parsed_value", _wrap_hk_dsdatavisible_parsed_value, METH_VARARGS },
	 { (char *)"hk_dsdatavisible_update_filter", _wrap_hk_dsdatavisible_update_filter, METH_VARARGS },
	 { (char *)"hk_dsdatavisible_swigregister", hk_dsdatavisible_swigregister, METH_VARARGS },
	 { (char *)"new_hk_dslineedit", _wrap_new_hk_dslineedit, METH_VARARGS },
	 { (char *)"delete_hk_dslineedit", _wrap_delete_hk_dslineedit, METH_VARARGS },
	 { (char *)"hk_dslineedit_set_gridcolumn", _wrap_hk_dslineedit_set_gridcolumn, METH_VARARGS },
	 { (char *)"hk_dslineedit_gridcolumn", _wrap_hk_dslineedit_gridcolumn, METH_VARARGS },
	 { (char *)"hk_dslineedit_swigregister", hk_dslineedit_swigregister, METH_VARARGS },
	 { (char *)"new_hk_dsmemo", _wrap_new_hk_dsmemo, METH_VARARGS },
	 { (char *)"hk_dsmemo_set_gridcolumn", _wrap_hk_dsmemo_set_gridcolumn, METH_VARARGS },
	 { (char *)"hk_dsmemo_gridcolumn", _wrap_hk_dsmemo_gridcolumn, METH_VARARGS },
	 { (char *)"delete_hk_dsmemo", _wrap_delete_hk_dsmemo, METH_VARARGS },
	 { (char *)"hk_dsmemo_swigregister", hk_dsmemo_swigregister, METH_VARARGS },
	 { (char *)"new_hk_dsboolean", _wrap_new_hk_dsboolean, METH_VARARGS },
	 { (char *)"hk_dsboolean_set_gridcolumn", _wrap_hk_dsboolean_set_gridcolumn, METH_VARARGS },
	 { (char *)"hk_dsboolean_gridcolumn", _wrap_hk_dsboolean_gridcolumn, METH_VARARGS },
	 { (char *)"delete_hk_dsboolean", _wrap_delete_hk_dsboolean, METH_VARARGS },
	 { (char *)"hk_dsboolean_swigregister", hk_dsboolean_swigregister, METH_VARARGS },
	 { (char *)"new_hk_dsdate", _wrap_new_hk_dsdate, METH_VARARGS },
	 { (char *)"delete_hk_dsdate", _wrap_delete_hk_dsdate, METH_VARARGS },
	 { (char *)"hk_dsdate_swigregister", hk_dsdate_swigregister, METH_VARARGS },
	 { (char *)"new_hk_dsimage", _wrap_new_hk_dsimage, METH_VARARGS },
	 { (char *)"delete_hk_dsimage", _wrap_delete_hk_dsimage, METH_VARARGS },
	 { (char *)"hk_dsimage_set_path", _wrap_hk_dsimage_set_path, METH_VARARGS },
	 { (char *)"hk_dsimage_path", _wrap_hk_dsimage_path, METH_VARARGS },
	 { (char *)"hk_dsimage_savedata", _wrap_hk_dsimage_savedata, METH_VARARGS },
	 { (char *)"hk_dsimage_loaddata", _wrap_hk_dsimage_loaddata, METH_VARARGS },
	 { (char *)"hk_dsimage_set_value", _wrap_hk_dsimage_set_value, METH_VARARGS },
	 { (char *)"hk_dsimage_value", _wrap_hk_dsimage_value, METH_VARARGS },
	 { (char *)"hk_dsimage_value_at", _wrap_hk_dsimage_value_at, METH_VARARGS },
	 { (char *)"hk_dsimage_set_zoom", _wrap_hk_dsimage_set_zoom, METH_VARARGS },
	 { (char *)"hk_dsimage_zoom", _wrap_hk_dsimage_zoom, METH_VARARGS },
	 { (char *)"hk_dsimage_load_localimage", _wrap_hk_dsimage_load_localimage, METH_VARARGS },
	 { (char *)"hk_dsimage_localimage", _wrap_hk_dsimage_localimage, METH_VARARGS },
	 { (char *)"hk_dsimage_show_image", _wrap_hk_dsimage_show_image, METH_VARARGS },
	 { (char *)"hk_dsimage_get_postscript_image", _wrap_hk_dsimage_get_postscript_image, METH_VARARGS },
	 { (char *)"hk_dsimage_add_postscriptimagetype", _wrap_hk_dsimage_add_postscriptimagetype, METH_VARARGS },
	 { (char *)"hk_dsimage_swigregister", hk_dsimage_swigregister, METH_VARARGS },
	 { (char *)"currentlineedit", _wrap_currentlineedit, METH_VARARGS },
	 { (char *)"currentboolean", _wrap_currentboolean, METH_VARARGS },
	 { (char *)"currentcombobox", _wrap_currentcombobox, METH_VARARGS },
	 { (char *)"currentmemo", _wrap_currentmemo, METH_VARARGS },
	 { (char *)"currentgridcolumn", _wrap_currentgridcolumn, METH_VARARGS },
	 { (char *)"currentdsimage", _wrap_currentdsimage, METH_VARARGS },
	 { (char *)"currentdsdate", _wrap_currentdsdate, METH_VARARGS },
	 { (char *)"new_hk_font", _wrap_new_hk_font, METH_VARARGS },
	 { (char *)"hk_font_set_font", _wrap_hk_font_set_font, METH_VARARGS },
	 { (char *)"hk_font_fontname", _wrap_hk_font_fontname, METH_VARARGS },
	 { (char *)"hk_font_fontsize", _wrap_hk_font_fontsize, METH_VARARGS },
	 { (char *)"hk_font_set_bold", _wrap_hk_font_set_bold, METH_VARARGS },
	 { (char *)"hk_font_bold", _wrap_hk_font_bold, METH_VARARGS },
	 { (char *)"hk_font_set_italic", _wrap_hk_font_set_italic, METH_VARARGS },
	 { (char *)"hk_font_italic", _wrap_hk_font_italic, METH_VARARGS },
	 { (char *)"hk_font_psfontname", _wrap_hk_font_psfontname, METH_VARARGS },
	 { (char *)"hk_font_fontfile", _wrap_hk_font_fontfile, METH_VARARGS },
	 { (char *)"hk_font_char_ascender_size", _wrap_hk_font_char_ascender_size, METH_VARARGS },
	 { (char *)"hk_font_char_descender_size", _wrap_hk_font_char_descender_size, METH_VARARGS },
	 { (char *)"hk_font_set_defaultfont", _wrap_hk_font_set_defaultfont, METH_VARARGS },
	 { (char *)"hk_font_defaultfontname", _wrap_hk_font_defaultfontname, METH_VARARGS },
	 { (char *)"hk_font_defaultfontsize", _wrap_hk_font_defaultfontsize, METH_VARARGS },
	 { (char *)"hk_font_fontlist", _wrap_hk_font_fontlist, METH_VARARGS },
	 { (char *)"delete_hk_font", _wrap_delete_hk_font, METH_VARARGS },
	 { (char *)"hk_font_swigregister", hk_font_swigregister, METH_VARARGS },
	 { (char *)"new_hk_colour", _wrap_new_hk_colour, METH_VARARGS },
	 { (char *)"delete_hk_colour", _wrap_delete_hk_colour, METH_VARARGS },
	 { (char *)"hk_colour_set_colour", _wrap_hk_colour_set_colour, METH_VARARGS },
	 { (char *)"hk_colour_red", _wrap_hk_colour_red, METH_VARARGS },
	 { (char *)"hk_colour_green", _wrap_hk_colour_green, METH_VARARGS },
	 { (char *)"hk_colour_blue", _wrap_hk_colour_blue, METH_VARARGS },
	 { (char *)"hk_colour_swigregister", hk_colour_swigregister, METH_VARARGS },
	 { (char *)"new_hk_key", _wrap_new_hk_key, METH_VARARGS },
	 { (char *)"delete_hk_key", _wrap_delete_hk_key, METH_VARARGS },
	 { (char *)"hk_key_state", _wrap_hk_key_state, METH_VARARGS },
	 { (char *)"hk_key_key", _wrap_hk_key_key, METH_VARARGS },
	 { (char *)"hk_key_text", _wrap_hk_key_text, METH_VARARGS },
	 { (char *)"hk_key___eq__", _wrap_hk_key___eq__, METH_VARARGS },
	 { (char *)"hk_key___ne__", _wrap_hk_key___ne__, METH_VARARGS },
	 { (char *)"hk_key_accept_key", _wrap_hk_key_accept_key, METH_VARARGS },
	 { (char *)"hk_key_set_accept_key", _wrap_hk_key_set_accept_key, METH_VARARGS },
	 { (char *)"hk_key_swigregister", hk_key_swigregister, METH_VARARGS },
	 { (char *)"new_hk_dsmodevisible", _wrap_new_hk_dsmodevisible, METH_VARARGS },
	 { (char *)"delete_hk_dsmodevisible", _wrap_delete_hk_dsmodevisible, METH_VARARGS },
	 { (char *)"hk_dsmodevisible_set_mode", _wrap_hk_dsmodevisible_set_mode, METH_VARARGS },
	 { (char *)"hk_dsmodevisible_set_designmode", _wrap_hk_dsmodevisible_set_designmode, METH_VARARGS },
	 { (char *)"hk_dsmodevisible_set_viewmode", _wrap_hk_dsmodevisible_set_viewmode, METH_VARARGS },
	 { (char *)"hk_dsmodevisible_mode", _wrap_hk_dsmodevisible_mode, METH_VARARGS },
	 { (char *)"hk_dsmodevisible_has_changed", _wrap_hk_dsmodevisible_has_changed, METH_VARARGS },
	 { (char *)"hk_dsmodevisible_set_block_has_changed", _wrap_hk_dsmodevisible_set_block_has_changed, METH_VARARGS },
	 { (char *)"hk_dsmodevisible_block_has_changed", _wrap_hk_dsmodevisible_block_has_changed, METH_VARARGS },
	 { (char *)"hk_dsmodevisible_reset_has_changed", _wrap_hk_dsmodevisible_reset_has_changed, METH_VARARGS },
	 { (char *)"hk_dsmodevisible_is_new", _wrap_hk_dsmodevisible_is_new, METH_VARARGS },
	 { (char *)"hk_dsmodevisible_swigregister", hk_dsmodevisible_swigregister, METH_VARARGS },
	 { (char *)"new_hk_dstable", _wrap_new_hk_dstable, METH_VARARGS },
	 { (char *)"hk_dstable_grid", _wrap_hk_dstable_grid, METH_VARARGS },
	 { (char *)"delete_hk_dstable", _wrap_delete_hk_dstable, METH_VARARGS },
	 { (char *)"hk_dstable_swigregister", hk_dstable_swigregister, METH_VARARGS },
	 { (char *)"new_hk_dsquery", _wrap_new_hk_dsquery, METH_VARARGS },
	 { (char *)"delete_hk_dsquery", _wrap_delete_hk_dsquery, METH_VARARGS },
	 { (char *)"hk_dsquery_grid", _wrap_hk_dsquery_grid, METH_VARARGS },
	 { (char *)"hk_dsquery_qbe", _wrap_hk_dsquery_qbe, METH_VARARGS },
	 { (char *)"hk_dsquery_use_qbe", _wrap_hk_dsquery_use_qbe, METH_VARARGS },
	 { (char *)"hk_dsquery_set_use_qbe", _wrap_hk_dsquery_set_use_qbe, METH_VARARGS },
	 { (char *)"hk_dsquery_save_query", _wrap_hk_dsquery_save_query, METH_VARARGS },
	 { (char *)"hk_dsquery_load_query", _wrap_hk_dsquery_load_query, METH_VARARGS },
	 { (char *)"hk_dsquery_savedata", _wrap_hk_dsquery_savedata, METH_VARARGS },
	 { (char *)"hk_dsquery_loaddata", _wrap_hk_dsquery_loaddata, METH_VARARGS },
	 { (char *)"hk_dsquery_swigregister", hk_dsquery_swigregister, METH_VARARGS },
	 { (char *)"new_hk_presentation", _wrap_new_hk_presentation, METH_VARARGS },
	 { (char *)"delete_hk_presentation", _wrap_delete_hk_presentation, METH_VARARGS },
	 { (char *)"hk_presentation_set_database", _wrap_hk_presentation_set_database, METH_VARARGS },
	 { (char *)"hk_presentation_database", _wrap_hk_presentation_database, METH_VARARGS },
	 { (char *)"hk_presentation_presentationtype", _wrap_hk_presentation_presentationtype, METH_VARARGS },
	 { (char *)"hk_presentation_set_name", _wrap_hk_presentation_set_name, METH_VARARGS },
	 { (char *)"hk_presentation_name", _wrap_hk_presentation_name, METH_VARARGS },
	 { (char *)"hk_presentation_set_mode", _wrap_hk_presentation_set_mode, METH_VARARGS },
	 { (char *)"hk_presentation_datasources", _wrap_hk_presentation_datasources, METH_VARARGS },
	 { (char *)"hk_presentation_new_datasource", _wrap_hk_presentation_new_datasource, METH_VARARGS },
	 { (char *)"hk_presentation_get_datasource", _wrap_hk_presentation_get_datasource, METH_VARARGS },
	 { (char *)"hk_presentation_get_datasource_by_shortname", _wrap_hk_presentation_get_datasource_by_shortname, METH_VARARGS },
	 { (char *)"hk_presentation_unique_datasourcename", _wrap_hk_presentation_unique_datasourcename, METH_VARARGS },
	 { (char *)"hk_presentation_unique_shortdatasourcename", _wrap_hk_presentation_unique_shortdatasourcename, METH_VARARGS },
	 { (char *)"hk_presentation_savedata", _wrap_hk_presentation_savedata, METH_VARARGS },
	 { (char *)"hk_presentation_loaddata", _wrap_hk_presentation_loaddata, METH_VARARGS },
	 { (char *)"hk_presentation_clear_datasourcelist", _wrap_hk_presentation_clear_datasourcelist, METH_VARARGS },
	 { (char *)"hk_presentation_set_designsize", _wrap_hk_presentation_set_designsize, METH_VARARGS },
	 { (char *)"hk_presentation_set_presentationsize", _wrap_hk_presentation_set_presentationsize, METH_VARARGS },
	 { (char *)"hk_presentation_designwidth", _wrap_hk_presentation_designwidth, METH_VARARGS },
	 { (char *)"hk_presentation_designheight", _wrap_hk_presentation_designheight, METH_VARARGS },
	 { (char *)"hk_presentation_horizontal2relativ", _wrap_hk_presentation_horizontal2relativ, METH_VARARGS },
	 { (char *)"hk_presentation_vertical2relativ", _wrap_hk_presentation_vertical2relativ, METH_VARARGS },
	 { (char *)"hk_presentation_relativ2horizontal", _wrap_hk_presentation_relativ2horizontal, METH_VARARGS },
	 { (char *)"hk_presentation_relativ2vertical", _wrap_hk_presentation_relativ2vertical, METH_VARARGS },
	 { (char *)"hk_presentation_register_object", _wrap_hk_presentation_register_object, METH_VARARGS },
	 { (char *)"hk_presentation_set_automatic_enable_datasources", _wrap_hk_presentation_set_automatic_enable_datasources, METH_VARARGS },
	 { (char *)"hk_presentation_automatic_enable_datasources", _wrap_hk_presentation_automatic_enable_datasources, METH_VARARGS },
	 { (char *)"hk_presentation_bulk_operation", _wrap_hk_presentation_bulk_operation, METH_VARARGS },
	 { (char *)"hk_presentation_set_sizetype", _wrap_hk_presentation_set_sizetype, METH_VARARGS },
	 { (char *)"hk_presentation_sizetype", _wrap_hk_presentation_sizetype, METH_VARARGS },
	 { (char *)"hk_presentation_set_defaultsizetype", _wrap_hk_presentation_set_defaultsizetype, METH_VARARGS },
	 { (char *)"hk_presentation_defaultsizetype", _wrap_hk_presentation_defaultsizetype, METH_VARARGS },
	 { (char *)"hk_presentation_set_snap2gridx", _wrap_hk_presentation_set_snap2gridx, METH_VARARGS },
	 { (char *)"hk_presentation_snap2gridx", _wrap_hk_presentation_snap2gridx, METH_VARARGS },
	 { (char *)"hk_presentation_set_snap2gridy", _wrap_hk_presentation_set_snap2gridy, METH_VARARGS },
	 { (char *)"hk_presentation_snap2gridy", _wrap_hk_presentation_snap2gridy, METH_VARARGS },
	 { (char *)"hk_presentation_interpreter", _wrap_hk_presentation_interpreter, METH_VARARGS },
	 { (char *)"hk_presentation_script_error", _wrap_hk_presentation_script_error, METH_VARARGS },
	 { (char *)"hk_presentation_set_interpretername", _wrap_hk_presentation_set_interpretername, METH_VARARGS },
	 { (char *)"hk_presentation_interpretername", _wrap_hk_presentation_interpretername, METH_VARARGS },
	 { (char *)"hk_presentation_enable_datasources", _wrap_hk_presentation_enable_datasources, METH_VARARGS },
	 { (char *)"hk_presentation_is_subpresentation", _wrap_hk_presentation_is_subpresentation, METH_VARARGS },
	 { (char *)"hk_presentation_while_loading", _wrap_hk_presentation_while_loading, METH_VARARGS },
	 { (char *)"hk_presentation_intervaltasks", _wrap_hk_presentation_intervaltasks, METH_VARARGS },
	 { (char *)"hk_presentation_load_module", _wrap_hk_presentation_load_module, METH_VARARGS },
	 { (char *)"hk_presentation_swigregister", hk_presentation_swigregister, METH_VARARGS },
	 { (char *)"new_hk_button", _wrap_new_hk_button, METH_VARARGS },
	 { (char *)"delete_hk_button", _wrap_delete_hk_button, METH_VARARGS },
	 { (char *)"hk_button_set_action", _wrap_hk_button_set_action, METH_VARARGS },
	 { (char *)"hk_button_push_action", _wrap_hk_button_push_action, METH_VARARGS },
	 { (char *)"hk_button_object", _wrap_hk_button_object, METH_VARARGS },
	 { (char *)"hk_button_action", _wrap_hk_button_action, METH_VARARGS },
	 { (char *)"hk_button_show_maximized", _wrap_hk_button_show_maximized, METH_VARARGS },
	 { (char *)"hk_button_set_database", _wrap_hk_button_set_database, METH_VARARGS },
	 { (char *)"hk_button_database", _wrap_hk_button_database, METH_VARARGS },
	 { (char *)"hk_button_show_icon", _wrap_hk_button_show_icon, METH_VARARGS },
	 { (char *)"hk_button_set_is_togglebutton", _wrap_hk_button_set_is_togglebutton, METH_VARARGS },
	 { (char *)"hk_button_is_togglebutton", _wrap_hk_button_is_togglebutton, METH_VARARGS },
	 { (char *)"hk_button_is_pushed", _wrap_hk_button_is_pushed, METH_VARARGS },
	 { (char *)"hk_button_set_is_pushed", _wrap_hk_button_set_is_pushed, METH_VARARGS },
	 { (char *)"hk_button_swigregister", hk_button_swigregister, METH_VARARGS },
	 { (char *)"currentbutton", _wrap_currentbutton, METH_VARARGS },
	 { (char *)"new_hk_form", _wrap_new_hk_form, METH_VARARGS },
	 { (char *)"delete_hk_form", _wrap_delete_hk_form, METH_VARARGS },
	 { (char *)"hk_form_new_grid", _wrap_hk_form_new_grid, METH_VARARGS },
	 { (char *)"hk_form_new_lineedit", _wrap_hk_form_new_lineedit, METH_VARARGS },
	 { (char *)"hk_form_new_bool", _wrap_hk_form_new_bool, METH_VARARGS },
	 { (char *)"hk_form_new_combobox", _wrap_hk_form_new_combobox, METH_VARARGS },
	 { (char *)"hk_form_new_button", _wrap_hk_form_new_button, METH_VARARGS },
	 { (char *)"hk_form_new_rowselector", _wrap_hk_form_new_rowselector, METH_VARARGS },
	 { (char *)"hk_form_new_memo", _wrap_hk_form_new_memo, METH_VARARGS },
	 { (char *)"hk_form_new_label", _wrap_hk_form_new_label, METH_VARARGS },
	 { (char *)"hk_form_new_subform", _wrap_hk_form_new_subform, METH_VARARGS },
	 { (char *)"hk_form_new_date", _wrap_hk_form_new_date, METH_VARARGS },
	 { (char *)"hk_form_new_image", _wrap_hk_form_new_image, METH_VARARGS },
	 { (char *)"hk_form_new_tabvisible", _wrap_hk_form_new_tabvisible, METH_VARARGS },
	 { (char *)"hk_form_save_form", _wrap_hk_form_save_form, METH_VARARGS },
	 { (char *)"hk_form_load_form", _wrap_hk_form_load_form, METH_VARARGS },
	 { (char *)"hk_form_savedata", _wrap_hk_form_savedata, METH_VARARGS },
	 { (char *)"hk_form_loaddata", _wrap_hk_form_loaddata, METH_VARARGS },
	 { (char *)"hk_form_set_designsize", _wrap_hk_form_set_designsize, METH_VARARGS },
	 { (char *)"hk_form_get_visible", _wrap_hk_form_get_visible, METH_VARARGS },
	 { (char *)"hk_form_bulk_operation", _wrap_hk_form_bulk_operation, METH_VARARGS },
	 { (char *)"hk_form_set_mode", _wrap_hk_form_set_mode, METH_VARARGS },
	 { (char *)"hk_form_masterform", _wrap_hk_form_masterform, METH_VARARGS },
	 { (char *)"hk_form_clear_visiblelist", _wrap_hk_form_clear_visiblelist, METH_VARARGS },
	 { (char *)"hk_form_set_taborder", _wrap_hk_form_set_taborder, METH_VARARGS },
	 { (char *)"hk_form_taborder", _wrap_hk_form_taborder, METH_VARARGS },
	 { (char *)"hk_form_taborder_previous", _wrap_hk_form_taborder_previous, METH_VARARGS },
	 { (char *)"hk_form_taborder_next", _wrap_hk_form_taborder_next, METH_VARARGS },
	 { (char *)"hk_form_first_tabobject", _wrap_hk_form_first_tabobject, METH_VARARGS },
	 { (char *)"hk_form_last_tabobject", _wrap_hk_form_last_tabobject, METH_VARARGS },
	 { (char *)"hk_form_goto_taborder_next", _wrap_hk_form_goto_taborder_next, METH_VARARGS },
	 { (char *)"hk_form_goto_taborder_previous", _wrap_hk_form_goto_taborder_previous, METH_VARARGS },
	 { (char *)"hk_form_goto_taborder_first", _wrap_hk_form_goto_taborder_first, METH_VARARGS },
	 { (char *)"hk_form_goto_taborder_last", _wrap_hk_form_goto_taborder_last, METH_VARARGS },
	 { (char *)"hk_form_set_focus", _wrap_hk_form_set_focus, METH_VARARGS },
	 { (char *)"hk_form_visibles", _wrap_hk_form_visibles, METH_VARARGS },
	 { (char *)"hk_form_is_subform", _wrap_hk_form_is_subform, METH_VARARGS },
	 { (char *)"hk_form_is_subpresentation", _wrap_hk_form_is_subpresentation, METH_VARARGS },
	 { (char *)"hk_form_show_asdialog", _wrap_hk_form_show_asdialog, METH_VARARGS },
	 { (char *)"hk_form_screen_width", _wrap_hk_form_screen_width, METH_VARARGS },
	 { (char *)"hk_form_screen_height", _wrap_hk_form_screen_height, METH_VARARGS },
	 { (char *)"hk_form_while_load_form", _wrap_hk_form_while_load_form, METH_VARARGS },
	 { (char *)"hk_form_while_loading", _wrap_hk_form_while_loading, METH_VARARGS },
	 { (char *)"hk_form_form2html", _wrap_hk_form_form2html, METH_VARARGS },
	 { (char *)"hk_form_get_pyvisible", _wrap_hk_form_get_pyvisible, METH_VARARGS },
	 { (char *)"hk_form_swigregister", hk_form_swigregister, METH_VARARGS },
	 { (char *)"currentform", _wrap_currentform, METH_VARARGS },
	 { (char *)"new_hk_label", _wrap_new_hk_label, METH_VARARGS },
	 { (char *)"delete_hk_label", _wrap_delete_hk_label, METH_VARARGS },
	 { (char *)"hk_label_set_topline", _wrap_hk_label_set_topline, METH_VARARGS },
	 { (char *)"hk_label_set_bottomline", _wrap_hk_label_set_bottomline, METH_VARARGS },
	 { (char *)"hk_label_set_leftline", _wrap_hk_label_set_leftline, METH_VARARGS },
	 { (char *)"hk_label_set_rightline", _wrap_hk_label_set_rightline, METH_VARARGS },
	 { (char *)"hk_label_set_diagonalluro", _wrap_hk_label_set_diagonalluro, METH_VARARGS },
	 { (char *)"hk_label_set_diagonalloru", _wrap_hk_label_set_diagonalloru, METH_VARARGS },
	 { (char *)"hk_label_diagonalloru", _wrap_hk_label_diagonalloru, METH_VARARGS },
	 { (char *)"hk_label_topline", _wrap_hk_label_topline, METH_VARARGS },
	 { (char *)"hk_label_bottomline", _wrap_hk_label_bottomline, METH_VARARGS },
	 { (char *)"hk_label_leftline", _wrap_hk_label_leftline, METH_VARARGS },
	 { (char *)"hk_label_rightline", _wrap_hk_label_rightline, METH_VARARGS },
	 { (char *)"hk_label_diagonalluro", _wrap_hk_label_diagonalluro, METH_VARARGS },
	 { (char *)"hk_label_set_frame", _wrap_hk_label_set_frame, METH_VARARGS },
	 { (char *)"hk_label_swigregister", hk_label_swigregister, METH_VARARGS },
	 { (char *)"new_hk_report", _wrap_new_hk_report, METH_VARARGS },
	 { (char *)"delete_hk_report", _wrap_delete_hk_report, METH_VARARGS },
	 { (char *)"hk_report_set_filename", _wrap_hk_report_set_filename, METH_VARARGS },
	 { (char *)"hk_report_filename", _wrap_hk_report_filename, METH_VARARGS },
	 { (char *)"hk_report_set_use_standard_storagepath", _wrap_hk_report_set_use_standard_storagepath, METH_VARARGS },
	 { (char *)"hk_report_use_standard_storagepath", _wrap_hk_report_use_standard_storagepath, METH_VARARGS },
	 { (char *)"hk_report_outputfile", _wrap_hk_report_outputfile, METH_VARARGS },
	 { (char *)"hk_report_set_begin", _wrap_hk_report_set_begin, METH_VARARGS },
	 { (char *)"hk_report_begin", _wrap_hk_report_begin, METH_VARARGS },
	 { (char *)"hk_report_set_end", _wrap_hk_report_set_end, METH_VARARGS },
	 { (char *)"hk_report_end", _wrap_hk_report_end, METH_VARARGS },
	 { (char *)"hk_report_page_header", _wrap_hk_report_page_header, METH_VARARGS },
	 { (char *)"hk_report_page_footer", _wrap_hk_report_page_footer, METH_VARARGS },
	 { (char *)"hk_report_report_header", _wrap_hk_report_report_header, METH_VARARGS },
	 { (char *)"hk_report_report_footer", _wrap_hk_report_report_footer, METH_VARARGS },
	 { (char *)"hk_report_datasection", _wrap_hk_report_datasection, METH_VARARGS },
	 { (char *)"hk_report_new_sectionpair", _wrap_hk_report_new_sectionpair, METH_VARARGS },
	 { (char *)"hk_report_new_sectionpair_at", _wrap_hk_report_new_sectionpair_at, METH_VARARGS },
	 { (char *)"hk_report_move_sectionpair", _wrap_hk_report_move_sectionpair, METH_VARARGS },
	 { (char *)"hk_report_execute", _wrap_hk_report_execute, METH_VARARGS },
	 { (char *)"hk_report_while_executing", _wrap_hk_report_while_executing, METH_VARARGS },
	 { (char *)"hk_report_while_load_report", _wrap_hk_report_while_load_report, METH_VARARGS },
	 { (char *)"hk_report_while_loading", _wrap_hk_report_while_loading, METH_VARARGS },
	 { (char *)"hk_report_set_mode", _wrap_hk_report_set_mode, METH_VARARGS },
	 { (char *)"hk_report_set_recodefunction", _wrap_hk_report_set_recodefunction, METH_VARARGS },
	 { (char *)"hk_report_recodefunction", _wrap_hk_report_recodefunction, METH_VARARGS },
	 { (char *)"hk_report_recodefunctionstring", _wrap_hk_report_recodefunctionstring, METH_VARARGS },
	 { (char *)"hk_report_add_recodetype", _wrap_hk_report_add_recodetype, METH_VARARGS },
	 { (char *)"hk_report_recodelist", _wrap_hk_report_recodelist, METH_VARARGS },
	 { (char *)"hk_report_new_page", _wrap_hk_report_new_page, METH_VARARGS },
	 { (char *)"hk_report_set_pagedelimiter", _wrap_hk_report_set_pagedelimiter, METH_VARARGS },
	 { (char *)"hk_report_pagedelimiter", _wrap_hk_report_pagedelimiter, METH_VARARGS },
	 { (char *)"hk_report_sectionpairs", _wrap_hk_report_sectionpairs, METH_VARARGS },
	 { (char *)"hk_report_set_multiplefiles", _wrap_hk_report_set_multiplefiles, METH_VARARGS },
	 { (char *)"hk_report_multiplefiles", _wrap_hk_report_multiplefiles, METH_VARARGS },
	 { (char *)"hk_report_set_fileextension", _wrap_hk_report_set_fileextension, METH_VARARGS },
	 { (char *)"hk_report_fileextension", _wrap_hk_report_fileextension, METH_VARARGS },
	 { (char *)"hk_report_set_firstpagenumber", _wrap_hk_report_set_firstpagenumber, METH_VARARGS },
	 { (char *)"hk_report_firstpagenumber", _wrap_hk_report_firstpagenumber, METH_VARARGS },
	 { (char *)"hk_report_set_pagenamecolumn", _wrap_hk_report_set_pagenamecolumn, METH_VARARGS },
	 { (char *)"hk_report_pagenamecolumn", _wrap_hk_report_pagenamecolumn, METH_VARARGS },
	 { (char *)"hk_report_set_filebegin", _wrap_hk_report_set_filebegin, METH_VARARGS },
	 { (char *)"hk_report_filebegin", _wrap_hk_report_filebegin, METH_VARARGS },
	 { (char *)"hk_report_set_fileend", _wrap_hk_report_set_fileend, METH_VARARGS },
	 { (char *)"hk_report_fileend", _wrap_hk_report_fileend, METH_VARARGS },
	 { (char *)"hk_report_set_periodic", _wrap_hk_report_set_periodic, METH_VARARGS },
	 { (char *)"hk_report_periodic_when", _wrap_hk_report_periodic_when, METH_VARARGS },
	 { (char *)"hk_report_periodic_what", _wrap_hk_report_periodic_what, METH_VARARGS },
	 { (char *)"hk_report_periodic_newpage", _wrap_hk_report_periodic_newpage, METH_VARARGS },
	 { (char *)"hk_report_outputstream", _wrap_hk_report_outputstream, METH_VARARGS },
	 { (char *)"hk_report_set_masterreport", _wrap_hk_report_set_masterreport, METH_VARARGS },
	 { (char *)"hk_report_masterreport", _wrap_hk_report_masterreport, METH_VARARGS },
	 { (char *)"hk_report_is_subreport", _wrap_hk_report_is_subreport, METH_VARARGS },
	 { (char *)"hk_report_is_subpresentation", _wrap_hk_report_is_subpresentation, METH_VARARGS },
	 { (char *)"hk_report_rowcount", _wrap_hk_report_rowcount, METH_VARARGS },
	 { (char *)"hk_report_current_rowcount", _wrap_hk_report_current_rowcount, METH_VARARGS },
	 { (char *)"hk_report_font", _wrap_hk_report_font, METH_VARARGS },
	 { (char *)"hk_report_pagenumber", _wrap_hk_report_pagenumber, METH_VARARGS },
	 { (char *)"hk_report_absolutepagenumber", _wrap_hk_report_absolutepagenumber, METH_VARARGS },
	 { (char *)"hk_report_rownumber", _wrap_hk_report_rownumber, METH_VARARGS },
	 { (char *)"hk_report_set_presentationdatasource", _wrap_hk_report_set_presentationdatasource, METH_VARARGS },
	 { (char *)"hk_report_save_report", _wrap_hk_report_save_report, METH_VARARGS },
	 { (char *)"hk_report_load_report", _wrap_hk_report_load_report, METH_VARARGS },
	 { (char *)"hk_report_savedata", _wrap_hk_report_savedata, METH_VARARGS },
	 { (char *)"hk_report_loaddata", _wrap_hk_report_loaddata, METH_VARARGS },
	 { (char *)"hk_report_default_reportdata", _wrap_hk_report_default_reportdata, METH_VARARGS },
	 { (char *)"hk_report_set_default_reportdata", _wrap_hk_report_set_default_reportdata, METH_VARARGS },
	 { (char *)"hk_report_default_beforereportdata", _wrap_hk_report_default_beforereportdata, METH_VARARGS },
	 { (char *)"hk_report_set_default_beforereportdata", _wrap_hk_report_set_default_beforereportdata, METH_VARARGS },
	 { (char *)"hk_report_default_afterreportdata", _wrap_hk_report_default_afterreportdata, METH_VARARGS },
	 { (char *)"hk_report_set_default_afterreportdata", _wrap_hk_report_set_default_afterreportdata, METH_VARARGS },
	 { (char *)"hk_report_default_reportprecision", _wrap_hk_report_default_reportprecision, METH_VARARGS },
	 { (char *)"hk_report_set_default_reportprecision", _wrap_hk_report_set_default_reportprecision, METH_VARARGS },
	 { (char *)"hk_report_default_use_reportseparator", _wrap_hk_report_default_use_reportseparator, METH_VARARGS },
	 { (char *)"hk_report_set_default_use_reportseparator", _wrap_hk_report_set_default_use_reportseparator, METH_VARARGS },
	 { (char *)"hk_report_set_default_reportdataconfigurefunction", _wrap_hk_report_set_default_reportdataconfigurefunction, METH_VARARGS },
	 { (char *)"hk_report_default_reportdataconfigurefunction", _wrap_hk_report_default_reportdataconfigurefunction, METH_VARARGS },
	 { (char *)"hk_report_set_default_reportsectionbegin", _wrap_hk_report_set_default_reportsectionbegin, METH_VARARGS },
	 { (char *)"hk_report_default_reportsectionbegin", _wrap_hk_report_default_reportsectionbegin, METH_VARARGS },
	 { (char *)"hk_report_set_default_reportsectionend", _wrap_hk_report_set_default_reportsectionend, METH_VARARGS },
	 { (char *)"hk_report_default_reportsectionend", _wrap_hk_report_default_reportsectionend, METH_VARARGS },
	 { (char *)"hk_report_set_default_reportsectionbetweendata", _wrap_hk_report_set_default_reportsectionbetweendata, METH_VARARGS },
	 { (char *)"hk_report_default_reportsectionbetweendata", _wrap_hk_report_default_reportsectionbetweendata, METH_VARARGS },
	 { (char *)"hk_report_set_default_reportsectioncountfunction", _wrap_hk_report_set_default_reportsectioncountfunction, METH_VARARGS },
	 { (char *)"hk_report_default_reportsectioncountfunction", _wrap_hk_report_default_reportsectioncountfunction, METH_VARARGS },
	 { (char *)"hk_report_set_topline", _wrap_hk_report_set_topline, METH_VARARGS },
	 { (char *)"hk_report_topline", _wrap_hk_report_topline, METH_VARARGS },
	 { (char *)"hk_report_set_bottomline", _wrap_hk_report_set_bottomline, METH_VARARGS },
	 { (char *)"hk_report_bottomline", _wrap_hk_report_bottomline, METH_VARARGS },
	 { (char *)"hk_report_set_leftline", _wrap_hk_report_set_leftline, METH_VARARGS },
	 { (char *)"hk_report_leftline", _wrap_hk_report_leftline, METH_VARARGS },
	 { (char *)"hk_report_set_rightline", _wrap_hk_report_set_rightline, METH_VARARGS },
	 { (char *)"hk_report_rightline", _wrap_hk_report_rightline, METH_VARARGS },
	 { (char *)"hk_report_set_diagonalluro", _wrap_hk_report_set_diagonalluro, METH_VARARGS },
	 { (char *)"hk_report_diagonalluro", _wrap_hk_report_diagonalluro, METH_VARARGS },
	 { (char *)"hk_report_set_diagonalloru", _wrap_hk_report_set_diagonalloru, METH_VARARGS },
	 { (char *)"hk_report_diagonalloru", _wrap_hk_report_diagonalloru, METH_VARARGS },
	 { (char *)"hk_report_set_frame", _wrap_hk_report_set_frame, METH_VARARGS },
	 { (char *)"hk_report_set_borders", _wrap_hk_report_set_borders, METH_VARARGS },
	 { (char *)"hk_report_border_left", _wrap_hk_report_border_left, METH_VARARGS },
	 { (char *)"hk_report_border_right", _wrap_hk_report_border_right, METH_VARARGS },
	 { (char *)"hk_report_border_top", _wrap_hk_report_border_top, METH_VARARGS },
	 { (char *)"hk_report_border_bottom", _wrap_hk_report_border_bottom, METH_VARARGS },
	 { (char *)"hk_report_set_orientation", _wrap_hk_report_set_orientation, METH_VARARGS },
	 { (char *)"hk_report_orientation", _wrap_hk_report_orientation, METH_VARARGS },
	 { (char *)"hk_report_set_pageformat", _wrap_hk_report_set_pageformat, METH_VARARGS },
	 { (char *)"hk_report_pageformat", _wrap_hk_report_pageformat, METH_VARARGS },
	 { (char *)"hk_report_formatwidth", _wrap_hk_report_formatwidth, METH_VARARGS },
	 { (char *)"hk_report_formatheight", _wrap_hk_report_formatheight, METH_VARARGS },
	 { (char *)"hk_report_set_reportconfigurefunction", _wrap_hk_report_set_reportconfigurefunction, METH_VARARGS },
	 { (char *)"hk_report_set_reporttype", _wrap_hk_report_set_reporttype, METH_VARARGS },
	 { (char *)"hk_report_reporttype", _wrap_hk_report_reporttype, METH_VARARGS },
	 { (char *)"hk_report_add_reporttype", _wrap_hk_report_add_reporttype, METH_VARARGS },
	 { (char *)"hk_report_reporttypelist", _wrap_hk_report_reporttypelist, METH_VARARGS },
	 { (char *)"hk_report_configure_page", _wrap_hk_report_configure_page, METH_VARARGS },
	 { (char *)"hk_report_neutralize_definition", _wrap_hk_report_neutralize_definition, METH_VARARGS },
	 { (char *)"hk_report_init_report", _wrap_hk_report_init_report, METH_VARARGS },
	 { (char *)"hk_report_add_configurefunctiontype", _wrap_hk_report_add_configurefunctiontype, METH_VARARGS },
	 { (char *)"hk_report_configurefunctionlist", _wrap_hk_report_configurefunctionlist, METH_VARARGS },
	 { (char *)"hk_report_remove_sectionpair", _wrap_hk_report_remove_sectionpair, METH_VARARGS },
	 { (char *)"hk_report_neededfonts", _wrap_hk_report_neededfonts, METH_VARARGS },
	 { (char *)"hk_report_usedfonts", _wrap_hk_report_usedfonts, METH_VARARGS },
	 { (char *)"hk_report_usedpsfonts", _wrap_hk_report_usedpsfonts, METH_VARARGS },
	 { (char *)"hk_report_set_printcommand", _wrap_hk_report_set_printcommand, METH_VARARGS },
	 { (char *)"hk_report_printcommand", _wrap_hk_report_printcommand, METH_VARARGS },
	 { (char *)"hk_report_print_report", _wrap_hk_report_print_report, METH_VARARGS },
	 { (char *)"hk_report_designwidth", _wrap_hk_report_designwidth, METH_VARARGS },
	 { (char *)"hk_report_designheight", _wrap_hk_report_designheight, METH_VARARGS },
	 { (char *)"hk_report_horizontal2relativ", _wrap_hk_report_horizontal2relativ, METH_VARARGS },
	 { (char *)"hk_report_vertical2relativ", _wrap_hk_report_vertical2relativ, METH_VARARGS },
	 { (char *)"hk_report_relativ2horizontal", _wrap_hk_report_relativ2horizontal, METH_VARARGS },
	 { (char *)"hk_report_relativ2vertical", _wrap_hk_report_relativ2vertical, METH_VARARGS },
	 { (char *)"hk_report_bulk_operation", _wrap_hk_report_bulk_operation, METH_VARARGS },
	 { (char *)"hk_report_setup_reportbasics", _wrap_hk_report_setup_reportbasics, METH_VARARGS },
	 { (char *)"hk_report_get_reportdatavisible", _wrap_hk_report_get_reportdatavisible, METH_VARARGS },
	 { (char *)"hk_report_set_on_new_page_action", _wrap_hk_report_set_on_new_page_action, METH_VARARGS },
	 { (char *)"hk_report_on_new_page_action", _wrap_hk_report_on_new_page_action, METH_VARARGS },
	 { (char *)"hk_report_stop_execution", _wrap_hk_report_stop_execution, METH_VARARGS },
	 { (char *)"hk_report_execution_stopped", _wrap_hk_report_execution_stopped, METH_VARARGS },
	 { (char *)"hk_report_filelocale", _wrap_hk_report_filelocale, METH_VARARGS },
	 { (char *)"hk_report_filecharset", _wrap_hk_report_filecharset, METH_VARARGS },
	 { (char *)"hk_report_set_filelocale", _wrap_hk_report_set_filelocale, METH_VARARGS },
	 { (char *)"hk_report_set_filecharset", _wrap_hk_report_set_filecharset, METH_VARARGS },
	 { (char *)"hk_report_set_useencodingtab", _wrap_hk_report_set_useencodingtab, METH_VARARGS },
	 { (char *)"hk_report_useencodingtab", _wrap_hk_report_useencodingtab, METH_VARARGS },
	 { (char *)"hk_report_encodingtab", _wrap_hk_report_encodingtab, METH_VARARGS },
	 { (char *)"hk_report_set_print_full_pages_only", _wrap_hk_report_set_print_full_pages_only, METH_VARARGS },
	 { (char *)"hk_report_print_full_pages_only", _wrap_hk_report_print_full_pages_only, METH_VARARGS },
	 { (char *)"hk_report_set_fullpagereplacefunction", _wrap_hk_report_set_fullpagereplacefunction, METH_VARARGS },
	 { (char *)"hk_report_fullpagereplacefunction", _wrap_hk_report_fullpagereplacefunction, METH_VARARGS },
	 { (char *)"hk_report_fullpagereplacefunctionstring", _wrap_hk_report_fullpagereplacefunctionstring, METH_VARARGS },
	 { (char *)"hk_report_add_fullpagereplacefunctiontype", _wrap_hk_report_add_fullpagereplacefunctiontype, METH_VARARGS },
	 { (char *)"hk_report_fullpagereplacefunctionlist", _wrap_hk_report_fullpagereplacefunctionlist, METH_VARARGS },
	 { (char *)"hk_report_set_embedfonts", _wrap_hk_report_set_embedfonts, METH_VARARGS },
	 { (char *)"hk_report_embedfonts", _wrap_hk_report_embedfonts, METH_VARARGS },
	 { (char *)"hk_report_tag_value", _wrap_hk_report_tag_value, METH_VARARGS },
	 { (char *)"hk_report_swigregister", hk_report_swigregister, METH_VARARGS },
	 { (char *)"currentreport", _wrap_currentreport, METH_VARARGS },
	 { (char *)"struct_countnumbers_sum_set", _wrap_struct_countnumbers_sum_set, METH_VARARGS },
	 { (char *)"struct_countnumbers_sum_get", _wrap_struct_countnumbers_sum_get, METH_VARARGS },
	 { (char *)"struct_countnumbers_min_set", _wrap_struct_countnumbers_min_set, METH_VARARGS },
	 { (char *)"struct_countnumbers_min_get", _wrap_struct_countnumbers_min_get, METH_VARARGS },
	 { (char *)"struct_countnumbers_max_set", _wrap_struct_countnumbers_max_set, METH_VARARGS },
	 { (char *)"struct_countnumbers_max_get", _wrap_struct_countnumbers_max_get, METH_VARARGS },
	 { (char *)"struct_countnumbers_value_set", _wrap_struct_countnumbers_value_set, METH_VARARGS },
	 { (char *)"struct_countnumbers_value_get", _wrap_struct_countnumbers_value_get, METH_VARARGS },
	 { (char *)"struct_countnumbers_count_set", _wrap_struct_countnumbers_count_set, METH_VARARGS },
	 { (char *)"struct_countnumbers_count_get", _wrap_struct_countnumbers_count_get, METH_VARARGS },
	 { (char *)"struct_countnumbers_squaresum_set", _wrap_struct_countnumbers_squaresum_set, METH_VARARGS },
	 { (char *)"struct_countnumbers_squaresum_get", _wrap_struct_countnumbers_squaresum_get, METH_VARARGS },
	 { (char *)"struct_countnumbers_colname_set", _wrap_struct_countnumbers_colname_set, METH_VARARGS },
	 { (char *)"struct_countnumbers_colname_get", _wrap_struct_countnumbers_colname_get, METH_VARARGS },
	 { (char *)"new_struct_countnumbers", _wrap_new_struct_countnumbers, METH_VARARGS },
	 { (char *)"delete_struct_countnumbers", _wrap_delete_struct_countnumbers, METH_VARARGS },
	 { (char *)"struct_countnumbers_swigregister", struct_countnumbers_swigregister, METH_VARARGS },
	 { (char *)"hk_reportsection_set_unique", _wrap_hk_reportsection_set_unique, METH_VARARGS },
	 { (char *)"hk_reportsection_unique", _wrap_hk_reportsection_unique, METH_VARARGS },
	 { (char *)"hk_reportsection_new_data", _wrap_hk_reportsection_new_data, METH_VARARGS },
	 { (char *)"hk_reportsection_data_at", _wrap_hk_reportsection_data_at, METH_VARARGS },
	 { (char *)"hk_reportsection_datalist", _wrap_hk_reportsection_datalist, METH_VARARGS },
	 { (char *)"hk_reportsection_actual_string", _wrap_hk_reportsection_actual_string, METH_VARARGS },
	 { (char *)"hk_reportsection_sectionbegin", _wrap_hk_reportsection_sectionbegin, METH_VARARGS },
	 { (char *)"hk_reportsection_set_sectionbegin", _wrap_hk_reportsection_set_sectionbegin, METH_VARARGS },
	 { (char *)"hk_reportsection_sectionend", _wrap_hk_reportsection_sectionend, METH_VARARGS },
	 { (char *)"hk_reportsection_set_sectionend", _wrap_hk_reportsection_set_sectionend, METH_VARARGS },
	 { (char *)"hk_reportsection_betweendata", _wrap_hk_reportsection_betweendata, METH_VARARGS },
	 { (char *)"hk_reportsection_set_betweendata", _wrap_hk_reportsection_set_betweendata, METH_VARARGS },
	 { (char *)"hk_reportsection_new_uniquevalue", _wrap_hk_reportsection_new_uniquevalue, METH_VARARGS },
	 { (char *)"hk_reportsection_endsection", _wrap_hk_reportsection_endsection, METH_VARARGS },
	 { (char *)"hk_reportsection_set_automatic_create_data", _wrap_hk_reportsection_set_automatic_create_data, METH_VARARGS },
	 { (char *)"hk_reportsection_new_page_after_section", _wrap_hk_reportsection_new_page_after_section, METH_VARARGS },
	 { (char *)"hk_reportsection_set_new_page_after_section", _wrap_hk_reportsection_set_new_page_after_section, METH_VARARGS },
	 { (char *)"hk_reportsection_section_was_printed", _wrap_hk_reportsection_section_was_printed, METH_VARARGS },
	 { (char *)"hk_reportsection_set_subreport", _wrap_hk_reportsection_set_subreport, METH_VARARGS },
	 { (char *)"hk_reportsection_subreportname", _wrap_hk_reportsection_subreportname, METH_VARARGS },
	 { (char *)"hk_reportsection_subreport", _wrap_hk_reportsection_subreport, METH_VARARGS },
	 { (char *)"hk_reportsection_add_depending_fields", _wrap_hk_reportsection_add_depending_fields, METH_VARARGS },
	 { (char *)"hk_reportsection_clear_depending_fields", _wrap_hk_reportsection_clear_depending_fields, METH_VARARGS },
	 { (char *)"hk_reportsection_depending_on_thisreportfields", _wrap_hk_reportsection_depending_on_thisreportfields, METH_VARARGS },
	 { (char *)"hk_reportsection_depending_on_subreportfields", _wrap_hk_reportsection_depending_on_subreportfields, METH_VARARGS },
	 { (char *)"hk_reportsection_print_subreport_before_data", _wrap_hk_reportsection_print_subreport_before_data, METH_VARARGS },
	 { (char *)"hk_reportsection_print_subreport", _wrap_hk_reportsection_print_subreport, METH_VARARGS },
	 { (char *)"hk_reportsection_set_replacefunction", _wrap_hk_reportsection_set_replacefunction, METH_VARARGS },
	 { (char *)"hk_reportsection_replace", _wrap_hk_reportsection_replace, METH_VARARGS },
	 { (char *)"hk_reportsection_add_sectionreplacefunctiontype", _wrap_hk_reportsection_add_sectionreplacefunctiontype, METH_VARARGS },
	 { (char *)"hk_reportsection_sectionreplacefunctionlist", _wrap_hk_reportsection_sectionreplacefunctionlist, METH_VARARGS },
	 { (char *)"hk_reportsection_reset_count", _wrap_hk_reportsection_reset_count, METH_VARARGS },
	 { (char *)"hk_reportsection_font", _wrap_hk_reportsection_font, METH_VARARGS },
	 { (char *)"hk_reportsection_counts_as", _wrap_hk_reportsection_counts_as, METH_VARARGS },
	 { (char *)"hk_reportsection_add_sectioncountfunctiontype", _wrap_hk_reportsection_add_sectioncountfunctiontype, METH_VARARGS },
	 { (char *)"hk_reportsection_sectioncountfunctionlist", _wrap_hk_reportsection_sectioncountfunctionlist, METH_VARARGS },
	 { (char *)"hk_reportsection_set_sectioncountfunction", _wrap_hk_reportsection_set_sectioncountfunction, METH_VARARGS },
	 { (char *)"hk_reportsection_sectioncountfunctionstring", _wrap_hk_reportsection_sectioncountfunctionstring, METH_VARARGS },
	 { (char *)"hk_reportsection_sectioncountfunction", _wrap_hk_reportsection_sectioncountfunction, METH_VARARGS },
	 { (char *)"hk_reportsection_savedata", _wrap_hk_reportsection_savedata, METH_VARARGS },
	 { (char *)"hk_reportsection_loaddata", _wrap_hk_reportsection_loaddata, METH_VARARGS },
	 { (char *)"hk_reportsection_set_datasource", _wrap_hk_reportsection_set_datasource, METH_VARARGS },
	 { (char *)"hk_reportsection_set_presentationdatasource", _wrap_hk_reportsection_set_presentationdatasource, METH_VARARGS },
	 { (char *)"hk_reportsection_default_reportdata", _wrap_hk_reportsection_default_reportdata, METH_VARARGS },
	 { (char *)"hk_reportsection_set_default_reportdata", _wrap_hk_reportsection_set_default_reportdata, METH_VARARGS },
	 { (char *)"hk_reportsection_default_beforereportdata", _wrap_hk_reportsection_default_beforereportdata, METH_VARARGS },
	 { (char *)"hk_reportsection_set_default_beforereportdata", _wrap_hk_reportsection_set_default_beforereportdata, METH_VARARGS },
	 { (char *)"hk_reportsection_default_afterreportdata", _wrap_hk_reportsection_default_afterreportdata, METH_VARARGS },
	 { (char *)"hk_reportsection_set_default_afterreportdata", _wrap_hk_reportsection_set_default_afterreportdata, METH_VARARGS },
	 { (char *)"hk_reportsection_set_default_reportdataconfigurefunction", _wrap_hk_reportsection_set_default_reportdataconfigurefunction, METH_VARARGS },
	 { (char *)"hk_reportsection_default_reportdataconfigurefunction", _wrap_hk_reportsection_default_reportdataconfigurefunction, METH_VARARGS },
	 { (char *)"hk_reportsection_default_reportprecision", _wrap_hk_reportsection_default_reportprecision, METH_VARARGS },
	 { (char *)"hk_reportsection_set_default_reportprecision", _wrap_hk_reportsection_set_default_reportprecision, METH_VARARGS },
	 { (char *)"hk_reportsection_default_use_reportseparator", _wrap_hk_reportsection_default_use_reportseparator, METH_VARARGS },
	 { (char *)"hk_reportsection_set_default_use_reportseparator", _wrap_hk_reportsection_set_default_use_reportseparator, METH_VARARGS },
	 { (char *)"hk_reportsection_neutralize_definition", _wrap_hk_reportsection_neutralize_definition, METH_VARARGS },
	 { (char *)"hk_reportsection_reset", _wrap_hk_reportsection_reset, METH_VARARGS },
	 { (char *)"hk_reportsection_clear_countingfields", _wrap_hk_reportsection_clear_countingfields, METH_VARARGS },
	 { (char *)"hk_reportsection_remove_data", _wrap_hk_reportsection_remove_data, METH_VARARGS },
	 { (char *)"hk_reportsection_report", _wrap_hk_reportsection_report, METH_VARARGS },
	 { (char *)"hk_reportsection_horizontal2relativ", _wrap_hk_reportsection_horizontal2relativ, METH_VARARGS },
	 { (char *)"hk_reportsection_vertical2relativ", _wrap_hk_reportsection_vertical2relativ, METH_VARARGS },
	 { (char *)"hk_reportsection_relativ2horizontal", _wrap_hk_reportsection_relativ2horizontal, METH_VARARGS },
	 { (char *)"hk_reportsection_relativ2vertical", _wrap_hk_reportsection_relativ2vertical, METH_VARARGS },
	 { (char *)"hk_reportsection_reportsectionpair", _wrap_hk_reportsection_reportsectionpair, METH_VARARGS },
	 { (char *)"hk_reportsection_set_offset", _wrap_hk_reportsection_set_offset, METH_VARARGS },
	 { (char *)"hk_reportsection_offset", _wrap_hk_reportsection_offset, METH_VARARGS },
	 { (char *)"hk_reportsection_bulk_operation", _wrap_hk_reportsection_bulk_operation, METH_VARARGS },
	 { (char *)"hk_reportsection_set_automaticcreatedatafunction", _wrap_hk_reportsection_set_automaticcreatedatafunction, METH_VARARGS },
	 { (char *)"hk_reportsection_automaticcreatedatafunction", _wrap_hk_reportsection_automaticcreatedatafunction, METH_VARARGS },
	 { (char *)"hk_reportsection_get_reportdatavisible", _wrap_hk_reportsection_get_reportdatavisible, METH_VARARGS },
	 { (char *)"hk_reportsection_is_fully_printed", _wrap_hk_reportsection_is_fully_printed, METH_VARARGS },
	 { (char *)"hk_reportsection_set_print_section", _wrap_hk_reportsection_set_print_section, METH_VARARGS },
	 { (char *)"hk_reportsection_print_section", _wrap_hk_reportsection_print_section, METH_VARARGS },
	 { (char *)"hk_reportsection_swigregister", hk_reportsection_swigregister, METH_VARARGS },
	 { (char *)"delete_hk_reportsectionpair", _wrap_delete_hk_reportsectionpair, METH_VARARGS },
	 { (char *)"hk_reportsectionpair_headersection", _wrap_hk_reportsectionpair_headersection, METH_VARARGS },
	 { (char *)"hk_reportsectionpair_footersection", _wrap_hk_reportsectionpair_footersection, METH_VARARGS },
	 { (char *)"hk_reportsectionpair_set_sections", _wrap_hk_reportsectionpair_set_sections, METH_VARARGS },
	 { (char *)"hk_reportsectionpair_init_sections", _wrap_hk_reportsectionpair_init_sections, METH_VARARGS },
	 { (char *)"hk_reportsectionpair_set_columnname", _wrap_hk_reportsectionpair_set_columnname, METH_VARARGS },
	 { (char *)"hk_reportsectionpair_set_ascending_order", _wrap_hk_reportsectionpair_set_ascending_order, METH_VARARGS },
	 { (char *)"hk_reportsectionpair_ascending_order", _wrap_hk_reportsectionpair_ascending_order, METH_VARARGS },
	 { (char *)"hk_reportsectionpair_columnname", _wrap_hk_reportsectionpair_columnname, METH_VARARGS },
	 { (char *)"hk_reportsectionpair_reset", _wrap_hk_reportsectionpair_reset, METH_VARARGS },
	 { (char *)"hk_reportsectionpair_clear_countingfields", _wrap_hk_reportsectionpair_clear_countingfields, METH_VARARGS },
	 { (char *)"hk_reportsectionpair_savedata", _wrap_hk_reportsectionpair_savedata, METH_VARARGS },
	 { (char *)"hk_reportsectionpair_loaddata", _wrap_hk_reportsectionpair_loaddata, METH_VARARGS },
	 { (char *)"hk_reportsectionpair_set_presentationdatasource", _wrap_hk_reportsectionpair_set_presentationdatasource, METH_VARARGS },
	 { (char *)"hk_reportsectionpair_presentationdatasource", _wrap_hk_reportsectionpair_presentationdatasource, METH_VARARGS },
	 { (char *)"hk_reportsectionpair_neutralize_definition", _wrap_hk_reportsectionpair_neutralize_definition, METH_VARARGS },
	 { (char *)"hk_reportsectionpair_bulk_operation", _wrap_hk_reportsectionpair_bulk_operation, METH_VARARGS },
	 { (char *)"hk_reportsectionpair_swigregister", hk_reportsectionpair_swigregister, METH_VARARGS },
	 { (char *)"hk_reportdata_set_data", _wrap_hk_reportdata_set_data, METH_VARARGS },
	 { (char *)"hk_reportdata_data", _wrap_hk_reportdata_data, METH_VARARGS },
	 { (char *)"hk_reportdata_set_beforedata", _wrap_hk_reportdata_set_beforedata, METH_VARARGS },
	 { (char *)"hk_reportdata_set_afterdata", _wrap_hk_reportdata_set_afterdata, METH_VARARGS },
	 { (char *)"hk_reportdata_beforedata", _wrap_hk_reportdata_beforedata, METH_VARARGS },
	 { (char *)"hk_reportdata_afterdata", _wrap_hk_reportdata_afterdata, METH_VARARGS },
	 { (char *)"hk_reportdata_actual_string", _wrap_hk_reportdata_actual_string, METH_VARARGS },
	 { (char *)"hk_reportdata_count", _wrap_hk_reportdata_count, METH_VARARGS },
	 { (char *)"hk_reportdata_set_runningcount", _wrap_hk_reportdata_set_runningcount, METH_VARARGS },
	 { (char *)"hk_reportdata_runningcount", _wrap_hk_reportdata_runningcount, METH_VARARGS },
	 { (char *)"hk_reportdata_font", _wrap_hk_reportdata_font, METH_VARARGS },
	 { (char *)"hk_reportdata_set_datacountfunction", _wrap_hk_reportdata_set_datacountfunction, METH_VARARGS },
	 { (char *)"hk_reportdata_datacountfunctionstring", _wrap_hk_reportdata_datacountfunctionstring, METH_VARARGS },
	 { (char *)"hk_reportdata_datacountfunction", _wrap_hk_reportdata_datacountfunction, METH_VARARGS },
	 { (char *)"hk_reportdata_set_topline", _wrap_hk_reportdata_set_topline, METH_VARARGS },
	 { (char *)"hk_reportdata_set_bottomline", _wrap_hk_reportdata_set_bottomline, METH_VARARGS },
	 { (char *)"hk_reportdata_set_leftline", _wrap_hk_reportdata_set_leftline, METH_VARARGS },
	 { (char *)"hk_reportdata_set_rightline", _wrap_hk_reportdata_set_rightline, METH_VARARGS },
	 { (char *)"hk_reportdata_set_diagonalluro", _wrap_hk_reportdata_set_diagonalluro, METH_VARARGS },
	 { (char *)"hk_reportdata_set_diagonalloru", _wrap_hk_reportdata_set_diagonalloru, METH_VARARGS },
	 { (char *)"hk_reportdata_diagonalloru", _wrap_hk_reportdata_diagonalloru, METH_VARARGS },
	 { (char *)"hk_reportdata_topline", _wrap_hk_reportdata_topline, METH_VARARGS },
	 { (char *)"hk_reportdata_bottomline", _wrap_hk_reportdata_bottomline, METH_VARARGS },
	 { (char *)"hk_reportdata_leftline", _wrap_hk_reportdata_leftline, METH_VARARGS },
	 { (char *)"hk_reportdata_rightline", _wrap_hk_reportdata_rightline, METH_VARARGS },
	 { (char *)"hk_reportdata_diagonalluro", _wrap_hk_reportdata_diagonalluro, METH_VARARGS },
	 { (char *)"hk_reportdata_set_frame", _wrap_hk_reportdata_set_frame, METH_VARARGS },
	 { (char *)"hk_reportdata_set_linebreak", _wrap_hk_reportdata_set_linebreak, METH_VARARGS },
	 { (char *)"hk_reportdata_linebreak", _wrap_hk_reportdata_linebreak, METH_VARARGS },
	 { (char *)"hk_reportdata_set_dynamic_height", _wrap_hk_reportdata_set_dynamic_height, METH_VARARGS },
	 { (char *)"hk_reportdata_dynamic_height", _wrap_hk_reportdata_dynamic_height, METH_VARARGS },
	 { (char *)"hk_reportdata_set_configurefunction", _wrap_hk_reportdata_set_configurefunction, METH_VARARGS },
	 { (char *)"hk_reportdata_configurefunction", _wrap_hk_reportdata_configurefunction, METH_VARARGS },
	 { (char *)"hk_reportdata_configurefunctionstring", _wrap_hk_reportdata_configurefunctionstring, METH_VARARGS },
	 { (char *)"hk_reportdata_savedata", _wrap_hk_reportdata_savedata, METH_VARARGS },
	 { (char *)"hk_reportdata_loaddata", _wrap_hk_reportdata_loaddata, METH_VARARGS },
	 { (char *)"hk_reportdata_neutralize_definition", _wrap_hk_reportdata_neutralize_definition, METH_VARARGS },
	 { (char *)"hk_reportdata_add_configurefunctiontype", _wrap_hk_reportdata_add_configurefunctiontype, METH_VARARGS },
	 { (char *)"hk_reportdata_configurefunctionlist", _wrap_hk_reportdata_configurefunctionlist, METH_VARARGS },
	 { (char *)"hk_reportdata_add_datacountfunctiontype", _wrap_hk_reportdata_add_datacountfunctiontype, METH_VARARGS },
	 { (char *)"hk_reportdata_datacountfunctionlist", _wrap_hk_reportdata_datacountfunctionlist, METH_VARARGS },
	 { (char *)"hk_reportdata_set_replacefunction", _wrap_hk_reportdata_set_replacefunction, METH_VARARGS },
	 { (char *)"hk_reportdata_add_datareplacefunctiontype", _wrap_hk_reportdata_add_datareplacefunctiontype, METH_VARARGS },
	 { (char *)"hk_reportdata_datareplacefunctionlist", _wrap_hk_reportdata_datareplacefunctionlist, METH_VARARGS },
	 { (char *)"hk_reportdata_reset_count", _wrap_hk_reportdata_reset_count, METH_VARARGS },
	 { (char *)"hk_reportdata_report", _wrap_hk_reportdata_report, METH_VARARGS },
	 { (char *)"hk_reportdata_section", _wrap_hk_reportdata_section, METH_VARARGS },
	 { (char *)"hk_reportdata_lower_widget", _wrap_hk_reportdata_lower_widget, METH_VARARGS },
	 { (char *)"hk_reportdata_raise_widget", _wrap_hk_reportdata_raise_widget, METH_VARARGS },
	 { (char *)"hk_reportdata_set_on_print_action", _wrap_hk_reportdata_set_on_print_action, METH_VARARGS },
	 { (char *)"hk_reportdata_on_print_action", _wrap_hk_reportdata_on_print_action, METH_VARARGS },
	 { (char *)"hk_reportdata_value_in_lines", _wrap_hk_reportdata_value_in_lines, METH_VARARGS },
	 { (char *)"hk_reportdata_height", _wrap_hk_reportdata_height, METH_VARARGS },
	 { (char *)"hk_reportdata_data_fully_printed", _wrap_hk_reportdata_data_fully_printed, METH_VARARGS },
	 { (char *)"hk_reportdata_reset_data_fully_printed", _wrap_hk_reportdata_reset_data_fully_printed, METH_VARARGS },
	 { (char *)"hk_reportdata_pagescount", _wrap_hk_reportdata_pagescount, METH_VARARGS },
	 { (char *)"hk_reportdata_tag_value", _wrap_hk_reportdata_tag_value, METH_VARARGS },
	 { (char *)"hk_reportdata_column_value", _wrap_hk_reportdata_column_value, METH_VARARGS },
	 { (char *)"hk_reportdata_set_is_image", _wrap_hk_reportdata_set_is_image, METH_VARARGS },
	 { (char *)"hk_reportdata_is_image", _wrap_hk_reportdata_is_image, METH_VARARGS },
	 { (char *)"hk_reportdata_swigregister", hk_reportdata_swigregister, METH_VARARGS },
	 { (char *)"currentreportdata", _wrap_currentreportdata, METH_VARARGS },
	 { (char *)"delete_hk_actionquery", _wrap_delete_hk_actionquery, METH_VARARGS },
	 { (char *)"hk_actionquery_type", _wrap_hk_actionquery_type, METH_VARARGS },
	 { (char *)"hk_actionquery_set_sql", _wrap_hk_actionquery_set_sql, METH_VARARGS },
	 { (char *)"hk_actionquery_sql", _wrap_hk_actionquery_sql, METH_VARARGS },
	 { (char *)"hk_actionquery_length", _wrap_hk_actionquery_length, METH_VARARGS },
	 { (char *)"hk_actionquery_execute", _wrap_hk_actionquery_execute, METH_VARARGS },
	 { (char *)"hk_actionquery_swigregister", hk_actionquery_swigregister, METH_VARARGS },
	 { (char *)"new_hk_dsgrid", _wrap_new_hk_dsgrid, METH_VARARGS },
	 { (char *)"delete_hk_dsgrid", _wrap_delete_hk_dsgrid, METH_VARARGS },
	 { (char *)"hk_dsgrid_gridcolumn", _wrap_hk_dsgrid_gridcolumn, METH_VARARGS },
	 { (char *)"hk_dsgrid_columnscount", _wrap_hk_dsgrid_columnscount, METH_VARARGS },
	 { (char *)"hk_dsgrid_set_gridcolumnwidth", _wrap_hk_dsgrid_set_gridcolumnwidth, METH_VARARGS },
	 { (char *)"hk_dsgrid_change_columnposition", _wrap_hk_dsgrid_change_columnposition, METH_VARARGS },
	 { (char *)"hk_dsgrid_set_gridcolumns", _wrap_hk_dsgrid_set_gridcolumns, METH_VARARGS },
	 { (char *)"hk_dsgrid_clear_gridcolumn", _wrap_hk_dsgrid_clear_gridcolumn, METH_VARARGS },
	 { (char *)"hk_dsgrid_set_hold_rowdefinition", _wrap_hk_dsgrid_set_hold_rowdefinition, METH_VARARGS },
	 { (char *)"hk_dsgrid_set_enablingbehaviour", _wrap_hk_dsgrid_set_enablingbehaviour, METH_VARARGS },
	 { (char *)"hk_dsgrid_savedata", _wrap_hk_dsgrid_savedata, METH_VARARGS },
	 { (char *)"hk_dsgrid_loaddata", _wrap_hk_dsgrid_loaddata, METH_VARARGS },
	 { (char *)"hk_dsgrid_set_datasource", _wrap_hk_dsgrid_set_datasource, METH_VARARGS },
	 { (char *)"hk_dsgrid_visible_columns", _wrap_hk_dsgrid_visible_columns, METH_VARARGS },
	 { (char *)"hk_dsgrid_nonvisible_columns", _wrap_hk_dsgrid_nonvisible_columns, METH_VARARGS },
	 { (char *)"hk_dsgrid_save_table", _wrap_hk_dsgrid_save_table, METH_VARARGS },
	 { (char *)"hk_dsgrid_load_table", _wrap_hk_dsgrid_load_table, METH_VARARGS },
	 { (char *)"hk_dsgrid_save_view", _wrap_hk_dsgrid_save_view, METH_VARARGS },
	 { (char *)"hk_dsgrid_load_view", _wrap_hk_dsgrid_load_view, METH_VARARGS },
	 { (char *)"hk_dsgrid_set_rowheight", _wrap_hk_dsgrid_set_rowheight, METH_VARARGS },
	 { (char *)"hk_dsgrid_rowheight", _wrap_hk_dsgrid_rowheight, METH_VARARGS },
	 { (char *)"hk_dsgrid_swigregister", hk_dsgrid_swigregister, METH_VARARGS },
	 { (char *)"new_hk_dsgridcolumn", _wrap_new_hk_dsgridcolumn, METH_VARARGS },
	 { (char *)"delete_hk_dsgridcolumn", _wrap_delete_hk_dsgridcolumn, METH_VARARGS },
	 { (char *)"hk_dsgridcolumn_set_displayname", _wrap_hk_dsgridcolumn_set_displayname, METH_VARARGS },
	 { (char *)"hk_dsgridcolumn_displayname", _wrap_hk_dsgridcolumn_displayname, METH_VARARGS },
	 { (char *)"hk_dsgridcolumn_set_columntype", _wrap_hk_dsgridcolumn_set_columntype, METH_VARARGS },
	 { (char *)"hk_dsgridcolumn_columntype", _wrap_hk_dsgridcolumn_columntype, METH_VARARGS },
	 { (char *)"hk_dsgridcolumn_set_columnwidth", _wrap_hk_dsgridcolumn_set_columnwidth, METH_VARARGS },
	 { (char *)"hk_dsgridcolumn_columnwidth", _wrap_hk_dsgridcolumn_columnwidth, METH_VARARGS },
	 { (char *)"hk_dsgridcolumn_savedata", _wrap_hk_dsgridcolumn_savedata, METH_VARARGS },
	 { (char *)"hk_dsgridcolumn_loaddata", _wrap_hk_dsgridcolumn_loaddata, METH_VARARGS },
	 { (char *)"hk_dsgridcolumn_set_listdatasource", _wrap_hk_dsgridcolumn_set_listdatasource, METH_VARARGS },
	 { (char *)"hk_dsgridcolumn_listdatasource", _wrap_hk_dsgridcolumn_listdatasource, METH_VARARGS },
	 { (char *)"hk_dsgridcolumn_listdatasourcename", _wrap_hk_dsgridcolumn_listdatasourcename, METH_VARARGS },
	 { (char *)"hk_dsgridcolumn_listdatasourcetype", _wrap_hk_dsgridcolumn_listdatasourcetype, METH_VARARGS },
	 { (char *)"hk_dsgridcolumn_set_viewcolumnname", _wrap_hk_dsgridcolumn_set_viewcolumnname, METH_VARARGS },
	 { (char *)"hk_dsgridcolumn_viewcolumnname", _wrap_hk_dsgridcolumn_viewcolumnname, METH_VARARGS },
	 { (char *)"hk_dsgridcolumn_set_listcolumnname", _wrap_hk_dsgridcolumn_set_listcolumnname, METH_VARARGS },
	 { (char *)"hk_dsgridcolumn_listcolumnname", _wrap_hk_dsgridcolumn_listcolumnname, METH_VARARGS },
	 { (char *)"hk_dsgridcolumn_set_listpresentationdatasource", _wrap_hk_dsgridcolumn_set_listpresentationdatasource, METH_VARARGS },
	 { (char *)"hk_dsgridcolumn_listpresentationdatasource", _wrap_hk_dsgridcolumn_listpresentationdatasource, METH_VARARGS },
	 { (char *)"hk_dsgridcolumn_value_at", _wrap_hk_dsgridcolumn_value_at, METH_VARARGS },
	 { (char *)"hk_dsgridcolumn_set_datasource", _wrap_hk_dsgridcolumn_set_datasource, METH_VARARGS },
	 { (char *)"hk_dsgridcolumn_combobox", _wrap_hk_dsgridcolumn_combobox, METH_VARARGS },
	 { (char *)"hk_dsgridcolumn_find", _wrap_hk_dsgridcolumn_find, METH_VARARGS },
	 { (char *)"hk_dsgridcolumn_is_findstring", _wrap_hk_dsgridcolumn_is_findstring, METH_VARARGS },
	 { (char *)"hk_dsgridcolumn_action_on_click", _wrap_hk_dsgridcolumn_action_on_click, METH_VARARGS },
	 { (char *)"hk_dsgridcolumn_action_on_doubleclick", _wrap_hk_dsgridcolumn_action_on_doubleclick, METH_VARARGS },
	 { (char *)"hk_dsgridcolumn_action_on_close", _wrap_hk_dsgridcolumn_action_on_close, METH_VARARGS },
	 { (char *)"hk_dsgridcolumn_action_on_open", _wrap_hk_dsgridcolumn_action_on_open, METH_VARARGS },
	 { (char *)"hk_dsgridcolumn_action_before_store_changed_data", _wrap_hk_dsgridcolumn_action_before_store_changed_data, METH_VARARGS },
	 { (char *)"hk_dsgridcolumn_action_after_store_changed_data", _wrap_hk_dsgridcolumn_action_after_store_changed_data, METH_VARARGS },
	 { (char *)"hk_dsgridcolumn_action_before_row_change", _wrap_hk_dsgridcolumn_action_before_row_change, METH_VARARGS },
	 { (char *)"hk_dsgridcolumn_action_after_row_change", _wrap_hk_dsgridcolumn_action_after_row_change, METH_VARARGS },
	 { (char *)"hk_dsgridcolumn_action_before_delete", _wrap_hk_dsgridcolumn_action_before_delete, METH_VARARGS },
	 { (char *)"hk_dsgridcolumn_action_after_delete", _wrap_hk_dsgridcolumn_action_after_delete, METH_VARARGS },
	 { (char *)"hk_dsgridcolumn_action_before_insert", _wrap_hk_dsgridcolumn_action_before_insert, METH_VARARGS },
	 { (char *)"hk_dsgridcolumn_action_after_insert", _wrap_hk_dsgridcolumn_action_after_insert, METH_VARARGS },
	 { (char *)"hk_dsgridcolumn_action_on_getfocus", _wrap_hk_dsgridcolumn_action_on_getfocus, METH_VARARGS },
	 { (char *)"hk_dsgridcolumn_action_on_loosefocus", _wrap_hk_dsgridcolumn_action_on_loosefocus, METH_VARARGS },
	 { (char *)"hk_dsgridcolumn_action_on_key", _wrap_hk_dsgridcolumn_action_on_key, METH_VARARGS },
	 { (char *)"hk_dsgridcolumn_action_on_select", _wrap_hk_dsgridcolumn_action_on_select, METH_VARARGS },
	 { (char *)"hk_dsgridcolumn_on_select_action", _wrap_hk_dsgridcolumn_on_select_action, METH_VARARGS },
	 { (char *)"hk_dsgridcolumn_set_on_select_action", _wrap_hk_dsgridcolumn_set_on_select_action, METH_VARARGS },
	 { (char *)"hk_dsgridcolumn_swigregister", hk_dsgridcolumn_swigregister, METH_VARARGS },
	 { (char *)"new_hk_dscombobox", _wrap_new_hk_dscombobox, METH_VARARGS },
	 { (char *)"delete_hk_dscombobox", _wrap_delete_hk_dscombobox, METH_VARARGS },
	 { (char *)"hk_dscombobox_set_listdatasource", _wrap_hk_dscombobox_set_listdatasource, METH_VARARGS },
	 { (char *)"hk_dscombobox_listdatasource", _wrap_hk_dscombobox_listdatasource, METH_VARARGS },
	 { (char *)"hk_dscombobox_set_datasource", _wrap_hk_dscombobox_set_datasource, METH_VARARGS },
	 { (char *)"hk_dscombobox_set_viewcolumnname", _wrap_hk_dscombobox_set_viewcolumnname, METH_VARARGS },
	 { (char *)"hk_dscombobox_viewcolumnname", _wrap_hk_dscombobox_viewcolumnname, METH_VARARGS },
	 { (char *)"hk_dscombobox_set_listcolumnname", _wrap_hk_dscombobox_set_listcolumnname, METH_VARARGS },
	 { (char *)"hk_dscombobox_listcolumnname", _wrap_hk_dscombobox_listcolumnname, METH_VARARGS },
	 { (char *)"hk_dscombobox_savedata", _wrap_hk_dscombobox_savedata, METH_VARARGS },
	 { (char *)"hk_dscombobox_loaddata", _wrap_hk_dscombobox_loaddata, METH_VARARGS },
	 { (char *)"hk_dscombobox_set_listpresentationdatasource", _wrap_hk_dscombobox_set_listpresentationdatasource, METH_VARARGS },
	 { (char *)"hk_dscombobox_listpresentationdatasource", _wrap_hk_dscombobox_listpresentationdatasource, METH_VARARGS },
	 { (char *)"hk_dscombobox_load_listitems", _wrap_hk_dscombobox_load_listitems, METH_VARARGS },
	 { (char *)"hk_dscombobox_set_mode", _wrap_hk_dscombobox_set_mode, METH_VARARGS },
	 { (char *)"hk_dscombobox_mode", _wrap_hk_dscombobox_mode, METH_VARARGS },
	 { (char *)"hk_dscombobox_value_at", _wrap_hk_dscombobox_value_at, METH_VARARGS },
	 { (char *)"hk_dscombobox_viewcolumn", _wrap_hk_dscombobox_viewcolumn, METH_VARARGS },
	 { (char *)"hk_dscombobox_listcolumn", _wrap_hk_dscombobox_listcolumn, METH_VARARGS },
	 { (char *)"hk_dscombobox_set_gridcolumn", _wrap_hk_dscombobox_set_gridcolumn, METH_VARARGS },
	 { (char *)"hk_dscombobox_gridcolumn", _wrap_hk_dscombobox_gridcolumn, METH_VARARGS },
	 { (char *)"hk_dscombobox_set_use_textlist", _wrap_hk_dscombobox_set_use_textlist, METH_VARARGS },
	 { (char *)"hk_dscombobox_use_textlist", _wrap_hk_dscombobox_use_textlist, METH_VARARGS },
	 { (char *)"hk_dscombobox_set_textlist", _wrap_hk_dscombobox_set_textlist, METH_VARARGS },
	 { (char *)"hk_dscombobox_add_text", _wrap_hk_dscombobox_add_text, METH_VARARGS },
	 { (char *)"hk_dscombobox_textlist", _wrap_hk_dscombobox_textlist, METH_VARARGS },
	 { (char *)"hk_dscombobox_action_on_select", _wrap_hk_dscombobox_action_on_select, METH_VARARGS },
	 { (char *)"hk_dscombobox_on_select_action", _wrap_hk_dscombobox_on_select_action, METH_VARARGS },
	 { (char *)"hk_dscombobox_set_on_select_action", _wrap_hk_dscombobox_set_on_select_action, METH_VARARGS },
	 { (char *)"hk_dscombobox_swigregister", hk_dscombobox_swigregister, METH_VARARGS },
	 { (char *)"new_hk_subform", _wrap_new_hk_subform, METH_VARARGS },
	 { (char *)"delete_hk_subform", _wrap_delete_hk_subform, METH_VARARGS },
	 { (char *)"hk_subform_set_name", _wrap_hk_subform_set_name, METH_VARARGS },
	 { (char *)"hk_subform_name", _wrap_hk_subform_name, METH_VARARGS },
	 { (char *)"hk_subform_subform", _wrap_hk_subform_subform, METH_VARARGS },
	 { (char *)"hk_subform_add_depending_fields", _wrap_hk_subform_add_depending_fields, METH_VARARGS },
	 { (char *)"hk_subform_clear_depending_fields", _wrap_hk_subform_clear_depending_fields, METH_VARARGS },
	 { (char *)"hk_subform_activate_subform", _wrap_hk_subform_activate_subform, METH_VARARGS },
	 { (char *)"hk_subform_depending_on_fields", _wrap_hk_subform_depending_on_fields, METH_VARARGS },
	 { (char *)"hk_subform_savedata", _wrap_hk_subform_savedata, METH_VARARGS },
	 { (char *)"hk_subform_loaddata", _wrap_hk_subform_loaddata, METH_VARARGS },
	 { (char *)"hk_subform_swigregister", hk_subform_swigregister, METH_VARARGS },
	 { (char *)"new_hk_url", _wrap_new_hk_url, METH_VARARGS },
	 { (char *)"hk_url_is_valid", _wrap_hk_url_is_valid, METH_VARARGS },
	 { (char *)"hk_url_is_local", _wrap_hk_url_is_local, METH_VARARGS },
	 { (char *)"hk_url_url", _wrap_hk_url_url, METH_VARARGS },
	 { (char *)"hk_url_filename", _wrap_hk_url_filename, METH_VARARGS },
	 { (char *)"hk_url_directory", _wrap_hk_url_directory, METH_VARARGS },
	 { (char *)"hk_url_extension", _wrap_hk_url_extension, METH_VARARGS },
	 { (char *)"delete_hk_url", _wrap_delete_hk_url, METH_VARARGS },
	 { (char *)"hk_url_swigregister", hk_url_swigregister, METH_VARARGS },
	 { (char *)"new_hk_datetime", _wrap_new_hk_datetime, METH_VARARGS },
	 { (char *)"delete_hk_datetime", _wrap_delete_hk_datetime, METH_VARARGS },
	 { (char *)"hk_datetime_set_date", _wrap_hk_datetime_set_date, METH_VARARGS },
	 { (char *)"hk_datetime_set_time", _wrap_hk_datetime_set_time, METH_VARARGS },
	 { (char *)"hk_datetime_set_datetime", _wrap_hk_datetime_set_datetime, METH_VARARGS },
	 { (char *)"hk_datetime_set_date_asstring", _wrap_hk_datetime_set_date_asstring, METH_VARARGS },
	 { (char *)"hk_datetime_set_time_asstring", _wrap_hk_datetime_set_time_asstring, METH_VARARGS },
	 { (char *)"hk_datetime_set_datetime_asstring", _wrap_hk_datetime_set_datetime_asstring, METH_VARARGS },
	 { (char *)"hk_datetime_date_asstring", _wrap_hk_datetime_date_asstring, METH_VARARGS },
	 { (char *)"hk_datetime_time_asstring", _wrap_hk_datetime_time_asstring, METH_VARARGS },
	 { (char *)"hk_datetime_datetime_asstring", _wrap_hk_datetime_datetime_asstring, METH_VARARGS },
	 { (char *)"hk_datetime_set_dateformat", _wrap_hk_datetime_set_dateformat, METH_VARARGS },
	 { (char *)"hk_datetime_set_timeformat", _wrap_hk_datetime_set_timeformat, METH_VARARGS },
	 { (char *)"hk_datetime_set_datetimeformat", _wrap_hk_datetime_set_datetimeformat, METH_VARARGS },
	 { (char *)"hk_datetime_day", _wrap_hk_datetime_day, METH_VARARGS },
	 { (char *)"hk_datetime_month", _wrap_hk_datetime_month, METH_VARARGS },
	 { (char *)"hk_datetime_year", _wrap_hk_datetime_year, METH_VARARGS },
	 { (char *)"hk_datetime_hour", _wrap_hk_datetime_hour, METH_VARARGS },
	 { (char *)"hk_datetime_minute", _wrap_hk_datetime_minute, METH_VARARGS },
	 { (char *)"hk_datetime_second", _wrap_hk_datetime_second, METH_VARARGS },
	 { (char *)"hk_datetime_set_now", _wrap_hk_datetime_set_now, METH_VARARGS },
	 { (char *)"hk_datetime___eq__", _wrap_hk_datetime___eq__, METH_VARARGS },
	 { (char *)"hk_datetime___ne__", _wrap_hk_datetime___ne__, METH_VARARGS },
	 { (char *)"hk_datetime___gt__", _wrap_hk_datetime___gt__, METH_VARARGS },
	 { (char *)"hk_datetime___ge__", _wrap_hk_datetime___ge__, METH_VARARGS },
	 { (char *)"hk_datetime___lt__", _wrap_hk_datetime___lt__, METH_VARARGS },
	 { (char *)"hk_datetime___le__", _wrap_hk_datetime___le__, METH_VARARGS },
	 { (char *)"hk_datetime_difference", _wrap_hk_datetime_difference, METH_VARARGS },
	 { (char *)"hk_datetime_swigregister", hk_datetime_swigregister, METH_VARARGS },
	 { (char *)"transfer_date", _wrap_transfer_date, METH_VARARGS },
	 { (char *)"transfer_time", _wrap_transfer_time, METH_VARARGS },
	 { (char *)"transfer_datetime", _wrap_transfer_datetime, METH_VARARGS },
	 { (char *)"new_colstruct", _wrap_new_colstruct, METH_VARARGS },
	 { (char *)"colstruct_colname_set", _wrap_colstruct_colname_set, METH_VARARGS },
	 { (char *)"colstruct_colname_get", _wrap_colstruct_colname_get, METH_VARARGS },
	 { (char *)"colstruct_col_set", _wrap_colstruct_col_set, METH_VARARGS },
	 { (char *)"colstruct_col_get", _wrap_colstruct_col_get, METH_VARARGS },
	 { (char *)"colstruct_currentvalue_set", _wrap_colstruct_currentvalue_set, METH_VARARGS },
	 { (char *)"colstruct_currentvalue_get", _wrap_colstruct_currentvalue_get, METH_VARARGS },
	 { (char *)"delete_colstruct", _wrap_delete_colstruct, METH_VARARGS },
	 { (char *)"colstruct_swigregister", colstruct_swigregister, METH_VARARGS },
	 { (char *)"new_hk_importcsv", _wrap_new_hk_importcsv, METH_VARARGS },
	 { (char *)"delete_hk_importcsv", _wrap_delete_hk_importcsv, METH_VARARGS },
	 { (char *)"hk_importcsv_execute", _wrap_hk_importcsv_execute, METH_VARARGS },
	 { (char *)"hk_importcsv_set_filedefinition", _wrap_hk_importcsv_set_filedefinition, METH_VARARGS },
	 { (char *)"hk_importcsv_set_filename", _wrap_hk_importcsv_set_filename, METH_VARARGS },
	 { (char *)"hk_importcsv_set_firstrow_contains_fieldnames", _wrap_hk_importcsv_set_firstrow_contains_fieldnames, METH_VARARGS },
	 { (char *)"hk_importcsv_set_append_rows", _wrap_hk_importcsv_set_append_rows, METH_VARARGS },
	 { (char *)"hk_importcsv_set_create_new_table", _wrap_hk_importcsv_set_create_new_table, METH_VARARGS },
	 { (char *)"hk_importcsv_add_columnname", _wrap_hk_importcsv_add_columnname, METH_VARARGS },
	 { (char *)"hk_importcsv_clear_columnlist", _wrap_hk_importcsv_clear_columnlist, METH_VARARGS },
	 { (char *)"hk_importcsv_set_detect_autoinc", _wrap_hk_importcsv_set_detect_autoinc, METH_VARARGS },
	 { (char *)"hk_importcsv_detect_autoinc", _wrap_hk_importcsv_detect_autoinc, METH_VARARGS },
	 { (char *)"hk_importcsv_textdelimiter", _wrap_hk_importcsv_textdelimiter, METH_VARARGS },
	 { (char *)"hk_importcsv_betweenfield", _wrap_hk_importcsv_betweenfield, METH_VARARGS },
	 { (char *)"hk_importcsv_rowdelimiter", _wrap_hk_importcsv_rowdelimiter, METH_VARARGS },
	 { (char *)"hk_importcsv_datetimeformat", _wrap_hk_importcsv_datetimeformat, METH_VARARGS },
	 { (char *)"hk_importcsv_dateformat", _wrap_hk_importcsv_dateformat, METH_VARARGS },
	 { (char *)"hk_importcsv_timeformat", _wrap_hk_importcsv_timeformat, METH_VARARGS },
	 { (char *)"hk_importcsv_filelocale", _wrap_hk_importcsv_filelocale, METH_VARARGS },
	 { (char *)"hk_importcsv_filecharset", _wrap_hk_importcsv_filecharset, METH_VARARGS },
	 { (char *)"hk_importcsv_set_overwrite_table", _wrap_hk_importcsv_set_overwrite_table, METH_VARARGS },
	 { (char *)"hk_importcsv_overwrite_table", _wrap_hk_importcsv_overwrite_table, METH_VARARGS },
	 { (char *)"hk_importcsv_create_valuelist", _wrap_hk_importcsv_create_valuelist, METH_VARARGS },
	 { (char *)"hk_importcsv_get_line", _wrap_hk_importcsv_get_line, METH_VARARGS },
	 { (char *)"hk_importcsv_swigregister", hk_importcsv_swigregister, METH_VARARGS },
	 { (char *)"new_hk_reporthtml", _wrap_new_hk_reporthtml, METH_VARARGS },
	 { (char *)"delete_hk_reporthtml", _wrap_delete_hk_reporthtml, METH_VARARGS },
	 { (char *)"hk_reporthtml_set_tabletag", _wrap_hk_reporthtml_set_tabletag, METH_VARARGS },
	 { (char *)"hk_reporthtml_set_beforetable", _wrap_hk_reporthtml_set_beforetable, METH_VARARGS },
	 { (char *)"hk_reporthtml_set_aftertable", _wrap_hk_reporthtml_set_aftertable, METH_VARARGS },
	 { (char *)"hk_reporthtml_set_trtag", _wrap_hk_reporthtml_set_trtag, METH_VARARGS },
	 { (char *)"hk_reporthtml_set_thtag", _wrap_hk_reporthtml_set_thtag, METH_VARARGS },
	 { (char *)"hk_reporthtml_set_tdtag", _wrap_hk_reporthtml_set_tdtag, METH_VARARGS },
	 { (char *)"hk_reporthtml_set_beforehtmltag", _wrap_hk_reporthtml_set_beforehtmltag, METH_VARARGS },
	 { (char *)"hk_reporthtml_set_betweenheadtags", _wrap_hk_reporthtml_set_betweenheadtags, METH_VARARGS },
	 { (char *)"hk_reporthtml_set_groupcolumn", _wrap_hk_reporthtml_set_groupcolumn, METH_VARARGS },
	 { (char *)"hk_reporthtml_set_multiplefiles", _wrap_hk_reporthtml_set_multiplefiles, METH_VARARGS },
	 { (char *)"hk_reporthtml_set_title", _wrap_hk_reporthtml_set_title, METH_VARARGS },
	 { (char *)"hk_reporthtml_set_author", _wrap_hk_reporthtml_set_author, METH_VARARGS },
	 { (char *)"hk_reporthtml_swigregister", hk_reporthtml_swigregister, METH_VARARGS },
	 { (char *)"recode_html", _wrap_recode_html, METH_VARARGS },
	 { (char *)"recode_postscript", _wrap_recode_postscript, METH_VARARGS },
	 { (char *)"fullpagereplace_postscript", _wrap_fullpagereplace_postscript, METH_VARARGS },
	 { (char *)"recode_utf8", _wrap_recode_utf8, METH_VARARGS },
	 { (char *)"recount_postscript", _wrap_recount_postscript, METH_VARARGS },
	 { (char *)"configure_postscriptdata", _wrap_configure_postscriptdata, METH_VARARGS },
	 { (char *)"configure_postscriptreport", _wrap_configure_postscriptreport, METH_VARARGS },
	 { (char *)"set_reporttype_postscript", _wrap_set_reporttype_postscript, METH_VARARGS },
	 { (char *)"replacepsdatafunction", _wrap_replacepsdatafunction, METH_VARARGS },
	 { (char *)"new_hk_reportcsv", _wrap_new_hk_reportcsv, METH_VARARGS },
	 { (char *)"delete_hk_reportcsv", _wrap_delete_hk_reportcsv, METH_VARARGS },
	 { (char *)"hk_reportcsv_set_groupcolumn", _wrap_hk_reportcsv_set_groupcolumn, METH_VARARGS },
	 { (char *)"hk_reportcsv_set_multiplefiles", _wrap_hk_reportcsv_set_multiplefiles, METH_VARARGS },
	 { (char *)"hk_reportcsv_set_filedefinition", _wrap_hk_reportcsv_set_filedefinition, METH_VARARGS },
	 { (char *)"hk_reportcsv_set_withheader", _wrap_hk_reportcsv_set_withheader, METH_VARARGS },
	 { (char *)"hk_reportcsv_textdelimiter", _wrap_hk_reportcsv_textdelimiter, METH_VARARGS },
	 { (char *)"hk_reportcsv_between", _wrap_hk_reportcsv_between, METH_VARARGS },
	 { (char *)"hk_reportcsv_swigregister", hk_reportcsv_swigregister, METH_VARARGS },
	 { (char *)"encodefilecharsetfunction", _wrap_encodefilecharsetfunction, METH_VARARGS },
	 { (char *)"automatic_create_csvfields", _wrap_automatic_create_csvfields, METH_VARARGS },
	 { (char *)"zmm2ps", _wrap_zmm2ps, METH_VARARGS },
	 { (char *)"ps2zmm", _wrap_ps2zmm, METH_VARARGS },
	 { (char *)"new_hk_reportxml", _wrap_new_hk_reportxml, METH_VARARGS },
	 { (char *)"delete_hk_reportxml", _wrap_delete_hk_reportxml, METH_VARARGS },
	 { (char *)"hk_reportxml_set_maindocumenttag", _wrap_hk_reportxml_set_maindocumenttag, METH_VARARGS },
	 { (char *)"hk_reportxml_maindocumenttag", _wrap_hk_reportxml_maindocumenttag, METH_VARARGS },
	 { (char *)"hk_reportxml_set_rowtag", _wrap_hk_reportxml_set_rowtag, METH_VARARGS },
	 { (char *)"hk_reportxml_rowtag", _wrap_hk_reportxml_rowtag, METH_VARARGS },
	 { (char *)"hk_reportxml_set_includetableschema", _wrap_hk_reportxml_set_includetableschema, METH_VARARGS },
	 { (char *)"hk_reportxml_set_excelxml", _wrap_hk_reportxml_set_excelxml, METH_VARARGS },
	 { (char *)"hk_reportxml_excelxml", _wrap_hk_reportxml_excelxml, METH_VARARGS },
	 { (char *)"hk_reportxml_includetableschema", _wrap_hk_reportxml_includetableschema, METH_VARARGS },
	 { (char *)"hk_reportxml_set_fieldname_as_attribute", _wrap_hk_reportxml_set_fieldname_as_attribute, METH_VARARGS },
	 { (char *)"hk_reportxml_fieldname_as_attribute", _wrap_hk_reportxml_fieldname_as_attribute, METH_VARARGS },
	 { (char *)"hk_reportxml_swigregister", hk_reportxml_swigregister, METH_VARARGS },
	 { (char *)"fullpagereplace_excelxml", _wrap_fullpagereplace_excelxml, METH_VARARGS },
	 { (char *)"replaceexcelxmldatafunction", _wrap_replaceexcelxmldatafunction, METH_VARARGS },
	 { (char *)"configure_excelxmldata", _wrap_configure_excelxmldata, METH_VARARGS },
	 { (char *)"new_hk_mimetype", _wrap_new_hk_mimetype, METH_VARARGS },
	 { (char *)"hk_mimetype_mimetype", _wrap_hk_mimetype_mimetype, METH_VARARGS },
	 { (char *)"hk_mimetype_set_mimetypedatabasefile", _wrap_hk_mimetype_set_mimetypedatabasefile, METH_VARARGS },
	 { (char *)"hk_mimetype_mimetypedatabasefile", _wrap_hk_mimetype_mimetypedatabasefile, METH_VARARGS },
	 { (char *)"delete_hk_mimetype", _wrap_delete_hk_mimetype, METH_VARARGS },
	 { (char *)"hk_mimetype_swigregister", hk_mimetype_swigregister, METH_VARARGS },
	 { NULL, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_hk_reportcsvTo_p_hk_presentation(void *x) {
    return (void *)((hk_presentation *) (hk_report *) ((hk_reportcsv *) x));
}
static void *_p_hk_reporthtmlTo_p_hk_presentation(void *x) {
    return (void *)((hk_presentation *) (hk_report *) ((hk_reporthtml *) x));
}
static void *_p_hk_reportxmlTo_p_hk_presentation(void *x) {
    return (void *)((hk_presentation *) (hk_report *) ((hk_reportxml *) x));
}
static void *_p_hk_reportTo_p_hk_presentation(void *x) {
    return (void *)((hk_presentation *)  ((hk_report *) x));
}
static void *_p_hk_formTo_p_hk_presentation(void *x) {
    return (void *)((hk_presentation *)  ((hk_form *) x));
}
static void *_p_hk_presentationTo_p_hk_dsmodevisible(void *x) {
    return (void *)((hk_dsmodevisible *)  ((hk_presentation *) x));
}
static void *_p_hk_reportcsvTo_p_hk_dsmodevisible(void *x) {
    return (void *)((hk_dsmodevisible *) (hk_presentation *)(hk_report *) ((hk_reportcsv *) x));
}
static void *_p_hk_dsqueryTo_p_hk_dsmodevisible(void *x) {
    return (void *)((hk_dsmodevisible *)  ((hk_dsquery *) x));
}
static void *_p_hk_reporthtmlTo_p_hk_dsmodevisible(void *x) {
    return (void *)((hk_dsmodevisible *) (hk_presentation *)(hk_report *) ((hk_reporthtml *) x));
}
static void *_p_hk_reportxmlTo_p_hk_dsmodevisible(void *x) {
    return (void *)((hk_dsmodevisible *) (hk_presentation *)(hk_report *) ((hk_reportxml *) x));
}
static void *_p_hk_reportTo_p_hk_dsmodevisible(void *x) {
    return (void *)((hk_dsmodevisible *) (hk_presentation *) ((hk_report *) x));
}
static void *_p_hk_formTo_p_hk_dsmodevisible(void *x) {
    return (void *)((hk_dsmodevisible *) (hk_presentation *) ((hk_form *) x));
}
static void *_p_hk_dstableTo_p_hk_dsmodevisible(void *x) {
    return (void *)((hk_dsmodevisible *)  ((hk_dstable *) x));
}
static void *_p_hk_dsimageTo_p_hk_dsdatavisible(void *x) {
    return (void *)((hk_dsdatavisible *)  ((hk_dsimage *) x));
}
static void *_p_hk_dscomboboxTo_p_hk_dsdatavisible(void *x) {
    return (void *)((hk_dsdatavisible *)  ((hk_dscombobox *) x));
}
static void *_p_hk_dslineeditTo_p_hk_dsdatavisible(void *x) {
    return (void *)((hk_dsdatavisible *)  ((hk_dslineedit *) x));
}
static void *_p_hk_dsbooleanTo_p_hk_dsdatavisible(void *x) {
    return (void *)((hk_dsdatavisible *)  ((hk_dsboolean *) x));
}
static void *_p_hk_dsgridcolumnTo_p_hk_dsdatavisible(void *x) {
    return (void *)((hk_dsdatavisible *)  ((hk_dsgridcolumn *) x));
}
static void *_p_hk_dsmemoTo_p_hk_dsdatavisible(void *x) {
    return (void *)((hk_dsdatavisible *)  ((hk_dsmemo *) x));
}
static void *_p_hk_dsdateTo_p_hk_dsdatavisible(void *x) {
    return (void *)((hk_dsdatavisible *)  ((hk_dsdate *) x));
}
static void *_p_hk_reportdataTo_p_hk_dsdatavisible(void *x) {
    return (void *)((hk_dsdatavisible *)  ((hk_reportdata *) x));
}
static void *_p_hk_reportsectionTo_p_hk_dsdatavisible(void *x) {
    return (void *)((hk_dsdatavisible *)  ((hk_reportsection *) x));
}
static void *_p_hk_reportTo_p_hk_dsvisible(void *x) {
    return (void *)((hk_dsvisible *) (hk_dsmodevisible *)(hk_presentation *) ((hk_report *) x));
}
static void *_p_hk_dsbooleanTo_p_hk_dsvisible(void *x) {
    return (void *)((hk_dsvisible *) (hk_dsdatavisible *) ((hk_dsboolean *) x));
}
static void *_p_hk_reportxmlTo_p_hk_dsvisible(void *x) {
    return (void *)((hk_dsvisible *) (hk_dsmodevisible *)(hk_presentation *)(hk_report *) ((hk_reportxml *) x));
}
static void *_p_hk_reportdataTo_p_hk_dsvisible(void *x) {
    return (void *)((hk_dsvisible *) (hk_dsdatavisible *) ((hk_reportdata *) x));
}
static void *_p_hk_dslineeditTo_p_hk_dsvisible(void *x) {
    return (void *)((hk_dsvisible *) (hk_dsdatavisible *) ((hk_dslineedit *) x));
}
static void *_p_hk_dsimageTo_p_hk_dsvisible(void *x) {
    return (void *)((hk_dsvisible *) (hk_dsdatavisible *) ((hk_dsimage *) x));
}
static void *_p_hk_reporthtmlTo_p_hk_dsvisible(void *x) {
    return (void *)((hk_dsvisible *) (hk_dsmodevisible *)(hk_presentation *)(hk_report *) ((hk_reporthtml *) x));
}
static void *_p_hk_reportsectionTo_p_hk_dsvisible(void *x) {
    return (void *)((hk_dsvisible *) (hk_dsdatavisible *) ((hk_reportsection *) x));
}
static void *_p_hk_buttonTo_p_hk_dsvisible(void *x) {
    return (void *)((hk_dsvisible *)  ((hk_button *) x));
}
static void *_p_hk_formTo_p_hk_dsvisible(void *x) {
    return (void *)((hk_dsvisible *) (hk_dsmodevisible *)(hk_presentation *) ((hk_form *) x));
}
static void *_p_hk_dsgridTo_p_hk_dsvisible(void *x) {
    return (void *)((hk_dsvisible *)  ((hk_dsgrid *) x));
}
static void *_p_hk_dscomboboxTo_p_hk_dsvisible(void *x) {
    return (void *)((hk_dsvisible *) (hk_dsdatavisible *) ((hk_dscombobox *) x));
}
static void *_p_hk_dsdateTo_p_hk_dsvisible(void *x) {
    return (void *)((hk_dsvisible *) (hk_dsdatavisible *) ((hk_dsdate *) x));
}
static void *_p_hk_dsqueryTo_p_hk_dsvisible(void *x) {
    return (void *)((hk_dsvisible *) (hk_dsmodevisible *) ((hk_dsquery *) x));
}
static void *_p_hk_dstableTo_p_hk_dsvisible(void *x) {
    return (void *)((hk_dsvisible *) (hk_dsmodevisible *) ((hk_dstable *) x));
}
static void *_p_hk_subformTo_p_hk_dsvisible(void *x) {
    return (void *)((hk_dsvisible *)  ((hk_subform *) x));
}
static void *_p_hk_dsmemoTo_p_hk_dsvisible(void *x) {
    return (void *)((hk_dsvisible *) (hk_dsdatavisible *) ((hk_dsmemo *) x));
}
static void *_p_hk_dsmodevisibleTo_p_hk_dsvisible(void *x) {
    return (void *)((hk_dsvisible *)  ((hk_dsmodevisible *) x));
}
static void *_p_hk_dsdatavisibleTo_p_hk_dsvisible(void *x) {
    return (void *)((hk_dsvisible *)  ((hk_dsdatavisible *) x));
}
static void *_p_hk_presentationTo_p_hk_dsvisible(void *x) {
    return (void *)((hk_dsvisible *) (hk_dsmodevisible *) ((hk_presentation *) x));
}
static void *_p_hk_dsgridcolumnTo_p_hk_dsvisible(void *x) {
    return (void *)((hk_dsvisible *) (hk_dsdatavisible *) ((hk_dsgridcolumn *) x));
}
static void *_p_hk_importcsvTo_p_hk_dsvisible(void *x) {
    return (void *)((hk_dsvisible *)  ((hk_importcsv *) x));
}
static void *_p_hk_reportcsvTo_p_hk_dsvisible(void *x) {
    return (void *)((hk_dsvisible *) (hk_dsmodevisible *)(hk_presentation *)(hk_report *) ((hk_reportcsv *) x));
}
static void *_p_hk_dsbooleanTo_p_hk_visible(void *x) {
    return (void *)((hk_visible *) (hk_dsvisible *)(hk_dsdatavisible *) ((hk_dsboolean *) x));
}
static void *_p_hk_reportTo_p_hk_visible(void *x) {
    return (void *)((hk_visible *) (hk_dsvisible *)(hk_dsmodevisible *)(hk_presentation *) ((hk_report *) x));
}
static void *_p_hk_reportxmlTo_p_hk_visible(void *x) {
    return (void *)((hk_visible *) (hk_dsvisible *)(hk_dsmodevisible *)(hk_presentation *)(hk_report *) ((hk_reportxml *) x));
}
static void *_p_hk_reportdataTo_p_hk_visible(void *x) {
    return (void *)((hk_visible *) (hk_dsvisible *)(hk_dsdatavisible *) ((hk_reportdata *) x));
}
static void *_p_hk_dslineeditTo_p_hk_visible(void *x) {
    return (void *)((hk_visible *) (hk_dsvisible *)(hk_dsdatavisible *) ((hk_dslineedit *) x));
}
static void *_p_hk_dsimageTo_p_hk_visible(void *x) {
    return (void *)((hk_visible *) (hk_dsvisible *)(hk_dsdatavisible *) ((hk_dsimage *) x));
}
static void *_p_hk_reporthtmlTo_p_hk_visible(void *x) {
    return (void *)((hk_visible *) (hk_dsvisible *)(hk_dsmodevisible *)(hk_presentation *)(hk_report *) ((hk_reporthtml *) x));
}
static void *_p_hk_reportsectionTo_p_hk_visible(void *x) {
    return (void *)((hk_visible *) (hk_dsvisible *)(hk_dsdatavisible *) ((hk_reportsection *) x));
}
static void *_p_hk_labelTo_p_hk_visible(void *x) {
    return (void *)((hk_visible *)  ((hk_label *) x));
}
static void *_p_hk_buttonTo_p_hk_visible(void *x) {
    return (void *)((hk_visible *) (hk_dsvisible *) ((hk_button *) x));
}
static void *_p_hk_formTo_p_hk_visible(void *x) {
    return (void *)((hk_visible *) (hk_dsvisible *)(hk_dsmodevisible *)(hk_presentation *) ((hk_form *) x));
}
static void *_p_hk_dsgridTo_p_hk_visible(void *x) {
    return (void *)((hk_visible *) (hk_dsvisible *) ((hk_dsgrid *) x));
}
static void *_p_hk_dscomboboxTo_p_hk_visible(void *x) {
    return (void *)((hk_visible *) (hk_dsvisible *)(hk_dsdatavisible *) ((hk_dscombobox *) x));
}
static void *_p_hk_dsdateTo_p_hk_visible(void *x) {
    return (void *)((hk_visible *) (hk_dsvisible *)(hk_dsdatavisible *) ((hk_dsdate *) x));
}
static void *_p_hk_dsqueryTo_p_hk_visible(void *x) {
    return (void *)((hk_visible *) (hk_dsvisible *)(hk_dsmodevisible *) ((hk_dsquery *) x));
}
static void *_p_hk_dstableTo_p_hk_visible(void *x) {
    return (void *)((hk_visible *) (hk_dsvisible *)(hk_dsmodevisible *) ((hk_dstable *) x));
}
static void *_p_hk_subformTo_p_hk_visible(void *x) {
    return (void *)((hk_visible *) (hk_dsvisible *) ((hk_subform *) x));
}
static void *_p_hk_dsmemoTo_p_hk_visible(void *x) {
    return (void *)((hk_visible *) (hk_dsvisible *)(hk_dsdatavisible *) ((hk_dsmemo *) x));
}
static void *_p_hk_dsmodevisibleTo_p_hk_visible(void *x) {
    return (void *)((hk_visible *) (hk_dsvisible *) ((hk_dsmodevisible *) x));
}
static void *_p_hk_dsdatavisibleTo_p_hk_visible(void *x) {
    return (void *)((hk_visible *) (hk_dsvisible *) ((hk_dsdatavisible *) x));
}
static void *_p_hk_dsvisibleTo_p_hk_visible(void *x) {
    return (void *)((hk_visible *)  ((hk_dsvisible *) x));
}
static void *_p_hk_presentationTo_p_hk_visible(void *x) {
    return (void *)((hk_visible *) (hk_dsvisible *)(hk_dsmodevisible *) ((hk_presentation *) x));
}
static void *_p_hk_dsgridcolumnTo_p_hk_visible(void *x) {
    return (void *)((hk_visible *) (hk_dsvisible *)(hk_dsdatavisible *) ((hk_dsgridcolumn *) x));
}
static void *_p_hk_importcsvTo_p_hk_visible(void *x) {
    return (void *)((hk_visible *) (hk_dsvisible *) ((hk_importcsv *) x));
}
static void *_p_hk_reportcsvTo_p_hk_visible(void *x) {
    return (void *)((hk_visible *) (hk_dsvisible *)(hk_dsmodevisible *)(hk_presentation *)(hk_report *) ((hk_reportcsv *) x));
}
static void *_p_hk_reportcsvTo_p_hk_report(void *x) {
    return (void *)((hk_report *)  ((hk_reportcsv *) x));
}
static void *_p_hk_reporthtmlTo_p_hk_report(void *x) {
    return (void *)((hk_report *)  ((hk_reporthtml *) x));
}
static void *_p_hk_reportxmlTo_p_hk_report(void *x) {
    return (void *)((hk_report *)  ((hk_reportxml *) x));
}
static void *_p_hk_datasourceTo_p_hk_data(void *x) {
    return (void *)((hk_data *)  ((hk_datasource *) x));
}
static void *_p_hk_actionqueryTo_p_hk_data(void *x) {
    return (void *)((hk_data *)  ((hk_actionquery *) x));
}
static void *_p_hk_dsmemoTo_p_hk_class(void *x) {
    return (void *)((hk_class *) (hk_visible *)(hk_dsvisible *)(hk_dsdatavisible *) ((hk_dsmemo *) x));
}
static void *_p_hk_reportsectionTo_p_hk_class(void *x) {
    return (void *)((hk_class *) (hk_visible *)(hk_dsvisible *)(hk_dsdatavisible *) ((hk_reportsection *) x));
}
static void *_p_hk_keyTo_p_hk_class(void *x) {
    return (void *)((hk_class *)  ((hk_key *) x));
}
static void *_p_hk_colourTo_p_hk_class(void *x) {
    return (void *)((hk_class *)  ((hk_colour *) x));
}
static void *_p_hk_columnTo_p_hk_class(void *x) {
    return (void *)((hk_class *)  ((hk_column *) x));
}
static void *_p_hk_reportTo_p_hk_class(void *x) {
    return (void *)((hk_class *) (hk_visible *)(hk_dsvisible *)(hk_dsmodevisible *)(hk_presentation *) ((hk_report *) x));
}
static void *_p_hk_dsqueryTo_p_hk_class(void *x) {
    return (void *)((hk_class *) (hk_visible *)(hk_dsvisible *)(hk_dsmodevisible *) ((hk_dsquery *) x));
}
static void *_p_hk_actionqueryTo_p_hk_class(void *x) {
    return (void *)((hk_class *) (hk_data *) ((hk_actionquery *) x));
}
static void *_p_hk_reportsectionpairTo_p_hk_class(void *x) {
    return (void *)((hk_class *)  ((hk_reportsectionpair *) x));
}
static void *_p_hk_dsgridTo_p_hk_class(void *x) {
    return (void *)((hk_class *) (hk_visible *)(hk_dsvisible *) ((hk_dsgrid *) x));
}
static void *_p_hk_dsimageTo_p_hk_class(void *x) {
    return (void *)((hk_class *) (hk_visible *)(hk_dsvisible *)(hk_dsdatavisible *) ((hk_dsimage *) x));
}
static void *_p_hk_connectionTo_p_hk_class(void *x) {
    return (void *)((hk_class *)  ((hk_connection *) x));
}
static void *_p_hk_dsgridcolumnTo_p_hk_class(void *x) {
    return (void *)((hk_class *) (hk_visible *)(hk_dsvisible *)(hk_dsdatavisible *) ((hk_dsgridcolumn *) x));
}
static void *_p_hk_dsmodevisibleTo_p_hk_class(void *x) {
    return (void *)((hk_class *) (hk_visible *)(hk_dsvisible *) ((hk_dsmodevisible *) x));
}
static void *_p_hk_visibleTo_p_hk_class(void *x) {
    return (void *)((hk_class *)  ((hk_visible *) x));
}
static void *_p_hk_dsvisibleTo_p_hk_class(void *x) {
    return (void *)((hk_class *) (hk_visible *) ((hk_dsvisible *) x));
}
static void *_p_hk_dsdatavisibleTo_p_hk_class(void *x) {
    return (void *)((hk_class *) (hk_visible *)(hk_dsvisible *) ((hk_dsdatavisible *) x));
}
static void *_p_hk_datasourceTo_p_hk_class(void *x) {
    return (void *)((hk_class *) (hk_data *) ((hk_datasource *) x));
}
static void *_p_hk_reporthtmlTo_p_hk_class(void *x) {
    return (void *)((hk_class *) (hk_visible *)(hk_dsvisible *)(hk_dsmodevisible *)(hk_presentation *)(hk_report *) ((hk_reporthtml *) x));
}
static void *_p_hk_reportxmlTo_p_hk_class(void *x) {
    return (void *)((hk_class *) (hk_visible *)(hk_dsvisible *)(hk_dsmodevisible *)(hk_presentation *)(hk_report *) ((hk_reportxml *) x));
}
static void *_p_hk_dsdateTo_p_hk_class(void *x) {
    return (void *)((hk_class *) (hk_visible *)(hk_dsvisible *)(hk_dsdatavisible *) ((hk_dsdate *) x));
}
static void *_p_hk_labelTo_p_hk_class(void *x) {
    return (void *)((hk_class *) (hk_visible *) ((hk_label *) x));
}
static void *_p_hk_mimetypeTo_p_hk_class(void *x) {
    return (void *)((hk_class *)  ((hk_mimetype *) x));
}
static void *_p_hk_dataTo_p_hk_class(void *x) {
    return (void *)((hk_class *)  ((hk_data *) x));
}
static void *_p_hk_presentationTo_p_hk_class(void *x) {
    return (void *)((hk_class *) (hk_visible *)(hk_dsvisible *)(hk_dsmodevisible *) ((hk_presentation *) x));
}
static void *_p_hk_fontTo_p_hk_class(void *x) {
    return (void *)((hk_class *)  ((hk_font *) x));
}
static void *_p_hk_dsbooleanTo_p_hk_class(void *x) {
    return (void *)((hk_class *) (hk_visible *)(hk_dsvisible *)(hk_dsdatavisible *) ((hk_dsboolean *) x));
}
static void *_p_hk_dstableTo_p_hk_class(void *x) {
    return (void *)((hk_class *) (hk_visible *)(hk_dsvisible *)(hk_dsmodevisible *) ((hk_dstable *) x));
}
static void *_p_hk_urlTo_p_hk_class(void *x) {
    return (void *)((hk_class *)  ((hk_url *) x));
}
static void *_p_hk_subformTo_p_hk_class(void *x) {
    return (void *)((hk_class *) (hk_visible *)(hk_dsvisible *) ((hk_subform *) x));
}
static void *_p_hk_importcsvTo_p_hk_class(void *x) {
    return (void *)((hk_class *) (hk_visible *)(hk_dsvisible *) ((hk_importcsv *) x));
}
static void *_p_hk_reportcsvTo_p_hk_class(void *x) {
    return (void *)((hk_class *) (hk_visible *)(hk_dsvisible *)(hk_dsmodevisible *)(hk_presentation *)(hk_report *) ((hk_reportcsv *) x));
}
static void *_p_hk_reportdataTo_p_hk_class(void *x) {
    return (void *)((hk_class *) (hk_visible *)(hk_dsvisible *)(hk_dsdatavisible *) ((hk_reportdata *) x));
}
static void *_p_hk_dscomboboxTo_p_hk_class(void *x) {
    return (void *)((hk_class *) (hk_visible *)(hk_dsvisible *)(hk_dsdatavisible *) ((hk_dscombobox *) x));
}
static void *_p_hk_buttonTo_p_hk_class(void *x) {
    return (void *)((hk_class *) (hk_visible *)(hk_dsvisible *) ((hk_button *) x));
}
static void *_p_hk_formTo_p_hk_class(void *x) {
    return (void *)((hk_class *) (hk_visible *)(hk_dsvisible *)(hk_dsmodevisible *)(hk_presentation *) ((hk_form *) x));
}
static void *_p_hk_dslineeditTo_p_hk_class(void *x) {
    return (void *)((hk_class *) (hk_visible *)(hk_dsvisible *)(hk_dsdatavisible *) ((hk_dslineedit *) x));
}
static void *_p_hk_datetimeTo_p_hk_class(void *x) {
    return (void *)((hk_class *)  ((hk_datetime *) x));
}
static void *_p_hk_databaseTo_p_hk_class(void *x) {
    return (void *)((hk_class *)  ((hk_database *) x));
}
static void *_p_hk_drivermanagerTo_p_hk_class(void *x) {
    return (void *)((hk_class *)  ((hk_drivermanager *) x));
}
static swig_type_info _swigt__p_hk_dslineedit[] = {{"_p_hk_dslineedit", 0, "hk_dslineedit *", 0},{"_p_hk_dslineedit"},{0}};
static swig_type_info _swigt__p_hk_column__enum_columntype[] = {{"_p_hk_column__enum_columntype", 0, "hk_column::enum_columntype *", 0},{"_p_hk_column__enum_columntype"},{0}};
static swig_type_info _swigt__p_hk_url[] = {{"_p_hk_url", 0, "hk_url *", 0},{"_p_hk_url"},{0}};
static swig_type_info _swigt__p_hk_presentation[] = {{"_p_hk_presentation", 0, "hk_presentation *", 0},{"_p_hk_presentation"},{"_p_hk_reportcsv", _p_hk_reportcsvTo_p_hk_presentation},{"_p_hk_reporthtml", _p_hk_reporthtmlTo_p_hk_presentation},{"_p_hk_reportxml", _p_hk_reportxmlTo_p_hk_presentation},{"_p_hk_report", _p_hk_reportTo_p_hk_presentation},{"_p_hk_form", _p_hk_formTo_p_hk_presentation},{0}};
static swig_type_info _swigt__p_hk_database[] = {{"_p_hk_database", 0, "hk_database *", 0},{"_p_hk_database"},{0}};
static swig_type_info _swigt__p_reportsectionautomaticcreatedatatype[] = {{"_p_reportsectionautomaticcreatedatatype", 0, "reportsectionautomaticcreatedatatype *", 0},{"_p_reportsectionautomaticcreatedatatype"},{0}};
static swig_type_info _swigt__p_psimagedatatype[] = {{"_p_psimagedatatype", 0, "psimagedatatype *", 0},{"_p_psimagedatatype"},{0}};
static swig_type_info _swigt__p_std__vectorThk_reportsectionpair_p_t[] = {{"_p_std__vectorThk_reportsectionpair_p_t", 0, "std::vector<hk_reportsectionpair * > *", 0},{"_p_std__vectorThk_reportsectionpair_p_t"},{0}};
static swig_type_info _swigt__p_hk_dsgridcolumn[] = {{"_p_hk_dsgridcolumn", 0, "hk_dsgridcolumn *", 0},{"_p_hk_dsgridcolumn"},{0}};
static swig_type_info _swigt__p_hk_subform[] = {{"_p_hk_subform", 0, "hk_subform *", 0},{"_p_hk_subform"},{0}};
static swig_type_info _swigt__p_referentialclass[] = {{"_p_referentialclass", 0, "referentialclass *", 0},{"_p_referentialclass"},{0}};
static swig_type_info _swigt__p_listThk_visible_p_t[] = {{"_p_listThk_visible_p_t", 0, "list<hk_visible * > *", 0},{"_p_listThk_visible_p_t"},{0}};
static swig_type_info _swigt__p_file_dialogtype[] = {{"_p_file_dialogtype", 0, "file_dialogtype *", 0},{"_p_file_dialogtype"},{0}};
static swig_type_info _swigt__p_stringvalue_dialogtype[] = {{"_p_stringvalue_dialogtype", 0, "stringvalue_dialogtype *", 0},{"_p_stringvalue_dialogtype"},{0}};
static swig_type_info _swigt__p_progress_dialogtype[] = {{"_p_progress_dialogtype", 0, "progress_dialogtype *", 0},{"_p_progress_dialogtype"},{0}};
static swig_type_info _swigt__p_bool[] = {{"_p_bool", 0, "bool *", 0},{"_p_bool"},{0}};
static swig_type_info _swigt__p_listTreferentialt[] = {{"_p_listTreferentialt", 0, "list<referentialclass > *", 0},{"_p_listTreferentialt"},{0}};
static swig_type_info _swigt__p_hk_interpreter[] = {{"_p_hk_interpreter", 0, "hk_interpreter *", 0},{"_p_hk_interpreter"},{0}};
static swig_type_info _swigt__p_std__vectorThk_reportdata_p_t[] = {{"_p_std__vectorThk_reportdata_p_t", 0, "std::vector<hk_reportdata * > *", 0},{"_p_std__vectorThk_reportdata_p_t"},{0}};
static swig_type_info _swigt__p_hk_tabvisible[] = {{"_p_hk_tabvisible", 0, "hk_tabvisible *", 0},{"_p_hk_tabvisible"},{0}};
static swig_type_info _swigt__p_hk_dsmodevisible[] = {{"_p_hk_dsmodevisible", 0, "hk_dsmodevisible *", 0},{"_p_hk_presentation", _p_hk_presentationTo_p_hk_dsmodevisible},{"_p_hk_reportcsv", _p_hk_reportcsvTo_p_hk_dsmodevisible},{"_p_hk_reporthtml", _p_hk_reporthtmlTo_p_hk_dsmodevisible},{"_p_hk_reportxml", _p_hk_reportxmlTo_p_hk_dsmodevisible},{"_p_hk_dsquery", _p_hk_dsqueryTo_p_hk_dsmodevisible},{"_p_hk_report", _p_hk_reportTo_p_hk_dsmodevisible},{"_p_hk_dsmodevisible"},{"_p_hk_form", _p_hk_formTo_p_hk_dsmodevisible},{"_p_hk_dstable", _p_hk_dstableTo_p_hk_dsmodevisible},{0}};
static swig_type_info _swigt__p_hk_dsdatavisible[] = {{"_p_hk_dsdatavisible", 0, "hk_dsdatavisible *", 0},{"_p_hk_dsimage", _p_hk_dsimageTo_p_hk_dsdatavisible},{"_p_hk_dscombobox", _p_hk_dscomboboxTo_p_hk_dsdatavisible},{"_p_hk_dslineedit", _p_hk_dslineeditTo_p_hk_dsdatavisible},{"_p_hk_dsboolean", _p_hk_dsbooleanTo_p_hk_dsdatavisible},{"_p_hk_dsgridcolumn", _p_hk_dsgridcolumnTo_p_hk_dsdatavisible},{"_p_hk_dsmemo", _p_hk_dsmemoTo_p_hk_dsdatavisible},{"_p_hk_dsdatavisible"},{"_p_hk_dsdate", _p_hk_dsdateTo_p_hk_dsdatavisible},{"_p_hk_reportdata", _p_hk_reportdataTo_p_hk_dsdatavisible},{"_p_hk_reportsection", _p_hk_reportsectionTo_p_hk_dsdatavisible},{0}};
static swig_type_info _swigt__p_hk_dsvisible[] = {{"_p_hk_dsvisible", 0, "hk_dsvisible *", 0},{"_p_hk_report", _p_hk_reportTo_p_hk_dsvisible},{"_p_hk_dsboolean", _p_hk_dsbooleanTo_p_hk_dsvisible},{"_p_hk_reportxml", _p_hk_reportxmlTo_p_hk_dsvisible},{"_p_hk_reportdata", _p_hk_reportdataTo_p_hk_dsvisible},{"_p_hk_dslineedit", _p_hk_dslineeditTo_p_hk_dsvisible},{"_p_hk_dsimage", _p_hk_dsimageTo_p_hk_dsvisible},{"_p_hk_reporthtml", _p_hk_reporthtmlTo_p_hk_dsvisible},{"_p_hk_reportsection", _p_hk_reportsectionTo_p_hk_dsvisible},{"_p_hk_button", _p_hk_buttonTo_p_hk_dsvisible},{"_p_hk_form", _p_hk_formTo_p_hk_dsvisible},{"_p_hk_dsgrid", _p_hk_dsgridTo_p_hk_dsvisible},{"_p_hk_dscombobox", _p_hk_dscomboboxTo_p_hk_dsvisible},{"_p_hk_dsdate", _p_hk_dsdateTo_p_hk_dsvisible},{"_p_hk_dsquery", _p_hk_dsqueryTo_p_hk_dsvisible},{"_p_hk_dstable", _p_hk_dstableTo_p_hk_dsvisible},{"_p_hk_subform", _p_hk_subformTo_p_hk_dsvisible},{"_p_hk_dsmemo", _p_hk_dsmemoTo_p_hk_dsvisible},{"_p_hk_dsvisible"},{"_p_hk_reportcsv", _p_hk_reportcsvTo_p_hk_dsvisible},{"_p_hk_dsmodevisible", _p_hk_dsmodevisibleTo_p_hk_dsvisible},{"_p_hk_presentation", _p_hk_presentationTo_p_hk_dsvisible},{"_p_hk_dsdatavisible", _p_hk_dsdatavisibleTo_p_hk_dsvisible},{"_p_hk_dsgridcolumn", _p_hk_dsgridcolumnTo_p_hk_dsvisible},{"_p_hk_importcsv", _p_hk_importcsvTo_p_hk_dsvisible},{0}};
static swig_type_info _swigt__p_hk_visible[] = {{"_p_hk_visible", 0, "hk_visible *", 0},{"_p_hk_dsboolean", _p_hk_dsbooleanTo_p_hk_visible},{"_p_hk_report", _p_hk_reportTo_p_hk_visible},{"_p_hk_reportxml", _p_hk_reportxmlTo_p_hk_visible},{"_p_hk_reportdata", _p_hk_reportdataTo_p_hk_visible},{"_p_hk_dslineedit", _p_hk_dslineeditTo_p_hk_visible},{"_p_hk_dsimage", _p_hk_dsimageTo_p_hk_visible},{"_p_hk_reporthtml", _p_hk_reporthtmlTo_p_hk_visible},{"_p_hk_reportsection", _p_hk_reportsectionTo_p_hk_visible},{"_p_hk_label", _p_hk_labelTo_p_hk_visible},{"_p_hk_button", _p_hk_buttonTo_p_hk_visible},{"_p_hk_form", _p_hk_formTo_p_hk_visible},{"_p_hk_dsgrid", _p_hk_dsgridTo_p_hk_visible},{"_p_hk_dscombobox", _p_hk_dscomboboxTo_p_hk_visible},{"_p_hk_dsdate", _p_hk_dsdateTo_p_hk_visible},{"_p_hk_dsquery", _p_hk_dsqueryTo_p_hk_visible},{"_p_hk_dstable", _p_hk_dstableTo_p_hk_visible},{"_p_hk_subform", _p_hk_subformTo_p_hk_visible},{"_p_hk_dsmemo", _p_hk_dsmemoTo_p_hk_visible},{"_p_hk_visible"},{"_p_hk_reportcsv", _p_hk_reportcsvTo_p_hk_visible},{"_p_hk_dsmodevisible", _p_hk_dsmodevisibleTo_p_hk_visible},{"_p_hk_presentation", _p_hk_presentationTo_p_hk_visible},{"_p_hk_dsdatavisible", _p_hk_dsdatavisibleTo_p_hk_visible},{"_p_hk_dsgridcolumn", _p_hk_dsgridcolumnTo_p_hk_visible},{"_p_hk_dsvisible", _p_hk_dsvisibleTo_p_hk_visible},{"_p_hk_importcsv", _p_hk_importcsvTo_p_hk_visible},{0}};
static swig_type_info _swigt__p_hk_key[] = {{"_p_hk_key", 0, "hk_key *", 0},{"_p_hk_key"},{0}};
static swig_type_info _swigt__p_section_replacefunctiontype[] = {{"_p_section_replacefunctiontype", 0, "section_replacefunctiontype *", 0},{"_p_section_replacefunctiontype"},{0}};
static swig_type_info _swigt__p_recodefunctiontype[] = {{"_p_recodefunctiontype", 0, "recodefunctiontype *", 0},{"_p_recodefunctiontype"},{0}};
static swig_type_info _swigt__p_data_configurefunctiontype[] = {{"_p_data_configurefunctiontype", 0, "data_configurefunctiontype *", 0},{"_p_data_configurefunctiontype"},{0}};
static swig_type_info _swigt__p_data_replacefunctiontype[] = {{"_p_data_replacefunctiontype", 0, "data_replacefunctiontype *", 0},{"_p_data_replacefunctiontype"},{0}};
static swig_type_info _swigt__p_hk_interpreter__enum_action[] = {{"_p_hk_interpreter__enum_action", 0, "hk_interpreter::enum_action *", 0},{"_p_hk_interpreter__enum_action"},{0}};
static swig_type_info _swigt__p_hk_reportxml[] = {{"_p_hk_reportxml", 0, "hk_reportxml *", 0},{"_p_hk_reportxml"},{0}};
static swig_type_info _swigt__p_struct_countnumbers[] = {{"_p_struct_countnumbers", 0, "struct_countnumbers *", 0},{"_p_struct_countnumbers"},{0}};
static swig_type_info _swigt__p_hk_label[] = {{"_p_hk_label", 0, "hk_label *", 0},{"_p_hk_label"},{0}};
static swig_type_info _swigt__p_reportdatacounttype[] = {{"_p_reportdatacounttype", 0, "reportdatacounttype *", 0},{"_p_reportdatacounttype"},{0}};
static swig_type_info _swigt__p_reportsectioncounttype[] = {{"_p_reportsectioncounttype", 0, "reportsectioncounttype *", 0},{"_p_reportsectioncounttype"},{0}};
static swig_type_info _swigt__p_listThk_datasource_p_t[] = {{"_p_listThk_datasource_p_t", 0, "list<hk_datasource * > *", 0},{"_p_listThk_datasource_p_t"},{0}};
static swig_type_info _swigt__p_xmlNodePtr[] = {{"_p_xmlNodePtr", 0, "xmlNodePtr *", 0},{"_p_xmlNodePtr"},{0}};
static swig_type_info _swigt__p_std__vectorThk_dsgridcolumn_t[] = {{"_p_std__vectorThk_dsgridcolumn_t", 0, "std::vector<hk_dsgridcolumn > *", 0},{"_p_std__vectorThk_dsgridcolumn_t"},{0}};
static swig_type_info _swigt__p_hk_reportsectionpair[] = {{"_p_hk_reportsectionpair", 0, "hk_reportsectionpair *", 0},{"_p_hk_reportsectionpair"},{0}};
static swig_type_info _swigt__p_hk_dscombobox[] = {{"_p_hk_dscombobox", 0, "hk_dscombobox *", 0},{"_p_hk_dscombobox"},{0}};
static swig_type_info _swigt__p_hk_font[] = {{"_p_hk_font", 0, "hk_font *", 0},{"_p_hk_font"},{0}};
static swig_type_info _swigt__p_hk_column[] = {{"_p_hk_column", 0, "hk_column *", 0},{"_p_hk_column"},{0}};
static swig_type_info _swigt__p_ifstream[] = {{"_p_ifstream", 0, "ifstream *", 0},{"_p_ifstream"},{0}};
static swig_type_info _swigt__p_hk_report[] = {{"_p_hk_report", 0, "hk_report *", 0},{"_p_hk_reportcsv", _p_hk_reportcsvTo_p_hk_report},{"_p_hk_reporthtml", _p_hk_reporthtmlTo_p_hk_report},{"_p_hk_reportxml", _p_hk_reportxmlTo_p_hk_report},{"_p_hk_report"},{0}};
static swig_type_info _swigt__p_hk_dsquery[] = {{"_p_hk_dsquery", 0, "hk_dsquery *", 0},{"_p_hk_dsquery"},{0}};
static swig_type_info _swigt__p_longnumber[] = {{"_p_longnumber", 0, "longnumber *", 0},{"_p_longnumber"},{0}};
static swig_type_info _swigt__p_number[] = {{"_p_number", 0, "number *", 0},{"_p_number"},{0}};
static swig_type_info _swigt__p_long[] = {{"_p_long", 0, "long *", 0},{"_p_long"},{0}};
static swig_type_info _swigt__p_hk_dstable[] = {{"_p_hk_dstable", 0, "hk_dstable *", 0},{"_p_hk_dstable"},{0}};
static swig_type_info _swigt__p_dependingclass[] = {{"_p_dependingclass", 0, "dependingclass *", 0},{"_p_dependingclass"},{0}};
static swig_type_info _swigt__p_hk_connection[] = {{"_p_hk_connection", 0, "hk_connection *", 0},{"_p_hk_connection"},{0}};
static swig_type_info _swigt__p_hk_reporthtml[] = {{"_p_hk_reporthtml", 0, "hk_reporthtml *", 0},{"_p_hk_reporthtml"},{0}};
static swig_type_info _swigt__p_hk_qbe[] = {{"_p_hk_qbe", 0, "hk_qbe *", 0},{"_p_hk_qbe"},{0}};
static swig_type_info _swigt__p_hk_dsboolean[] = {{"_p_hk_dsboolean", 0, "hk_dsboolean *", 0},{"_p_hk_dsboolean"},{0}};
static swig_type_info _swigt__p_hk_data[] = {{"_p_hk_data", 0, "hk_data *", 0},{"_p_hk_datasource", _p_hk_datasourceTo_p_hk_data},{"_p_hk_actionquery", _p_hk_actionqueryTo_p_hk_data},{"_p_hk_data"},{0}};
static swig_type_info _swigt__p_listThk_string_t[] = {{"_p_listThk_string_t", 0, "list<hk_string > *", 0},{"_p_listThk_string_t"},{0}};
static swig_type_info _swigt__p_hk_button[] = {{"_p_hk_button", 0, "hk_button *", 0},{"_p_hk_button"},{0}};
static swig_type_info _swigt__p_hk_actionquery[] = {{"_p_hk_actionquery", 0, "hk_actionquery *", 0},{"_p_hk_actionquery"},{0}};
static swig_type_info _swigt__p_std__vectorThk_string_t[] = {{"_p_std__vectorThk_string_t", 0, "std::vector<hk_string > *", 0},{"_p_std__vectorThk_string_t"},{0}};
static swig_type_info _swigt__p_char[] = {{"_p_char", 0, "char *", 0},{"_p_char"},{0}};
static swig_type_info _swigt__p_struct_raw_data[] = {{"_p_struct_raw_data", 0, "struct_raw_data *", 0},{"_p_struct_raw_data"},{0}};
static swig_type_info _swigt__p_HK_CHARSIZE[] = {{"_p_HK_CHARSIZE", 0, "HK_CHARSIZE *", 0},{"_p_HK_CHARSIZE"},{0}};
static swig_type_info _swigt__p_hk_importcsv[] = {{"_p_hk_importcsv", 0, "hk_importcsv *", 0},{"_p_hk_importcsv"},{0}};
static swig_type_info _swigt__p_hk_reportcsv[] = {{"_p_hk_reportcsv", 0, "hk_reportcsv *", 0},{"_p_hk_reportcsv"},{0}};
static swig_type_info _swigt__p_report_configurefunction[] = {{"_p_report_configurefunction", 0, "report_configurefunction *", 0},{"_p_report_configurefunction"},{0}};
static swig_type_info _swigt__p_reporttypefunction[] = {{"_p_reporttypefunction", 0, "reporttypefunction *", 0},{"_p_reporttypefunction"},{0}};
static swig_type_info _swigt__p_colstruct[] = {{"_p_colstruct", 0, "colstruct *", 0},{"_p_colstruct"},{0}};
static swig_type_info _swigt__p_hk_drivermanager[] = {{"_p_hk_drivermanager", 0, "hk_drivermanager *", 0},{"_p_hk_drivermanager"},{0}};
static swig_type_info _swigt__p_listTint_t[] = {{"_p_listTint_t", 0, "list<int > *", 0},{"_p_listTint_t"},{0}};
static swig_type_info _swigt__p_hk_dsdate[] = {{"_p_hk_dsdate", 0, "hk_dsdate *", 0},{"_p_hk_dsdate"},{0}};
static swig_type_info _swigt__p_hk_dsimage[] = {{"_p_hk_dsimage", 0, "hk_dsimage *", 0},{"_p_hk_dsimage"},{0}};
static swig_type_info _swigt__p_hk_class[] = {{"_p_hk_class", 0, "hk_class *", 0},{"_p_hk_dsmemo", _p_hk_dsmemoTo_p_hk_class},{"_p_hk_class"},{"_p_hk_reportsection", _p_hk_reportsectionTo_p_hk_class},{"_p_hk_colour", _p_hk_colourTo_p_hk_class},{"_p_hk_column", _p_hk_columnTo_p_hk_class},{"_p_hk_report", _p_hk_reportTo_p_hk_class},{"_p_hk_dsquery", _p_hk_dsqueryTo_p_hk_class},{"_p_hk_actionquery", _p_hk_actionqueryTo_p_hk_class},{"_p_hk_reportsectionpair", _p_hk_reportsectionpairTo_p_hk_class},{"_p_hk_dsgrid", _p_hk_dsgridTo_p_hk_class},{"_p_hk_dsimage", _p_hk_dsimageTo_p_hk_class},{"_p_hk_connection", _p_hk_connectionTo_p_hk_class},{"_p_hk_visible", _p_hk_visibleTo_p_hk_class},{"_p_hk_dsmodevisible", _p_hk_dsmodevisibleTo_p_hk_class},{"_p_hk_dsvisible", _p_hk_dsvisibleTo_p_hk_class},{"_p_hk_dsgridcolumn", _p_hk_dsgridcolumnTo_p_hk_class},{"_p_hk_dsdatavisible", _p_hk_dsdatavisibleTo_p_hk_class},{"_p_hk_datasource", _p_hk_datasourceTo_p_hk_class},{"_p_hk_url", _p_hk_urlTo_p_hk_class},{"_p_hk_reporthtml", _p_hk_reporthtmlTo_p_hk_class},{"_p_hk_reportxml", _p_hk_reportxmlTo_p_hk_class},{"_p_hk_dsdate", _p_hk_dsdateTo_p_hk_class},{"_p_hk_label", _p_hk_labelTo_p_hk_class},{"_p_hk_mimetype", _p_hk_mimetypeTo_p_hk_class},{"_p_hk_data", _p_hk_dataTo_p_hk_class},{"_p_hk_presentation", _p_hk_presentationTo_p_hk_class},{"_p_hk_dsboolean", _p_hk_dsbooleanTo_p_hk_class},{"_p_hk_font", _p_hk_fontTo_p_hk_class},{"_p_hk_dstable", _p_hk_dstableTo_p_hk_class},{"_p_hk_subform", _p_hk_subformTo_p_hk_class},{"_p_hk_importcsv", _p_hk_importcsvTo_p_hk_class},{"_p_hk_reportcsv", _p_hk_reportcsvTo_p_hk_class},{"_p_hk_key", _p_hk_keyTo_p_hk_class},{"_p_hk_reportdata", _p_hk_reportdataTo_p_hk_class},{"_p_hk_dscombobox", _p_hk_dscomboboxTo_p_hk_class},{"_p_hk_button", _p_hk_buttonTo_p_hk_class},{"_p_hk_form", _p_hk_formTo_p_hk_class},{"_p_hk_dslineedit", _p_hk_dslineeditTo_p_hk_class},{"_p_hk_datetime", _p_hk_datetimeTo_p_hk_class},{"_p_hk_database", _p_hk_databaseTo_p_hk_class},{"_p_hk_drivermanager", _p_hk_drivermanagerTo_p_hk_class},{0}};
static swig_type_info _swigt__p_ostream[] = {{"_p_ostream", 0, "ostream *", 0},{"_p_ostream"},{0}};
static swig_type_info _swigt__p_hk_datasource[] = {{"_p_hk_datasource", 0, "hk_datasource *", 0},{"_p_hk_datasource"},{0}};
static swig_type_info _swigt__p_hk_string[] = {{"_p_hk_string", 0, "hk_string *", 0},{"_p_hk_string"},{0}};
static swig_type_info _swigt__p_hk_reportdata[] = {{"_p_hk_reportdata", 0, "hk_reportdata *", 0},{"_p_hk_reportdata"},{0}};
static swig_type_info _swigt__p_listTdependingt[] = {{"_p_listTdependingt", 0, "list<dependingclass > *", 0},{"_p_listTdependingt"},{0}};
static swig_type_info _swigt__p_hk_datetime[] = {{"_p_hk_datetime", 0, "hk_datetime *", 0},{"_p_hk_datetime"},{0}};
static swig_type_info _swigt__p_hk_reportsection[] = {{"_p_hk_reportsection", 0, "hk_reportsection *", 0},{"_p_hk_reportsection"},{0}};
static swig_type_info _swigt__p_hk_dsrowselector[] = {{"_p_hk_dsrowselector", 0, "hk_dsrowselector *", 0},{"_p_hk_dsrowselector"},{0}};
static swig_type_info _swigt__p_hk_dsmemo[] = {{"_p_hk_dsmemo", 0, "hk_dsmemo *", 0},{"_p_hk_dsmemo"},{0}};
static swig_type_info _swigt__p_hk_encodingtab[] = {{"_p_hk_encodingtab", 0, "hk_encodingtab *", 0},{"_p_hk_encodingtab"},{0}};
static swig_type_info _swigt__p_hk_colour[] = {{"_p_hk_colour", 0, "hk_colour *", 0},{"_p_hk_colour"},{0}};
static swig_type_info _swigt__p_hk_form[] = {{"_p_hk_form", 0, "hk_form *", 0},{"_p_hk_form"},{0}};
static swig_type_info _swigt__p_hk_dsgrid[] = {{"_p_hk_dsgrid", 0, "hk_dsgrid *", 0},{"_p_hk_dsgrid"},{0}};
static swig_type_info _swigt__p_hk_mimetype[] = {{"_p_hk_mimetype", 0, "hk_mimetype *", 0},{"_p_hk_mimetype"},{0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_hk_dslineedit, 
_swigt__p_hk_column__enum_columntype, 
_swigt__p_hk_url, 
_swigt__p_hk_presentation, 
_swigt__p_hk_database, 
_swigt__p_reportsectionautomaticcreatedatatype, 
_swigt__p_psimagedatatype, 
_swigt__p_std__vectorThk_reportsectionpair_p_t, 
_swigt__p_hk_dsgridcolumn, 
_swigt__p_hk_subform, 
_swigt__p_referentialclass, 
_swigt__p_listThk_visible_p_t, 
_swigt__p_file_dialogtype, 
_swigt__p_stringvalue_dialogtype, 
_swigt__p_progress_dialogtype, 
_swigt__p_bool, 
_swigt__p_listTreferentialt, 
_swigt__p_hk_interpreter, 
_swigt__p_std__vectorThk_reportdata_p_t, 
_swigt__p_hk_tabvisible, 
_swigt__p_hk_dsmodevisible, 
_swigt__p_hk_dsdatavisible, 
_swigt__p_hk_dsvisible, 
_swigt__p_hk_visible, 
_swigt__p_hk_key, 
_swigt__p_section_replacefunctiontype, 
_swigt__p_recodefunctiontype, 
_swigt__p_data_configurefunctiontype, 
_swigt__p_data_replacefunctiontype, 
_swigt__p_hk_interpreter__enum_action, 
_swigt__p_hk_reportxml, 
_swigt__p_struct_countnumbers, 
_swigt__p_hk_label, 
_swigt__p_reportdatacounttype, 
_swigt__p_reportsectioncounttype, 
_swigt__p_listThk_datasource_p_t, 
_swigt__p_xmlNodePtr, 
_swigt__p_std__vectorThk_dsgridcolumn_t, 
_swigt__p_hk_reportsectionpair, 
_swigt__p_hk_dscombobox, 
_swigt__p_hk_font, 
_swigt__p_hk_column, 
_swigt__p_ifstream, 
_swigt__p_hk_report, 
_swigt__p_hk_dsquery, 
_swigt__p_longnumber, 
_swigt__p_number, 
_swigt__p_long, 
_swigt__p_hk_dstable, 
_swigt__p_dependingclass, 
_swigt__p_hk_connection, 
_swigt__p_hk_reporthtml, 
_swigt__p_hk_qbe, 
_swigt__p_hk_dsboolean, 
_swigt__p_hk_data, 
_swigt__p_listThk_string_t, 
_swigt__p_hk_button, 
_swigt__p_hk_actionquery, 
_swigt__p_std__vectorThk_string_t, 
_swigt__p_char, 
_swigt__p_struct_raw_data, 
_swigt__p_HK_CHARSIZE, 
_swigt__p_hk_importcsv, 
_swigt__p_hk_reportcsv, 
_swigt__p_report_configurefunction, 
_swigt__p_reporttypefunction, 
_swigt__p_colstruct, 
_swigt__p_hk_drivermanager, 
_swigt__p_listTint_t, 
_swigt__p_hk_dsdate, 
_swigt__p_hk_dsimage, 
_swigt__p_hk_class, 
_swigt__p_ostream, 
_swigt__p_hk_datasource, 
_swigt__p_hk_string, 
_swigt__p_hk_reportdata, 
_swigt__p_listTdependingt, 
_swigt__p_hk_datetime, 
_swigt__p_hk_reportsection, 
_swigt__p_hk_dsrowselector, 
_swigt__p_hk_dsmemo, 
_swigt__p_hk_encodingtab, 
_swigt__p_hk_colour, 
_swigt__p_hk_form, 
_swigt__p_hk_dsgrid, 
_swigt__p_hk_mimetype, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{ SWIG_PY_INT,     (char *)"ft_table", (long) ft_table, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"ft_query", (long) ft_query, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"ft_form", (long) ft_form, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"ft_report", (long) ft_report, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"ft_module", (long) ft_module, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"ft_view", (long) ft_view, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"ft_referentialintegrity", (long) ft_referentialintegrity, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"lt_table", (long) lt_table, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"lt_query", (long) lt_query, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"lt_form", (long) lt_form, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"lt_report", (long) lt_report, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"lt_index", (long) lt_index, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"lt_module", (long) lt_module, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"lt_view", (long) lt_view, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"dt_table", (long) dt_table, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"dt_query", (long) dt_query, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"dt_view", (long) dt_view, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"ot_database", (long) ot_database, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"ot_table", (long) ot_table, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"ot_query", (long) ot_query, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"ot_form", (long) ot_form, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"ot_report", (long) ot_report, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"ot_module", (long) ot_module, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"ot_view", (long) ot_view, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"file_open", (long) file_open, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"file_save", (long) file_save, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_class_noninteractive", (long) hk_class::noninteractive, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_class_interactive", (long) hk_class::interactive, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_SUPPORTS_AUTOINCCOLUMN", (long) hk_connection::SUPPORTS_AUTOINCCOLUMN, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_SUPPORTS_BOOLCOLUMN", (long) hk_connection::SUPPORTS_BOOLCOLUMN, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_SUPPORTS_DATECOLUMN", (long) hk_connection::SUPPORTS_DATECOLUMN, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_SUPPORTS_TIMECOLUMN", (long) hk_connection::SUPPORTS_TIMECOLUMN, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_SUPPORTS_DATETIMECOLUMN", (long) hk_connection::SUPPORTS_DATETIMECOLUMN, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_SUPPORTS_BINARYCOLUMN", (long) hk_connection::SUPPORTS_BINARYCOLUMN, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_SUPPORTS_MEMOCOLUMN", (long) hk_connection::SUPPORTS_MEMOCOLUMN, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_SUPPORTS_TIMESTAMPCOLUMN", (long) hk_connection::SUPPORTS_TIMESTAMPCOLUMN, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_SUPPORTS_TEXTCOLUMN", (long) hk_connection::SUPPORTS_TEXTCOLUMN, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_SUPPORTS_INTEGERCOLUMN", (long) hk_connection::SUPPORTS_INTEGERCOLUMN, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_SUPPORTS_SMALLINTEGERCOLUMN", (long) hk_connection::SUPPORTS_SMALLINTEGERCOLUMN, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_SUPPORTS_FLOATINGCOLUMN", (long) hk_connection::SUPPORTS_FLOATINGCOLUMN, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_SUPPORTS_SMALLFLOATINGCOLUMN", (long) hk_connection::SUPPORTS_SMALLFLOATINGCOLUMN, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_SUPPORTS_PROPRIETARYCOLUMN", (long) hk_connection::SUPPORTS_PROPRIETARYCOLUMN, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_SUPPORTS_SQL", (long) hk_connection::SUPPORTS_SQL, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_SUPPORTS_TRANSACTIONS", (long) hk_connection::SUPPORTS_TRANSACTIONS, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_SUPPORTS_REFERENTIALINTEGRITY", (long) hk_connection::SUPPORTS_REFERENTIALINTEGRITY, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_SUPPORTS_NEW_DATABASE", (long) hk_connection::SUPPORTS_NEW_DATABASE, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_SUPPORTS_DELETE_DATABASE", (long) hk_connection::SUPPORTS_DELETE_DATABASE, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_SUPPORTS_NEW_TABLE", (long) hk_connection::SUPPORTS_NEW_TABLE, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_SUPPORTS_ALTER_TABLE", (long) hk_connection::SUPPORTS_ALTER_TABLE, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_SUPPORTS_DELETE_TABLE", (long) hk_connection::SUPPORTS_DELETE_TABLE, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_SUPPORTS_CREATE_INDEX", (long) hk_connection::SUPPORTS_CREATE_INDEX, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_SUPPORTS_DELETE_INDEX", (long) hk_connection::SUPPORTS_DELETE_INDEX, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_SUPPORTS_CHANGE_PASSWORD", (long) hk_connection::SUPPORTS_CHANGE_PASSWORD, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_SUPPORTS_RENAME_DATABASE", (long) hk_connection::SUPPORTS_RENAME_DATABASE, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_SUPPORTS_RENAME_TABLE", (long) hk_connection::SUPPORTS_RENAME_TABLE, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_SUPPORTS_VIEWS", (long) hk_connection::SUPPORTS_VIEWS, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_SUPPORTS_NEW_VIEW", (long) hk_connection::SUPPORTS_NEW_VIEW, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_SUPPORTS_ALTER_VIEW", (long) hk_connection::SUPPORTS_ALTER_VIEW, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_SUPPORTS_DELETE_VIEW", (long) hk_connection::SUPPORTS_DELETE_VIEW, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_SUPPORTS_ADD_COLUMN", (long) hk_connection::SUPPORTS_ADD_COLUMN, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_SUPPORTS_DELETE_COLUMN", (long) hk_connection::SUPPORTS_DELETE_COLUMN, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_SUPPORTS_CHANGE_COLUMNTYPE", (long) hk_connection::SUPPORTS_CHANGE_COLUMNTYPE, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_SUPPORTS_CHANGE_COLUMNNAME", (long) hk_connection::SUPPORTS_CHANGE_COLUMNNAME, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_SUPPORTS_ALTER_PRIMARY_KEY", (long) hk_connection::SUPPORTS_ALTER_PRIMARY_KEY, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_SUPPORTS_ALTER_NOT_NULL", (long) hk_connection::SUPPORTS_ALTER_NOT_NULL, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_SUPPORTS_SQL_GROUP_BY", (long) hk_connection::SUPPORTS_SQL_GROUP_BY, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_SUPPORTS_SQL_ORDER_BY", (long) hk_connection::SUPPORTS_SQL_ORDER_BY, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_SUPPORTS_SQL_HAVING", (long) hk_connection::SUPPORTS_SQL_HAVING, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_SUPPORTS_SQL_WHERE", (long) hk_connection::SUPPORTS_SQL_WHERE, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_SUPPORTS_SQL_ALIAS", (long) hk_connection::SUPPORTS_SQL_ALIAS, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_SUPPORTS_SQL_SUBSELECTS", (long) hk_connection::SUPPORTS_SQL_SUBSELECTS, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_SUPPORTS_SQL_JOINS", (long) hk_connection::SUPPORTS_SQL_JOINS, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_SUPPORTS_SQL_UNION", (long) hk_connection::SUPPORTS_SQL_UNION, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_SUPPORTS_LOCAL_FILEFORMAT", (long) hk_connection::SUPPORTS_LOCAL_FILEFORMAT, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_SUPPORTS_NONALPHANUM_FIELDNAMES", (long) hk_connection::SUPPORTS_NONALPHANUM_FIELDNAMES, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_SUPPORTS_NONASCII_FIELDNAMES", (long) hk_connection::SUPPORTS_NONASCII_FIELDNAMES, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_SUPPORTS_SPACE_FIELDNAMES", (long) hk_connection::SUPPORTS_SPACE_FIELDNAMES, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_NEEDS_LOGIN", (long) hk_connection::NEEDS_LOGIN, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_NEEDS_HOST", (long) hk_connection::NEEDS_HOST, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_NEEDS_USERNAME", (long) hk_connection::NEEDS_USERNAME, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_NEEDS_PASSWORD", (long) hk_connection::NEEDS_PASSWORD, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_NEEDS_SQLDELIMITER", (long) hk_connection::NEEDS_SQLDELIMITER, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_NEEDS_PORT", (long) hk_connection::NEEDS_PORT, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_NEEDS_DATABASENAME", (long) hk_connection::NEEDS_DATABASENAME, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_NEEDS_BOOLEANEMULATION", (long) hk_connection::NEEDS_BOOLEANEMULATION, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_NEEDS_NULL_TERMINATED_SQL", (long) hk_connection::NEEDS_NULL_TERMINATED_SQL, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_connection_NEEDS_TABLE_ALIAS_AS", (long) hk_connection::NEEDS_TABLE_ALIAS_AS, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_database_central", (long) hk_database::central, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_database_local", (long) hk_database::local, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_data_ds_table", (long) hk_data::ds_table, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_data_ds_query", (long) hk_data::ds_query, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_data_ds_actionquery", (long) hk_data::ds_actionquery, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_data_ds_view", (long) hk_data::ds_view, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_data_ds_unknown", (long) hk_data::ds_unknown, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_datasource_mode_normal", (long) hk_datasource::mode_normal, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_datasource_mode_createtable", (long) hk_datasource::mode_createtable, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_datasource_mode_altertable", (long) hk_datasource::mode_altertable, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_datasource_mode_disabled", (long) hk_datasource::mode_disabled, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_datasource_mode_insertrow", (long) hk_datasource::mode_insertrow, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_datasource_mode_deleterow", (long) hk_datasource::mode_deleterow, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_datasource_mode_unknown", (long) hk_datasource::mode_unknown, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_datasource_standard", (long) hk_datasource::standard, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_datasource_batchread", (long) hk_datasource::batchread, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_datasource_batchwrite", (long) hk_datasource::batchwrite, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_datasource_depending_nohandle", (long) hk_datasource::depending_nohandle, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_datasource_depending_standard", (long) hk_datasource::depending_standard, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_datasource_depending_change", (long) hk_datasource::depending_change, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_datasource_depending_delete", (long) hk_datasource::depending_delete, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_datasource_depending_changedelete", (long) hk_datasource::depending_changedelete, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_column_textcolumn", (long) hk_column::textcolumn, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_column_auto_inccolumn", (long) hk_column::auto_inccolumn, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_column_smallintegercolumn", (long) hk_column::smallintegercolumn, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_column_integercolumn", (long) hk_column::integercolumn, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_column_smallfloatingcolumn", (long) hk_column::smallfloatingcolumn, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_column_floatingcolumn", (long) hk_column::floatingcolumn, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_column_datecolumn", (long) hk_column::datecolumn, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_column_datetimecolumn", (long) hk_column::datetimecolumn, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_column_timecolumn", (long) hk_column::timecolumn, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_column_timestampcolumn", (long) hk_column::timestampcolumn, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_column_binarycolumn", (long) hk_column::binarycolumn, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_column_memocolumn", (long) hk_column::memocolumn, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_column_boolcolumn", (long) hk_column::boolcolumn, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_column_othercolumn", (long) hk_column::othercolumn, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_visible_textlabel", (long) hk_visible::textlabel, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_visible_button", (long) hk_visible::button, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_visible_rowselector", (long) hk_visible::rowselector, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_visible_boolean", (long) hk_visible::boolean, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_visible_lineedit", (long) hk_visible::lineedit, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_visible_memo", (long) hk_visible::memo, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_visible_combobox", (long) hk_visible::combobox, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_visible_grid", (long) hk_visible::grid, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_visible_form", (long) hk_visible::form, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_visible_report", (long) hk_visible::report, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_visible_reportsection", (long) hk_visible::reportsection, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_visible_reportdata", (long) hk_visible::reportdata, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_visible_query", (long) hk_visible::query, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_visible_subform", (long) hk_visible::subform, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_visible_image", (long) hk_visible::image, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_visible_date", (long) hk_visible::date, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_visible_tabvisible", (long) hk_visible::tabvisible, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_visible_other", (long) hk_visible::other, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_visible_alignleft", (long) hk_visible::alignleft, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_visible_alignright", (long) hk_visible::alignright, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_visible_aligncenter", (long) hk_visible::aligncenter, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_visible_aligndefault", (long) hk_visible::aligndefault, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Escape", (long) hk_key::key_Escape, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Tab", (long) hk_key::key_Tab, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Backtab", (long) hk_key::key_Backtab, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_BackTab", (long) hk_key::key_BackTab, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Backspace", (long) hk_key::key_Backspace, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_BackSpace", (long) hk_key::key_BackSpace, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Return", (long) hk_key::key_Return, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Enter", (long) hk_key::key_Enter, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Insert", (long) hk_key::key_Insert, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Delete", (long) hk_key::key_Delete, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Pause", (long) hk_key::key_Pause, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Print", (long) hk_key::key_Print, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_SysReq", (long) hk_key::key_SysReq, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Clear", (long) hk_key::key_Clear, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Home", (long) hk_key::key_Home, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_End", (long) hk_key::key_End, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Left", (long) hk_key::key_Left, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Up", (long) hk_key::key_Up, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Right", (long) hk_key::key_Right, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Down", (long) hk_key::key_Down, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Prior", (long) hk_key::key_Prior, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_PageUp", (long) hk_key::key_PageUp, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Next", (long) hk_key::key_Next, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_PageDown", (long) hk_key::key_PageDown, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Shift", (long) hk_key::key_Shift, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Control", (long) hk_key::key_Control, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Meta", (long) hk_key::key_Meta, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Alt", (long) hk_key::key_Alt, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_CapsLock", (long) hk_key::key_CapsLock, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_NumLock", (long) hk_key::key_NumLock, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_ScrollLock", (long) hk_key::key_ScrollLock, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_F1", (long) hk_key::key_F1, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_F2", (long) hk_key::key_F2, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_F3", (long) hk_key::key_F3, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_F4", (long) hk_key::key_F4, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_F5", (long) hk_key::key_F5, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_F6", (long) hk_key::key_F6, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_F7", (long) hk_key::key_F7, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_F8", (long) hk_key::key_F8, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_F9", (long) hk_key::key_F9, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_F10", (long) hk_key::key_F10, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_F11", (long) hk_key::key_F11, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_F12", (long) hk_key::key_F12, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_F13", (long) hk_key::key_F13, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_F14", (long) hk_key::key_F14, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_F15", (long) hk_key::key_F15, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_F16", (long) hk_key::key_F16, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_F17", (long) hk_key::key_F17, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_F18", (long) hk_key::key_F18, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_F19", (long) hk_key::key_F19, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_F20", (long) hk_key::key_F20, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_F21", (long) hk_key::key_F21, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_F22", (long) hk_key::key_F22, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_F23", (long) hk_key::key_F23, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_F24", (long) hk_key::key_F24, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_F25", (long) hk_key::key_F25, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_F26", (long) hk_key::key_F26, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_F27", (long) hk_key::key_F27, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_F28", (long) hk_key::key_F28, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_F29", (long) hk_key::key_F29, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_F30", (long) hk_key::key_F30, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_F31", (long) hk_key::key_F31, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_F32", (long) hk_key::key_F32, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_F33", (long) hk_key::key_F33, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_F34", (long) hk_key::key_F34, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_F35", (long) hk_key::key_F35, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Super_L", (long) hk_key::key_Super_L, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Super_R", (long) hk_key::key_Super_R, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Menu", (long) hk_key::key_Menu, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Hyper_L", (long) hk_key::key_Hyper_L, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Hyper_R", (long) hk_key::key_Hyper_R, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Help", (long) hk_key::key_Help, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Direction_L", (long) hk_key::key_Direction_L, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Direction_R", (long) hk_key::key_Direction_R, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Multi_key", (long) hk_key::key_Multi_key, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Codeinput", (long) hk_key::key_Codeinput, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_SingleCandidate", (long) hk_key::key_SingleCandidate, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_MultipleCandidate", (long) hk_key::key_MultipleCandidate, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_PreviousCandidate", (long) hk_key::key_PreviousCandidate, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Mode_switch", (long) hk_key::key_Mode_switch, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Kanji", (long) hk_key::key_Kanji, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Muhenkan", (long) hk_key::key_Muhenkan, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Henkan", (long) hk_key::key_Henkan, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Romaji", (long) hk_key::key_Romaji, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Hiragana", (long) hk_key::key_Hiragana, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Katakana", (long) hk_key::key_Katakana, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Hiragana_Katakana", (long) hk_key::key_Hiragana_Katakana, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Zenkaku", (long) hk_key::key_Zenkaku, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Hankaku", (long) hk_key::key_Hankaku, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Zenkaku_Hankaku", (long) hk_key::key_Zenkaku_Hankaku, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Touroku", (long) hk_key::key_Touroku, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Massyo", (long) hk_key::key_Massyo, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Kana_Lock", (long) hk_key::key_Kana_Lock, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Kana_Shift", (long) hk_key::key_Kana_Shift, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Eisu_Shift", (long) hk_key::key_Eisu_Shift, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Eisu_toggle", (long) hk_key::key_Eisu_toggle, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Hangul", (long) hk_key::key_Hangul, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Hangul_Start", (long) hk_key::key_Hangul_Start, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Hangul_End", (long) hk_key::key_Hangul_End, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Hangul_Hanja", (long) hk_key::key_Hangul_Hanja, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Hangul_Jamo", (long) hk_key::key_Hangul_Jamo, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Hangul_Romaja", (long) hk_key::key_Hangul_Romaja, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Hangul_Codeinput", (long) hk_key::key_Hangul_Codeinput, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Hangul_Jeonja", (long) hk_key::key_Hangul_Jeonja, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Hangul_Banja", (long) hk_key::key_Hangul_Banja, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Hangul_PreHanja", (long) hk_key::key_Hangul_PreHanja, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Hangul_PostHanja", (long) hk_key::key_Hangul_PostHanja, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Hangul_SingleCandidate", (long) hk_key::key_Hangul_SingleCandidate, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Hangul_MultipleCandidate", (long) hk_key::key_Hangul_MultipleCandidate, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Hangul_PreviousCandidate", (long) hk_key::key_Hangul_PreviousCandidate, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Hangul_Special", (long) hk_key::key_Hangul_Special, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Space", (long) hk_key::key_Space, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Any", (long) hk_key::key_Any, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Exclam", (long) hk_key::key_Exclam, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_QuoteDbl", (long) hk_key::key_QuoteDbl, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_NumberSign", (long) hk_key::key_NumberSign, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Dollar", (long) hk_key::key_Dollar, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Percent", (long) hk_key::key_Percent, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Ampersand", (long) hk_key::key_Ampersand, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Apostrophe", (long) hk_key::key_Apostrophe, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_ParenLeft", (long) hk_key::key_ParenLeft, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_ParenRight", (long) hk_key::key_ParenRight, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Asterisk", (long) hk_key::key_Asterisk, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Plus", (long) hk_key::key_Plus, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Comma", (long) hk_key::key_Comma, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Minus", (long) hk_key::key_Minus, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Period", (long) hk_key::key_Period, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Slash", (long) hk_key::key_Slash, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_0", (long) hk_key::key_0, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_1", (long) hk_key::key_1, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_2", (long) hk_key::key_2, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_3", (long) hk_key::key_3, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_4", (long) hk_key::key_4, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_5", (long) hk_key::key_5, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_6", (long) hk_key::key_6, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_7", (long) hk_key::key_7, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_8", (long) hk_key::key_8, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_9", (long) hk_key::key_9, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Colon", (long) hk_key::key_Colon, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Semicolon", (long) hk_key::key_Semicolon, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Less", (long) hk_key::key_Less, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Equal", (long) hk_key::key_Equal, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Greater", (long) hk_key::key_Greater, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Question", (long) hk_key::key_Question, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_At", (long) hk_key::key_At, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_A", (long) hk_key::key_A, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_B", (long) hk_key::key_B, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_C", (long) hk_key::key_C, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_D", (long) hk_key::key_D, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_E", (long) hk_key::key_E, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_F", (long) hk_key::key_F, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_G", (long) hk_key::key_G, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_H", (long) hk_key::key_H, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_I", (long) hk_key::key_I, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_J", (long) hk_key::key_J, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_K", (long) hk_key::key_K, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_L", (long) hk_key::key_L, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_M", (long) hk_key::key_M, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_N", (long) hk_key::key_N, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_O", (long) hk_key::key_O, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_P", (long) hk_key::key_P, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Q", (long) hk_key::key_Q, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_R", (long) hk_key::key_R, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_S", (long) hk_key::key_S, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_T", (long) hk_key::key_T, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_U", (long) hk_key::key_U, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_V", (long) hk_key::key_V, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_W", (long) hk_key::key_W, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_X", (long) hk_key::key_X, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Y", (long) hk_key::key_Y, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Z", (long) hk_key::key_Z, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_BracketLeft", (long) hk_key::key_BracketLeft, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Backslash", (long) hk_key::key_Backslash, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_BracketRight", (long) hk_key::key_BracketRight, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_AsciiCircum", (long) hk_key::key_AsciiCircum, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Underscore", (long) hk_key::key_Underscore, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_QuoteLeft", (long) hk_key::key_QuoteLeft, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_BraceLeft", (long) hk_key::key_BraceLeft, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Bar", (long) hk_key::key_Bar, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_BraceRight", (long) hk_key::key_BraceRight, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_AsciiTilde", (long) hk_key::key_AsciiTilde, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_nobreakspace", (long) hk_key::key_nobreakspace, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_exclamdown", (long) hk_key::key_exclamdown, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_cent", (long) hk_key::key_cent, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_sterling", (long) hk_key::key_sterling, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_currency", (long) hk_key::key_currency, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_yen", (long) hk_key::key_yen, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_brokenbar", (long) hk_key::key_brokenbar, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_section", (long) hk_key::key_section, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_diaeresis", (long) hk_key::key_diaeresis, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_copyright", (long) hk_key::key_copyright, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_ordfeminine", (long) hk_key::key_ordfeminine, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_guillemotleft", (long) hk_key::key_guillemotleft, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_notsign", (long) hk_key::key_notsign, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_hyphen", (long) hk_key::key_hyphen, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_registered", (long) hk_key::key_registered, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_macron", (long) hk_key::key_macron, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_degree", (long) hk_key::key_degree, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_plusminus", (long) hk_key::key_plusminus, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_twosuperior", (long) hk_key::key_twosuperior, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_threesuperior", (long) hk_key::key_threesuperior, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_acute", (long) hk_key::key_acute, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_mu", (long) hk_key::key_mu, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_paragraph", (long) hk_key::key_paragraph, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_periodcentered", (long) hk_key::key_periodcentered, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_cedilla", (long) hk_key::key_cedilla, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_onesuperior", (long) hk_key::key_onesuperior, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_masculine", (long) hk_key::key_masculine, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_guillemotright", (long) hk_key::key_guillemotright, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_onequarter", (long) hk_key::key_onequarter, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_onehalf", (long) hk_key::key_onehalf, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_threequarters", (long) hk_key::key_threequarters, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_questiondown", (long) hk_key::key_questiondown, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Agrave", (long) hk_key::key_Agrave, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Aacute", (long) hk_key::key_Aacute, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Acircumflex", (long) hk_key::key_Acircumflex, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Atilde", (long) hk_key::key_Atilde, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Adiaeresis", (long) hk_key::key_Adiaeresis, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Aring", (long) hk_key::key_Aring, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_AE", (long) hk_key::key_AE, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Ccedilla", (long) hk_key::key_Ccedilla, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Egrave", (long) hk_key::key_Egrave, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Eacute", (long) hk_key::key_Eacute, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Ecircumflex", (long) hk_key::key_Ecircumflex, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Ediaeresis", (long) hk_key::key_Ediaeresis, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Igrave", (long) hk_key::key_Igrave, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Iacute", (long) hk_key::key_Iacute, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Icircumflex", (long) hk_key::key_Icircumflex, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Idiaeresis", (long) hk_key::key_Idiaeresis, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_ETH", (long) hk_key::key_ETH, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Ntilde", (long) hk_key::key_Ntilde, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Ograve", (long) hk_key::key_Ograve, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Oacute", (long) hk_key::key_Oacute, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Ocircumflex", (long) hk_key::key_Ocircumflex, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Otilde", (long) hk_key::key_Otilde, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Odiaeresis", (long) hk_key::key_Odiaeresis, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_multiply", (long) hk_key::key_multiply, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Ooblique", (long) hk_key::key_Ooblique, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Ugrave", (long) hk_key::key_Ugrave, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Uacute", (long) hk_key::key_Uacute, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Ucircumflex", (long) hk_key::key_Ucircumflex, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Udiaeresis", (long) hk_key::key_Udiaeresis, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Yacute", (long) hk_key::key_Yacute, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_THORN", (long) hk_key::key_THORN, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_ssharp", (long) hk_key::key_ssharp, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_agrave", (long) hk_key::key_agrave, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_aacute", (long) hk_key::key_aacute, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_acircumflex", (long) hk_key::key_acircumflex, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_atilde", (long) hk_key::key_atilde, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_adiaeresis", (long) hk_key::key_adiaeresis, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_aring", (long) hk_key::key_aring, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_ae", (long) hk_key::key_ae, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_ccedilla", (long) hk_key::key_ccedilla, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_egrave", (long) hk_key::key_egrave, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_eacute", (long) hk_key::key_eacute, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_ecircumflex", (long) hk_key::key_ecircumflex, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_ediaeresis", (long) hk_key::key_ediaeresis, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_igrave", (long) hk_key::key_igrave, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_iacute", (long) hk_key::key_iacute, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_icircumflex", (long) hk_key::key_icircumflex, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_idiaeresis", (long) hk_key::key_idiaeresis, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_eth", (long) hk_key::key_eth, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_ntilde", (long) hk_key::key_ntilde, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_ograve", (long) hk_key::key_ograve, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_oacute", (long) hk_key::key_oacute, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_ocircumflex", (long) hk_key::key_ocircumflex, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_otilde", (long) hk_key::key_otilde, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_odiaeresis", (long) hk_key::key_odiaeresis, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_division", (long) hk_key::key_division, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_oslash", (long) hk_key::key_oslash, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_ugrave", (long) hk_key::key_ugrave, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_uacute", (long) hk_key::key_uacute, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_ucircumflex", (long) hk_key::key_ucircumflex, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_udiaeresis", (long) hk_key::key_udiaeresis, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_yacute", (long) hk_key::key_yacute, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_thorn", (long) hk_key::key_thorn, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_ydiaeresis", (long) hk_key::key_ydiaeresis, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Back", (long) hk_key::key_Back, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Forward", (long) hk_key::key_Forward, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Stop", (long) hk_key::key_Stop, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Refresh", (long) hk_key::key_Refresh, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_VolumeDown", (long) hk_key::key_VolumeDown, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_VolumeMute", (long) hk_key::key_VolumeMute, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_VolumeUp", (long) hk_key::key_VolumeUp, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_BassBoost", (long) hk_key::key_BassBoost, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_BassUp", (long) hk_key::key_BassUp, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_BassDown", (long) hk_key::key_BassDown, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_TrebleUp", (long) hk_key::key_TrebleUp, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_TrebleDown", (long) hk_key::key_TrebleDown, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_MediaPlay", (long) hk_key::key_MediaPlay, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_MediaStop", (long) hk_key::key_MediaStop, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_MediaPrev", (long) hk_key::key_MediaPrev, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_MediaNext", (long) hk_key::key_MediaNext, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_MediaRecord", (long) hk_key::key_MediaRecord, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_HomePage", (long) hk_key::key_HomePage, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Favorites", (long) hk_key::key_Favorites, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Search", (long) hk_key::key_Search, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Standby", (long) hk_key::key_Standby, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_OpenUrl", (long) hk_key::key_OpenUrl, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_LaunchMail", (long) hk_key::key_LaunchMail, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_LaunchMedia", (long) hk_key::key_LaunchMedia, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Launch0", (long) hk_key::key_Launch0, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Launch1", (long) hk_key::key_Launch1, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Launch2", (long) hk_key::key_Launch2, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Launch3", (long) hk_key::key_Launch3, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Launch4", (long) hk_key::key_Launch4, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Launch5", (long) hk_key::key_Launch5, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Launch6", (long) hk_key::key_Launch6, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Launch7", (long) hk_key::key_Launch7, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Launch8", (long) hk_key::key_Launch8, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_Launch9", (long) hk_key::key_Launch9, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_LaunchA", (long) hk_key::key_LaunchA, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_LaunchB", (long) hk_key::key_LaunchB, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_LaunchC", (long) hk_key::key_LaunchC, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_LaunchD", (long) hk_key::key_LaunchD, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_LaunchE", (long) hk_key::key_LaunchE, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_LaunchF", (long) hk_key::key_LaunchF, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_MediaLast", (long) hk_key::key_MediaLast, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_key_unknown", (long) hk_key::key_unknown, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_state_normal", (long) hk_key::state_normal, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_state_shift", (long) hk_key::state_shift, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_state_ctrl", (long) hk_key::state_ctrl, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_key_state_alt", (long) hk_key::state_alt, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_dsmodevisible_designmode", (long) hk_dsmodevisible::designmode, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_dsmodevisible_viewmode", (long) hk_dsmodevisible::viewmode, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_dsmodevisible_filtermode", (long) hk_dsmodevisible::filtermode, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_presentation_general", (long) hk_presentation::general, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_presentation_form", (long) hk_presentation::form, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_presentation_report", (long) hk_presentation::report, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_presentation_qbe", (long) hk_presentation::qbe, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_presentation_referentialintegrity", (long) hk_presentation::referentialintegrity, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_presentation_bulkfont", (long) hk_presentation::bulkfont, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_presentation_bulkforeground", (long) hk_presentation::bulkforeground, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_presentation_bulkbackground", (long) hk_presentation::bulkbackground, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_presentation_relative", (long) hk_presentation::relative, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_presentation_absolute", (long) hk_presentation::absolute, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_form_include_data", (long) hk_form::include_data, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_form_no_data", (long) hk_form::no_data, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_report_landscape", (long) hk_report::landscape, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_report_portrait", (long) hk_report::portrait, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_report_A0", (long) hk_report::A0, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_report_A1", (long) hk_report::A1, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_report_A2", (long) hk_report::A2, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_report_A3", (long) hk_report::A3, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_report_A4", (long) hk_report::A4, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_report_A5", (long) hk_report::A5, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_report_A6", (long) hk_report::A6, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_report_A7", (long) hk_report::A7, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_report_A8", (long) hk_report::A8, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_report_A9", (long) hk_report::A9, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_report_A10", (long) hk_report::A10, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_report_letter", (long) hk_report::letter, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_report_legal", (long) hk_report::legal, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_report_executive", (long) hk_report::executive, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_report_tabloid", (long) hk_report::tabloid, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_report_userdefined", (long) hk_report::userdefined, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_dsgridcolumn_columnedit", (long) hk_dsgridcolumn::columnedit, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_dsgridcolumn_columnbool", (long) hk_dsgridcolumn::columnbool, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_dsgridcolumn_columncombo", (long) hk_dsgridcolumn::columncombo, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_dscombobox_combo", (long) hk_dscombobox::combo, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_dscombobox_combo_noedit", (long) hk_dscombobox::combo_noedit, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_dscombobox_selector", (long) hk_dscombobox::selector, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_reportxml_fieldname", (long) hk_reportxml::fieldname, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"hk_reportxml_fieldnameattribute", (long) hk_reportxml::fieldnameattribute, 0, 0, 0},
{0}};

#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT(void) SWIG_init(void) {
    static PyObject *SWIG_globals = 0; 
    static int       typeinit = 0;
    PyObject *m, *d;
    int       i;
    if (!SWIG_globals) SWIG_globals = SWIG_newvarlink();
    m = Py_InitModule((char *) SWIG_name, SwigMethods);
    d = PyModule_GetDict(m);
    
    if (!typeinit) {
        for (i = 0; swig_types_initial[i]; i++) {
            swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
        }
        typeinit = 1;
    }
    SWIG_InstallConstants(d,swig_const_table);
    
    PyDict_SetItemString(d,(char*)"cvar", SWIG_globals);
    SWIG_addvarlink(SWIG_globals,(char*)"defaulttextdelimiter",_wrap_defaulttextdelimiter_get, _wrap_defaulttextdelimiter_set);
    SWIG_addvarlink(SWIG_globals,(char*)"defaultidentifierdelimiter",_wrap_defaultidentifierdelimiter_get, _wrap_defaultidentifierdelimiter_set);
    SWIG_addvarlink(SWIG_globals,(char*)"hk_aqua",_wrap_hk_aqua_get, _wrap_hk_aqua_set);
    SWIG_addvarlink(SWIG_globals,(char*)"hk_beige",_wrap_hk_beige_get, _wrap_hk_beige_set);
    SWIG_addvarlink(SWIG_globals,(char*)"hk_black",_wrap_hk_black_get, _wrap_hk_black_set);
    SWIG_addvarlink(SWIG_globals,(char*)"hk_blue",_wrap_hk_blue_get, _wrap_hk_blue_set);
    SWIG_addvarlink(SWIG_globals,(char*)"hk_brown",_wrap_hk_brown_get, _wrap_hk_brown_set);
    SWIG_addvarlink(SWIG_globals,(char*)"hk_fuchsia",_wrap_hk_fuchsia_get, _wrap_hk_fuchsia_set);
    SWIG_addvarlink(SWIG_globals,(char*)"hk_darkgrey",_wrap_hk_darkgrey_get, _wrap_hk_darkgrey_set);
    SWIG_addvarlink(SWIG_globals,(char*)"hk_darkyellow",_wrap_hk_darkyellow_get, _wrap_hk_darkyellow_set);
    SWIG_addvarlink(SWIG_globals,(char*)"hk_green",_wrap_hk_green_get, _wrap_hk_green_set);
    SWIG_addvarlink(SWIG_globals,(char*)"hk_grey",_wrap_hk_grey_get, _wrap_hk_grey_set);
    SWIG_addvarlink(SWIG_globals,(char*)"hk_lightgrey",_wrap_hk_lightgrey_get, _wrap_hk_lightgrey_set);
    SWIG_addvarlink(SWIG_globals,(char*)"hk_lime",_wrap_hk_lime_get, _wrap_hk_lime_set);
    SWIG_addvarlink(SWIG_globals,(char*)"hk_maroon",_wrap_hk_maroon_get, _wrap_hk_maroon_set);
    SWIG_addvarlink(SWIG_globals,(char*)"hk_navy",_wrap_hk_navy_get, _wrap_hk_navy_set);
    SWIG_addvarlink(SWIG_globals,(char*)"hk_olive",_wrap_hk_olive_get, _wrap_hk_olive_set);
    SWIG_addvarlink(SWIG_globals,(char*)"hk_orange",_wrap_hk_orange_get, _wrap_hk_orange_set);
    SWIG_addvarlink(SWIG_globals,(char*)"hk_pink",_wrap_hk_pink_get, _wrap_hk_pink_set);
    SWIG_addvarlink(SWIG_globals,(char*)"hk_purple",_wrap_hk_purple_get, _wrap_hk_purple_set);
    SWIG_addvarlink(SWIG_globals,(char*)"hk_red",_wrap_hk_red_get, _wrap_hk_red_set);
    SWIG_addvarlink(SWIG_globals,(char*)"hk_silver",_wrap_hk_silver_get, _wrap_hk_silver_set);
    SWIG_addvarlink(SWIG_globals,(char*)"hk_teal",_wrap_hk_teal_get, _wrap_hk_teal_set);
    SWIG_addvarlink(SWIG_globals,(char*)"hk_white",_wrap_hk_white_get, _wrap_hk_white_set);
    SWIG_addvarlink(SWIG_globals,(char*)"hk_yellow",_wrap_hk_yellow_get, _wrap_hk_yellow_set);
    SWIG_addvarlink(SWIG_globals,(char*)"default_cellwidth",_wrap_default_cellwidth_get, _wrap_default_cellwidth_set);
    SWIG_addvarlink(SWIG_globals,(char*)"default_cellheight",_wrap_default_cellheight_get, _wrap_default_cellheight_set);
}

